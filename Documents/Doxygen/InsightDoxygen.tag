<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.14.0" doxygen_gitid="cbe58f6237b2238c9af7f51c6b7afb8bbf52c866">
  <compound kind="file">
    <name>MainPage.dox</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Documents/Doxygen/</path>
    <filename>MainPage_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>Modules.dox</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Documents/Doxygen/</path>
    <filename>Modules_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>igtlBindMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlBindMessage_8cxx.html</filename>
    <includes id="igtlBindMessage_8h" name="igtlBindMessage.h" local="yes" import="no" module="no" objc="no">igtlBindMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__bind_8h" name="igtl_bind.h" local="yes" import="no" module="no" objc="no">igtl_bind.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlBindMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlBindMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <class kind="struct">igtl::BindMessageBase::_ChildMessageInfo</class>
    <class kind="class">igtl::BindMessage</class>
    <class kind="class">igtl::BindMessageBase</class>
    <class kind="class">igtl::GetBindMessage</class>
    <class kind="class">igtl::RTSBindMessage</class>
    <class kind="class">igtl::StartBindMessage</class>
    <class kind="class">igtl::StopBindMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlCapabilityMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlCapabilityMessage_8cxx.html</filename>
    <includes id="igtlCapabilityMessage_8h" name="igtlCapabilityMessage.h" local="yes" import="no" module="no" objc="no">igtlCapabilityMessage.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="no" import="no" module="no" objc="no">igtlTypes.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="no" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__capability_8h" name="igtl_capability.h" local="no" import="no" module="no" objc="no">igtl_capability.h</includes>
    <includes id="igtlOSUtil_8h" name="igtlOSUtil.h" local="no" import="no" module="no" objc="no">igtlOSUtil.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlCapabilityMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlCapabilityMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlCapabilityMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <class kind="class">igtl::CapabilityMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlClientSocket.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlClientSocket_8cxx.html</filename>
    <includes id="igtlClientSocket_8h" name="igtlClientSocket.h" local="yes" import="no" module="no" objc="no">igtlClientSocket.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlClientSocket.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlClientSocket_8h.html</filename>
    <includes id="igtlSocket_8h" name="igtlSocket.h" local="yes" import="no" module="no" objc="no">igtlSocket.h</includes>
    <includes id="igtlWin32Header_8h" name="igtlWin32Header.h" local="yes" import="no" module="no" objc="no">igtlWin32Header.h</includes>
    <class kind="class">igtl::ClientSocket</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlColorTableMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlColorTableMessage_8cxx.html</filename>
    <includes id="igtlColorTableMessage_8h" name="igtlColorTableMessage.h" local="yes" import="no" module="no" objc="no">igtlColorTableMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__colortable_8h" name="igtl_colortable.h" local="yes" import="no" module="no" objc="no">igtl_colortable.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlColorTableMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlColorTableMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <class kind="class">igtl::ColorTableMessage</class>
    <class kind="class">igtl::GetColorTableMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlCommandMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlCommandMessage_8cxx.html</filename>
    <includes id="igtlCommandMessage_8h" name="igtlCommandMessage.h" local="yes" import="no" module="no" objc="no">igtlCommandMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlCommandMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUM_ENCODINGS</name>
      <anchorfile>igtlCommandMessage_8cxx.html</anchorfile>
      <anchor>a66fbec8ab2b2aefbe07cbc80e356b4f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlCommandMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlCommandMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtl__command_8h" name="igtl_command.h" local="yes" import="no" module="no" objc="no">igtl_command.h</includes>
    <class kind="class">igtl::CommandMessage</class>
    <class kind="class">igtl::RTSCommandMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlCommon.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlCommon_8h.html</filename>
    <includes id="igtl__header_8h" name="igtl_header.h" local="no" import="no" module="no" objc="no">igtl_header.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlConditionVariable.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlConditionVariable_8cxx.html</filename>
    <includes id="igtlConditionVariable_8h" name="igtlConditionVariable.h" local="yes" import="no" module="no" objc="no">igtlConditionVariable.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlConditionVariable.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlConditionVariable_8h.html</filename>
    <includes id="igtlMutexLock_8h" name="igtlMutexLock.h" local="yes" import="no" module="no" objc="no">igtlMutexLock.h</includes>
    <includes id="igtlLightObject_8h" name="igtlLightObject.h" local="yes" import="no" module="no" objc="no">igtlLightObject.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="class">igtl::ConditionVariable</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlCreateObjectFunction.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlCreateObjectFunction_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <class kind="class">igtl::CreateObjectFunction</class>
    <class kind="class">igtl::CreateObjectFunctionBase</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlFastMutexLock.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlFastMutexLock_8cxx.html</filename>
    <includes id="igtlFastMutexLock_8h" name="igtlFastMutexLock.h" local="yes" import="no" module="no" objc="no">igtlFastMutexLock.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlFastMutexLock.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlFastMutexLock_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlSimpleFastMutexLock_8h" name="igtlSimpleFastMutexLock.h" local="yes" import="no" module="no" objc="no">igtlSimpleFastMutexLock.h</includes>
    <includes id="igtlObjectFactory_8h" name="igtlObjectFactory.h" local="yes" import="no" module="no" objc="no">igtlObjectFactory.h</includes>
    <class kind="class">igtl::FastMutexLock</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlGeneralSocket.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlGeneralSocket_8cxx.html</filename>
    <includes id="igtlGeneralSocket_8h" name="igtlGeneralSocket.h" local="yes" import="no" module="no" objc="no">igtlGeneralSocket.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>igtlCloseSocketMacro</name>
      <anchorfile>igtlGeneralSocket_8cxx.html</anchorfile>
      <anchor>a9a4d282ee9fcd53e7f6d61f394eee1a3</anchor>
      <arglist>(sock)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TTL_TYPE</name>
      <anchorfile>igtlGeneralSocket_8cxx.html</anchorfile>
      <anchor>aa4e96a751d218d5f1bc0ec997e0b4aa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlGeneralSocket.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlGeneralSocket_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlObjectFactory_8h" name="igtlObjectFactory.h" local="yes" import="no" module="no" objc="no">igtlObjectFactory.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlWin32Header_8h" name="igtlWin32Header.h" local="yes" import="no" module="no" objc="no">igtlWin32Header.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="class">igtl::GeneralSocket</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IP4AddressStrLen</name>
      <anchorfile>igtlGeneralSocket_8h.html</anchorfile>
      <anchor>a0f6560f2df651b07207fc8ea07e7faa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP6AddressStrLen</name>
      <anchorfile>igtlGeneralSocket_8h.html</anchorfile>
      <anchor>a0c47384707d1ede2a4fac02f17eda0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MINIMUM_PACKET_LENGTH</name>
      <anchorfile>igtlGeneralSocket_8h.html</anchorfile>
      <anchor>ae524cdf69ad68bc38b01ef596220130d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTP_HEADER_LENGTH</name>
      <anchorfile>igtlGeneralSocket_8h.html</anchorfile>
      <anchor>a1c000163a11e62446a2d231356a771f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTP_PAYLOAD_LENGTH</name>
      <anchorfile>igtlGeneralSocket_8h.html</anchorfile>
      <anchor>aae76bf777fd7aa565f59b56cb4741c98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlImageMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlImageMessage_8cxx.html</filename>
    <includes id="igtlImageMessage_8h" name="igtlImageMessage.h" local="yes" import="no" module="no" objc="no">igtlImageMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__image_8h" name="igtl_image.h" local="yes" import="no" module="no" objc="no">igtl_image.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlImageMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlImageMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <class kind="class">igtl::GetImageMessage</class>
    <class kind="class">igtl::ImageMessage</class>
    <class kind="class">igtl::StopImageMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlImageMessage2.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlImageMessage2_8cxx.html</filename>
    <includes id="igtlImageMessage2_8h" name="igtlImageMessage2.h" local="yes" import="no" module="no" objc="no">igtlImageMessage2.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__image_8h" name="igtl_image.h" local="yes" import="no" module="no" objc="no">igtl_image.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlImageMessage2.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlImageMessage2_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <class kind="class">igtl::GetImageMessage2</class>
    <class kind="class">igtl::ImageMessage2</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FRAGMENTED_PACK</name>
      <anchorfile>igtlImageMessage2_8h.html</anchorfile>
      <anchor>afd585f55d25e623d589a0438a56f8742</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlImageMetaMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlImageMetaMessage_8cxx.html</filename>
    <includes id="igtlImageMetaMessage_8h" name="igtlImageMetaMessage.h" local="yes" import="no" module="no" objc="no">igtlImageMetaMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__imgmeta_8h" name="igtl_imgmeta.h" local="yes" import="no" module="no" objc="no">igtl_imgmeta.h</includes>
    <includes id="igtl__image_8h" name="igtl_image.h" local="yes" import="no" module="no" objc="no">igtl_image.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlImageMetaMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlImageMetaMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlImageMetaMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <includes id="igtlImageMessage_8h" name="igtlImageMessage.h" local="yes" import="no" module="no" objc="no">igtlImageMessage.h</includes>
    <class kind="class">igtl::GetImageMetaMessage</class>
    <class kind="class">igtl::ImageMetaElement</class>
    <class kind="class">igtl::ImageMetaMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlLabelMetaMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlLabelMetaMessage_8cxx.html</filename>
    <includes id="igtlLabelMetaMessage_8h" name="igtlLabelMetaMessage.h" local="yes" import="no" module="no" objc="no">igtlLabelMetaMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__imgmeta_8h" name="igtl_imgmeta.h" local="yes" import="no" module="no" objc="no">igtl_imgmeta.h</includes>
    <includes id="igtl__lbmeta_8h" name="igtl_lbmeta.h" local="yes" import="no" module="no" objc="no">igtl_lbmeta.h</includes>
    <includes id="igtl__image_8h" name="igtl_image.h" local="yes" import="no" module="no" objc="no">igtl_image.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlLabelMetaMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlLabelMetaMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlLabelMetaMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <includes id="igtlImageMessage_8h" name="igtlImageMessage.h" local="yes" import="no" module="no" objc="no">igtlImageMessage.h</includes>
    <class kind="class">igtl::GetLabelMetaMessage</class>
    <class kind="class">igtl::LabelMetaElement</class>
    <class kind="class">igtl::LabelMetaMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlLightObject.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlLightObject_8cxx.html</filename>
    <includes id="igtlLightObject_8h" name="igtlLightObject.h" local="yes" import="no" module="no" objc="no">igtlLightObject.h</includes>
    <includes id="igtlObjectFactory_8h" name="igtlObjectFactory.h" local="yes" import="no" module="no" objc="no">igtlObjectFactory.h</includes>
    <includes id="igtlFastMutexLock_8h" name="igtlFastMutexLock.h" local="yes" import="no" module="no" objc="no">igtlFastMutexLock.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlLightObject.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlLightObject_8h.html</filename>
    <includes id="igtlSmartPointer_8h" name="igtlSmartPointer.h" local="yes" import="no" module="no" objc="no">igtlSmartPointer.h</includes>
    <includes id="igtlSimpleFastMutexLock_8h" name="igtlSimpleFastMutexLock.h" local="yes" import="no" module="no" objc="no">igtlSimpleFastMutexLock.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <class kind="class">igtl::LightObject</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlMacro.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMacro_8h.html</filename>
    <includes id="igtlWin32Header_8h" name="igtlWin32Header.h" local="yes" import="no" module="no" objc="no">igtlWin32Header.h</includes>
    <class kind="class">igtl::OStringStream</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_EMPTY</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ad3e4d6e9b4ada6f1781e8964a15fb612</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_EXPORT_IGTLCommon</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>af0b19bfcfe2063dbc4646b8c6c6ca538</anchor>
      <arglist>(c, x, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_EXPORT_TEMPLATE</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a817e29a1b2bfbe2b43ed68c72eb13bab</anchor>
      <arglist>(EXPORT, c, x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMPORT_IGTLCommon</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a3d3ca209a16615600b4d2d0cd43b60b2</anchor>
      <arglist>(c, x, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMPORT_TEMPLATE</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>add80874c11eefa38e47a3c14205d7851</anchor>
      <arglist>(EXPORT, c, x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_LOCATION</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ab0846d56d9543dcd866b5d6d94c53ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NO_RETURN</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a61bbce00bf101d4d7aa8c962fda9a5b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_1</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a055970ef31c0f81aff909c087c33ac36</anchor>
      <arglist>(x1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_2</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>aa98ea91c9caecdc5521cd99d69348080</anchor>
      <arglist>(x1, x2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_3</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a393a579dd2917a2e6e592a62c18225ac</anchor>
      <arglist>(x1, x2, x3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_4</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>aa8b08e4d08f277acbac454bc6b4e12fa</anchor>
      <arglist>(x1, x2, x3, x4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_5</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a28d5d5677f49e6ba16fdeb09e8a559c7</anchor>
      <arglist>(x1, x2, x3, x4, x5)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_6</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a7db0787fd2e84de305f0ba35dad30866</anchor>
      <arglist>(x1, x2, x3, x4, x5, x6)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_7</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a609262815d87fa7bdfec9d1b286bc6d0</anchor>
      <arglist>(x1, x2, x3, x4, x5, x6, x7)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_8</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>aba3062cd8e1991d1ae7c8bcb9ad2f27f</anchor>
      <arglist>(x1, x2, x3, x4, x5, x6, x7, x8)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_9</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ae3331b5c56ee4c47e21ffe7c36290052</anchor>
      <arglist>(x1, x2, x3, x4, x5, x6, x7, x8, x9)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_DO_NOT_INSTANTIATE</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a9296c6d243597a9964c16a05209d74e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_EXPLICIT</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a0bb023b618c46c5897e6b62a558757cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_EXPORT</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ac0d777a0516398c794130c12690419f9</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_EXPORT_DELAY</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a0c78ff34dcbecf0df062f57c1e4faea2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_EXTERN</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a134bbb723d8cdeb85349d68234659177</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_IMPORT</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ab7f2adc8c812830403356834f3c81a0c</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_IMPORT_WORKS</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a471c782528e4bb4eb4233a106839eebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TEMPLATE_TXX</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ae4ae3b3fa96dea6e1068bd121611cf7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlBooleanMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a23ebe08e094a614bc269c1e671c07676</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlDebugMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a1ba8aa770232a53ec24dbd5c64868660</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlErrorMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>acdc21dcfcd362dcedb2606f051111802</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlExceptionMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a368477968e85d94c6a4f3dd5855a1cfa</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlFactorylessNewMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>adf0f10e6d3541f5ce06dc7ee2e5ea250</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlGenericOutputMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a887a288f0e9060fa7b692f48b5da3ed1</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlGetConstMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ad2c64eb0520b9899bbf3501250dcc7bc</anchor>
      <arglist>(name, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlGetConstObjectMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>aa24cb893742d92ac51fb07ce64b980d0</anchor>
      <arglist>(name, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlGetConstReferenceMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a957798ecc9094df3b5bc10208cbf2bfd</anchor>
      <arglist>(name, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlGetConstReferenceObjectMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ae984096040126214a816f645a3190fed</anchor>
      <arglist>(name, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlGetEnumMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a11ba17fba7b912e97dbfd777a320400a</anchor>
      <arglist>(name, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlGetInputMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a884a8d74665037c221ccc5601d1c4455</anchor>
      <arglist>(name, type, number)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlGetMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>aef2c3f21d361a6518703e9acef7938e8</anchor>
      <arglist>(name, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlGetObjectMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a0bd61e219e3df9a5145a1a1d3d4b4cef</anchor>
      <arglist>(name, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlGetStaticConstMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a82dbf41e7745c756319f9fdafba4e2ff</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlGetStringMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a3a8c356b91df55f922129bc8aa15558b</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlGetVectorMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ab7b23df6ce72594aa31cb531d3007771</anchor>
      <arglist>(name, type, count)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlLegacyBodyMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a54a6de5d64598c6397dd190253439f27</anchor>
      <arglist>(method, version)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlLegacyMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>aa9a5ca238e84124d8015d36890b6ef82</anchor>
      <arglist>(method)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlLegacyReplaceBodyMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a02de614621efd6141595a2c890ad51ae</anchor>
      <arglist>(method, version, replace)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlLogMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a1df859cf805fff275e94685b7190161a</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlLogMacroStatic</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a632d8148d60eeb6df22e1645814925cd</anchor>
      <arglist>(obj, x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlNewMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>af95bf7a575c2674bcce19cb2ca8187b9</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlNotUsed</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a0468193749479c141d811bbb27375e27</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlRangeBasedForBodyMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ab3f6c891b374d600ed978b026e467f63</anchor>
      <arglist>(classType, varType, memberVar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlRangeBasedForHeaderExternalMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a8e40d7bc717a1cf9badc31b4d1d83b5d</anchor>
      <arglist>(classType, varType, exportDecl)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlRangeBasedForHeaderMemberMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ab1c782498ac5fa3b031ab7842ab76761</anchor>
      <arglist>(varType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlSetClampMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a86b4a5c6a2298ac02ba66613a856046f</anchor>
      <arglist>(name, type, min, max)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlSetConstObjectMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a5653aaa5db01a69a837dc8a578c822f4</anchor>
      <arglist>(name, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlSetDecoratedInputMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a21dd2b6f7b017b2cc7c8c942df647008</anchor>
      <arglist>(name, type, number)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlSetDecoratedObjectInputMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a05f77ef4a9cfdb0e4d418fc800be8e28</anchor>
      <arglist>(name, type, number)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlSetEnumMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>aed11c6dc5d814ccf13b9b4980dc08826</anchor>
      <arglist>(name, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlSetInputMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a37dc27c8b0825279a556aacb6b67b42a</anchor>
      <arglist>(name, type, number)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlSetMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ab0093d67e025b980c2a327bc147b0ec4</anchor>
      <arglist>(name, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlSetObjectMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>aaf16fba8dd0d4d7e0887631d98ef554a</anchor>
      <arglist>(name, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlSetStringMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>ad477747ec90d6e7e37a7605b650061a1</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlSetVectorMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a5a8940492a187884a2a3dd277fec536d</anchor>
      <arglist>(name, type, count)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlStaticConstMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a4808d6717f379bf0be773c406d41df18</anchor>
      <arglist>(name, type, value)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlSuperclassTraitMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>af1db6884b8c38e7db4f4225f9103a3a1</anchor>
      <arglist>(traitnameType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlTypeMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a62d9718c29035dfca520438b5ae8bd51</anchor>
      <arglist>(thisClass, superclass)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtlWarningMacro</name>
      <anchorfile>igtlMacro_8h.html</anchorfile>
      <anchor>a4ec086c377f94ffb242c33edb3cf8d5a</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlMath.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMath_8cxx.html</filename>
    <includes id="igtlWin32Header_8h" name="igtlWin32Header.h" local="yes" import="no" module="no" objc="no">igtlWin32Header.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlMath.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMath_8h.html</filename>
    <includes id="igtlWin32Header_8h" name="igtlWin32Header.h" local="yes" import="no" module="no" objc="no">igtlWin32Header.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlMessageBase.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMessageBase_8cxx.html</filename>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlMessageFactory_8h" name="igtlMessageFactory.h" local="yes" import="no" module="no" objc="no">igtlMessageFactory.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlMessageBase.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMessageBase_8h.html</filename>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageHeader_8h" name="igtlMessageHeader.h" local="yes" import="no" module="no" objc="no">igtlMessageHeader.h</includes>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlObjectFactory_8h" name="igtlObjectFactory.h" local="yes" import="no" module="no" objc="no">igtlObjectFactory.h</includes>
    <includes id="igtlTimeStamp_8h" name="igtlTimeStamp.h" local="yes" import="no" module="no" objc="no">igtlTimeStamp.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="class">igtl::HeaderOnlyMessageBase</class>
    <class kind="class">igtl::MessageBase</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>igtlCreateDefaultQueryMessageClass</name>
      <anchorfile>igtlMessageBase_8h.html</anchorfile>
      <anchor>afdd3d9aee86d3b2a85d29556062e2716</anchor>
      <arglist>(name, msgtype)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlMessageDebugFunction.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMessageDebugFunction_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ABS_ERROR</name>
      <anchorfile>igtlMessageDebugFunction_8h.html</anchorfile>
      <anchor>a203499ae61808be5e8f7b7c03c3a66f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ArrayFloatComparison</name>
      <anchorfile>igtlMessageDebugFunction_8h.html</anchorfile>
      <anchor>ad9037efb4a9fa629c39570d383b64895</anchor>
      <arglist>(float returnArray[], float inArray[], int size, float tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MatrixComparison</name>
      <anchorfile>igtlMessageDebugFunction_8h.html</anchorfile>
      <anchor>a6d7cc6377bb6c709f807addd60469160</anchor>
      <arglist>(float outMatrix[4][4], float inMatrix[4][4], float tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TestDebugCharArrayCmp</name>
      <anchorfile>igtlMessageDebugFunction_8h.html</anchorfile>
      <anchor>a43823690d1dfce3ad27ea3d2a8a39a0c</anchor>
      <arglist>(void *inputPointer, unsigned char *inputArray, int size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlMessageFactory.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMessageFactory_8cxx.html</filename>
    <includes id="igtlMessageFactory_8h" name="igtlMessageFactory.h" local="yes" import="no" module="no" objc="no">igtlMessageFactory.h</includes>
    <includes id="igtlTransformMessage_8h" name="igtlTransformMessage.h" local="yes" import="no" module="no" objc="no">igtlTransformMessage.h</includes>
    <includes id="igtlPositionMessage_8h" name="igtlPositionMessage.h" local="yes" import="no" module="no" objc="no">igtlPositionMessage.h</includes>
    <includes id="igtlImageMessage_8h" name="igtlImageMessage.h" local="yes" import="no" module="no" objc="no">igtlImageMessage.h</includes>
    <includes id="igtlClientSocket_8h" name="igtlClientSocket.h" local="yes" import="no" module="no" objc="no">igtlClientSocket.h</includes>
    <includes id="igtlStatusMessage_8h" name="igtlStatusMessage.h" local="yes" import="no" module="no" objc="no">igtlStatusMessage.h</includes>
    <includes id="igtlCapabilityMessage_8h" name="igtlCapabilityMessage.h" local="yes" import="no" module="no" objc="no">igtlCapabilityMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlMessageFactory.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMessageFactory_8h.html</filename>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlMessageHeader_8h" name="igtlMessageHeader.h" local="yes" import="no" module="no" objc="no">igtlMessageHeader.h</includes>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <class kind="class">igtl::MessageFactory</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlMessageHandler.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMessageHandler_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlSocket_8h" name="igtlSocket.h" local="yes" import="no" module="no" objc="no">igtlSocket.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <class kind="class">igtl::MessageHandler</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlMessageHandlerMacro.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMessageHandlerMacro_8h.html</filename>
    <includes id="igtlMessageHandler_8h" name="igtlMessageHandler.h" local="yes" import="no" module="no" objc="no">igtlMessageHandler.h</includes>
    <class kind="class">SmartPointer</class>
    <member kind="define">
      <type>#define</type>
      <name>igtlMessageHandlerClassMacro</name>
      <anchorfile>igtlMessageHandlerMacro_8h.html</anchorfile>
      <anchor>a928a40a020ddfd8a7838161b31528f89</anchor>
      <arglist>(messagetype, classname, datatype)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlMessageHeader.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMessageHeader_8h.html</filename>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlMessageRTPWrapper.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMessageRTPWrapper_8cxx.html</filename>
    <includes id="igtlMessageRTPWrapper_8h" name="igtlMessageRTPWrapper.h" local="yes" import="no" module="no" objc="no">igtlMessageRTPWrapper.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlMessageRTPWrapper.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMessageRTPWrapper_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlMessageFactory_8h" name="igtlMessageFactory.h" local="yes" import="no" module="no" objc="no">igtlMessageFactory.h</includes>
    <includes id="igtlUDPServerSocket_8h" name="igtlUDPServerSocket.h" local="yes" import="no" module="no" objc="no">igtlUDPServerSocket.h</includes>
    <includes id="igtlUDPClientSocket_8h" name="igtlUDPClientSocket.h" local="yes" import="no" module="no" objc="no">igtlUDPClientSocket.h</includes>
    <includes id="igtlMutexLock_8h" name="igtlMutexLock.h" local="yes" import="no" module="no" objc="no">igtlMutexLock.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtlTimeStamp_8h" name="igtlTimeStamp.h" local="yes" import="no" module="no" objc="no">igtlTimeStamp.h</includes>
    <includes id="igtlOSUtil_8h" name="igtlOSUtil.h" local="yes" import="no" module="no" objc="no">igtlOSUtil.h</includes>
    <class kind="class">igtl::MessageRTPWrapper</class>
    <class kind="class">igtl::PacketBuffer</class>
    <class kind="class">igtl::ReorderBuffer</class>
    <class kind="class">igtl::UnWrappedMessage</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FragmentBeginIndicator</name>
      <anchorfile>igtlMessageRTPWrapper_8h.html</anchorfile>
      <anchor>a08222ffb7d38c92f06d3e9612b245f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FragmentEndIndicator</name>
      <anchorfile>igtlMessageRTPWrapper_8h.html</anchorfile>
      <anchor>af978523c219ccf74dea0259b5a4e3668</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FragmentIndexBytes</name>
      <anchorfile>igtlMessageRTPWrapper_8h.html</anchorfile>
      <anchor>aea1239a4899b1d3c9d088185b463804b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NoFragmentIndicator</name>
      <anchorfile>igtlMessageRTPWrapper_8h.html</anchorfile>
      <anchor>ab3b8be325c4d03bc61b33e818160664d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PacketMaximumBufferNum</name>
      <anchorfile>igtlMessageRTPWrapper_8h.html</anchorfile>
      <anchor>ae831770dce65445872365c4653c6ee6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ReorderBufferMaximumSize</name>
      <anchorfile>igtlMessageRTPWrapper_8h.html</anchorfile>
      <anchor>a05ea3753db85aabce565cb9f6936cfb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlMultiThreader.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMultiThreader_8cxx.html</filename>
    <includes id="igtlMultiThreader_8h" name="igtlMultiThreader.h" local="yes" import="no" module="no" objc="no">igtlMultiThreader.h</includes>
    <includes id="igtlMutexLock_8h" name="igtlMutexLock.h" local="yes" import="no" module="no" objc="no">igtlMutexLock.h</includes>
    <includes id="igtlObjectFactory_8h" name="igtlObjectFactory.h" local="yes" import="no" module="no" objc="no">igtlObjectFactory.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlMultiThreader.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMultiThreader_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlObjectFactory_8h" name="igtlObjectFactory.h" local="yes" import="no" module="no" objc="no">igtlObjectFactory.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlMutexLock_8h" name="igtlMutexLock.h" local="yes" import="no" module="no" objc="no">igtlMutexLock.h</includes>
    <class kind="class">igtl::MultiThreader</class>
    <class kind="class">igtl::MultiThreader::ThreadInfo</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_MAX_THREADS</name>
      <anchorfile>igtlMultiThreader_8h.html</anchorfile>
      <anchor>a2016557c55d80c0f1901deb1db4d73e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ThreadInfoStruct</name>
      <anchorfile>igtlMultiThreader_8h.html</anchorfile>
      <anchor>a975272f39ace1821fd3c61acdb0823ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlMutexLock.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMutexLock_8cxx.html</filename>
    <includes id="igtlMutexLock_8h" name="igtlMutexLock.h" local="yes" import="no" module="no" objc="no">igtlMutexLock.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlMutexLock.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlMutexLock_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlObjectFactory_8h" name="igtlObjectFactory.h" local="yes" import="no" module="no" objc="no">igtlObjectFactory.h</includes>
    <class kind="class">igtl::MutexLock</class>
    <class kind="class">igtl::SimpleMutexLock</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlNDArrayMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlNDArrayMessage_8cxx.html</filename>
    <includes id="igtlNDArrayMessage_8h" name="igtlNDArrayMessage.h" local="yes" import="no" module="no" objc="no">igtlNDArrayMessage.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__ndarray_8h" name="igtl_ndarray.h" local="yes" import="no" module="no" objc="no">igtl_ndarray.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlNDArrayMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlNDArrayMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlNDArrayMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <class kind="class">igtl::Array</class>
    <class kind="class">igtl::ArrayBase</class>
    <class kind="class">igtl::NDArrayMessage</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STRING_MESSAGE_DEFAULT_ENCODING</name>
      <anchorfile>igtlNDArrayMessage_8h.html</anchorfile>
      <anchor>a5f385c4379061a3b8e0514ccf50427b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlObject.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlObject_8cxx.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlObjectFactory_8h" name="igtlObjectFactory.h" local="yes" import="no" module="no" objc="no">igtlObjectFactory.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlObject.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlObject_8h.html</filename>
    <includes id="igtlLightObject_8h" name="igtlLightObject.h" local="yes" import="no" module="no" objc="no">igtlLightObject.h</includes>
    <class kind="class">igtl::Object</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlObjectFactory.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlObjectFactory_8h.html</filename>
    <includes id="igtlObjectFactoryBase_8h" name="igtlObjectFactoryBase.h" local="yes" import="no" module="no" objc="no">igtlObjectFactoryBase.h</includes>
    <class kind="class">igtl::ObjectFactory</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlObjectFactoryBase.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlObjectFactoryBase_8cxx.html</filename>
    <includes id="igtlObjectFactoryBase_8h" name="igtlObjectFactoryBase.h" local="yes" import="no" module="no" objc="no">igtlObjectFactoryBase.h</includes>
    <class kind="class">igtl::OverRideMap</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlObjectFactoryBase.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlObjectFactoryBase_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlCreateObjectFunction_8h" name="igtlCreateObjectFunction.h" local="yes" import="no" module="no" objc="no">igtlCreateObjectFunction.h</includes>
    <class kind="class">igtl::ObjectFactoryBase</class>
    <class kind="class">igtl::ObjectFactoryBase::OverrideInformation</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlOSUtil.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlOSUtil_8cxx.html</filename>
    <includes id="igtlOSUtil_8h" name="igtlOSUtil.h" local="yes" import="no" module="no" objc="no">igtlOSUtil.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlOSUtil.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlOSUtil_8h.html</filename>
    <includes id="igtlWin32Header_8h" name="igtlWin32Header.h" local="yes" import="no" module="no" objc="no">igtlWin32Header.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlPointMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlPointMessage_8cxx.html</filename>
    <includes id="igtlPointMessage_8h" name="igtlPointMessage.h" local="yes" import="no" module="no" objc="no">igtlPointMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__point_8h" name="igtl_point.h" local="yes" import="no" module="no" objc="no">igtl_point.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlPointMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlPointMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlPointMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <includes id="igtlImageMessage_8h" name="igtlImageMessage.h" local="yes" import="no" module="no" objc="no">igtlImageMessage.h</includes>
    <class kind="class">igtl::GetPointMessage</class>
    <class kind="class">igtl::PointElement</class>
    <class kind="class">igtl::PointMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlPolyDataMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlPolyDataMessage_8cxx.html</filename>
    <includes id="igtlPolyDataMessage_8h" name="igtlPolyDataMessage.h" local="yes" import="no" module="no" objc="no">igtlPolyDataMessage.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__polydata_8h" name="igtl_polydata.h" local="yes" import="no" module="no" objc="no">igtl_polydata.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlPolyDataMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlPolyDataMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlPolyDataMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <class kind="class">igtl::GetPolyDataMessage</class>
    <class kind="class">igtl::PolyDataAttribute</class>
    <class kind="class">igtl::PolyDataCellArray</class>
    <class kind="class">igtl::PolyDataMessage</class>
    <class kind="class">igtl::PolyDataPointArray</class>
    <class kind="class">igtl::RTSPolyDataMessage</class>
    <class kind="class">igtl::StartPolyDataMessage</class>
    <class kind="class">igtl::StopPolyDataMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlPositionMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlPositionMessage_8cxx.html</filename>
    <includes id="igtlPositionMessage_8h" name="igtlPositionMessage.h" local="yes" import="no" module="no" objc="no">igtlPositionMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__position_8h" name="igtl_position.h" local="yes" import="no" module="no" objc="no">igtl_position.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlPositionMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlPositionMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <class kind="class">igtl::PositionMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlQuaternionTrackingDataMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlQuaternionTrackingDataMessage_8cxx.html</filename>
    <includes id="igtlQuaternionTrackingDataMessage_8h" name="igtlQuaternionTrackingDataMessage.h" local="yes" import="no" module="no" objc="no">igtlQuaternionTrackingDataMessage.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__qtdata_8h" name="igtl_qtdata.h" local="yes" import="no" module="no" objc="no">igtl_qtdata.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlQuaternionTrackingDataMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlQuaternionTrackingDataMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlQuaternionTrackingDataMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <class kind="class">igtl::QuaternionTrackingDataElement</class>
    <class kind="class">igtl::QuaternionTrackingDataMessage</class>
    <class kind="class">igtl::RTSQuaternionTrackingDataMessage</class>
    <class kind="class">igtl::StartQuaternionTrackingDataMessage</class>
    <class kind="class">igtl::StopQuaternionTrackingDataMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlQueryMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlQueryMessage_8cxx.html</filename>
    <includes id="igtlQueryMessage_8h" name="igtlQueryMessage.h" local="yes" import="no" module="no" objc="no">igtlQueryMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlQueryMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlQueryMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlQueryMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <includes id="igtl__query_8h" name="igtl_query.h" local="yes" import="no" module="no" objc="no">igtl_query.h</includes>
    <class kind="class">igtl::QueryMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlSensorMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlSensorMessage_8cxx.html</filename>
    <includes id="igtlSensorMessage_8h" name="igtlSensorMessage.h" local="yes" import="no" module="no" objc="no">igtlSensorMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__sensor_8h" name="igtl_sensor.h" local="yes" import="no" module="no" objc="no">igtl_sensor.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlSensorMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlSensorMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlSensorMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <includes id="igtlUnit_8h" name="igtlUnit.h" local="yes" import="no" module="no" objc="no">igtlUnit.h</includes>
    <class kind="class">igtl::SensorMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlServerSocket.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlServerSocket_8cxx.html</filename>
    <includes id="igtlServerSocket_8h" name="igtlServerSocket.h" local="yes" import="no" module="no" objc="no">igtlServerSocket.h</includes>
    <includes id="igtlClientSocket_8h" name="igtlClientSocket.h" local="yes" import="no" module="no" objc="no">igtlClientSocket.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlServerSocket.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlServerSocket_8h.html</filename>
    <includes id="igtlSocket_8h" name="igtlSocket.h" local="yes" import="no" module="no" objc="no">igtlSocket.h</includes>
    <includes id="igtlClientSocket_8h" name="igtlClientSocket.h" local="yes" import="no" module="no" objc="no">igtlClientSocket.h</includes>
    <includes id="igtlWin32Header_8h" name="igtlWin32Header.h" local="yes" import="no" module="no" objc="no">igtlWin32Header.h</includes>
    <class kind="class">igtl::ServerSocket</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlSessionManager.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlSessionManager_8cxx.html</filename>
    <includes id="igtlSessionManager_8h" name="igtlSessionManager.h" local="yes" import="no" module="no" objc="no">igtlSessionManager.h</includes>
    <includes id="igtlMessageHandler_8h" name="igtlMessageHandler.h" local="yes" import="no" module="no" objc="no">igtlMessageHandler.h</includes>
    <includes id="igtlClientSocket_8h" name="igtlClientSocket.h" local="yes" import="no" module="no" objc="no">igtlClientSocket.h</includes>
    <includes id="igtlServerSocket_8h" name="igtlServerSocket.h" local="yes" import="no" module="no" objc="no">igtlServerSocket.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlSessionManager.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlSessionManager_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlMessageHandler_8h" name="igtlMessageHandler.h" local="yes" import="no" module="no" objc="no">igtlMessageHandler.h</includes>
    <class kind="class">igtl::SessionManager</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlSimpleFastMutexLock.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlSimpleFastMutexLock_8cxx.html</filename>
    <includes id="igtlSimpleFastMutexLock_8h" name="igtlSimpleFastMutexLock.h" local="yes" import="no" module="no" objc="no">igtlSimpleFastMutexLock.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlSimpleFastMutexLock.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlSimpleFastMutexLock_8h.html</filename>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <class kind="class">igtl::SimpleFastMutexLock</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlSmartPointer.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlSmartPointer_8h.html</filename>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <class kind="class">igtl::SmartPointer</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlSocket.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlSocket_8cxx.html</filename>
    <includes id="igtlSocket_8h" name="igtlSocket.h" local="yes" import="no" module="no" objc="no">igtlSocket.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>igtlCloseSocketMacro</name>
      <anchorfile>igtlSocket_8cxx.html</anchorfile>
      <anchor>a9a4d282ee9fcd53e7f6d61f394eee1a3</anchor>
      <arglist>(sock)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlSocket.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlSocket_8h.html</filename>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlObjectFactory_8h" name="igtlObjectFactory.h" local="yes" import="no" module="no" objc="no">igtlObjectFactory.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <includes id="igtlWin32Header_8h" name="igtlWin32Header.h" local="yes" import="no" module="no" objc="no">igtlWin32Header.h</includes>
    <class kind="class">igtl::Socket</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlStatusMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlStatusMessage_8cxx.html</filename>
    <includes id="igtlStatusMessage_8h" name="igtlStatusMessage.h" local="yes" import="no" module="no" objc="no">igtlStatusMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__status_8h" name="igtl_status.h" local="yes" import="no" module="no" objc="no">igtl_status.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlStatusMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlStatusMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlStatusMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <class kind="class">igtl::GetStatusMessage</class>
    <class kind="class">igtl::StatusMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlStringMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlStringMessage_8cxx.html</filename>
    <includes id="igtlStringMessage_8h" name="igtlStringMessage.h" local="yes" import="no" module="no" objc="no">igtlStringMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__string_8h" name="igtl_string.h" local="yes" import="no" module="no" objc="no">igtl_string.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlStringMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlStringMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlStringMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <class kind="class">igtl::StringMessage</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STRING_MESSAGE_DEFAULT_ENCODING</name>
      <anchorfile>igtlStringMessage_8h.html</anchorfile>
      <anchor>a5f385c4379061a3b8e0514ccf50427b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlTimeStamp.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlTimeStamp_8cxx.html</filename>
    <includes id="igtlTimeStamp_8h" name="igtlTimeStamp.h" local="yes" import="no" module="no" objc="no">igtlTimeStamp.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlTimeStamp.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlTimeStamp_8h.html</filename>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlObjectFactory_8h" name="igtlObjectFactory.h" local="yes" import="no" module="no" objc="no">igtlObjectFactory.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <class kind="class">igtl::TimeStamp</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlTrackingDataMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlTrackingDataMessage_8cxx.html</filename>
    <includes id="igtlTrackingDataMessage_8h" name="igtlTrackingDataMessage.h" local="yes" import="no" module="no" objc="no">igtlTrackingDataMessage.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__tdata_8h" name="igtl_tdata.h" local="yes" import="no" module="no" objc="no">igtl_tdata.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlTrackingDataMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlTrackingDataMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlTrackingDataMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <class kind="class">igtl::RTSTrackingDataMessage</class>
    <class kind="class">igtl::StartTrackingDataMessage</class>
    <class kind="class">igtl::StopTrackingDataMessage</class>
    <class kind="class">igtl::TrackingDataElement</class>
    <class kind="class">igtl::TrackingDataMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlTrajectoryMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlTrajectoryMessage_8cxx.html</filename>
    <includes id="igtlTrajectoryMessage_8h" name="igtlTrajectoryMessage.h" local="yes" import="no" module="no" objc="no">igtlTrajectoryMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__trajectory_8h" name="igtl_trajectory.h" local="yes" import="no" module="no" objc="no">igtl_trajectory.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlTrajectoryMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlTrajectoryMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlTrajectoryMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <includes id="igtlImageMessage_8h" name="igtlImageMessage.h" local="yes" import="no" module="no" objc="no">igtlImageMessage.h</includes>
    <class kind="class">igtl::GetTrajectoryMessage</class>
    <class kind="class">igtl::TrajectoryElement</class>
    <class kind="class">igtl::TrajectoryMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlTransformMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlTransformMessage_8cxx.html</filename>
    <includes id="igtlTransformMessage_8h" name="igtlTransformMessage.h" local="yes" import="no" module="no" objc="no">igtlTransformMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__transform_8h" name="igtl_transform.h" local="yes" import="no" module="no" objc="no">igtl_transform.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlTransformMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlTransformMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <class kind="class">igtl::GetTransformMessage</class>
    <class kind="class">igtl::TransformMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlTypes.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlTypes_8h.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>igtlComplex</name>
      <anchorfile>igtlTypes_8h.html</anchorfile>
      <anchor>af1e6db15f664457d8105e65a6c25528b</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlUDPClientSocket.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlUDPClientSocket_8cxx.html</filename>
    <includes id="igtlUDPClientSocket_8h" name="igtlUDPClientSocket.h" local="yes" import="no" module="no" objc="no">igtlUDPClientSocket.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlUDPClientSocket.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlUDPClientSocket_8h.html</filename>
    <includes id="igtlGeneralSocket_8h" name="igtlGeneralSocket.h" local="yes" import="no" module="no" objc="no">igtlGeneralSocket.h</includes>
    <includes id="igtlWin32Header_8h" name="igtlWin32Header.h" local="yes" import="no" module="no" objc="no">igtlWin32Header.h</includes>
    <class kind="class">igtl::UDPClientSocket</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlUDPServerSocket.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlUDPServerSocket_8cxx.html</filename>
    <includes id="igtlUDPServerSocket_8h" name="igtlUDPServerSocket.h" local="yes" import="no" module="no" objc="no">igtlUDPServerSocket.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlUDPServerSocket.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlUDPServerSocket_8h.html</filename>
    <includes id="igtlGeneralSocket_8h" name="igtlGeneralSocket.h" local="yes" import="no" module="no" objc="no">igtlGeneralSocket.h</includes>
    <includes id="igtlUDPClientSocket_8h" name="igtlUDPClientSocket.h" local="yes" import="no" module="no" objc="no">igtlUDPClientSocket.h</includes>
    <includes id="igtlWin32Header_8h" name="igtlWin32Header.h" local="yes" import="no" module="no" objc="no">igtlWin32Header.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <class kind="class">igtl::ClientDest</class>
    <class kind="class">igtl::GroupDest</class>
    <class kind="class">igtl::UDPServerSocket</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlUnit.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlUnit_8cxx.html</filename>
    <includes id="igtlUnit_8h" name="igtlUnit.h" local="yes" import="no" module="no" objc="no">igtlUnit.h</includes>
    <includes id="igtl__unit_8h" name="igtl_unit.h" local="yes" import="no" module="no" objc="no">igtl_unit.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlUnit_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlUnit.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlUnit_8h.html</filename>
    <includes id="igtlWin32Header_8h" name="igtlWin32Header.h" local="yes" import="no" module="no" objc="no">igtlWin32Header.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlObjectFactory_8h" name="igtlObjectFactory.h" local="yes" import="no" module="no" objc="no">igtlObjectFactory.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <class kind="class">igtl::Unit</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtl_bind.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__bind_8c.html</filename>
    <includes id="igtl__bind_8h" name="igtl_bind.h" local="yes" import="no" module="no" objc="no">igtl_bind.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_bind_alloc_info</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>a457480fd107efbfc66a96b3033fab0ad</anchor>
      <arglist>(igtl_bind_info *bind_info, igtl_uint16 ncmessages)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_bind_free_info</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>a407863d9519f86667791f9c5040782df</anchor>
      <arglist>(igtl_bind_info *bind_info)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_bind_get_crc</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>ac688b11a3a8c9a87b3109fe088a85f10</anchor>
      <arglist>(igtl_bind_info *info, int type, void *bind_message)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_bind_get_size</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>a0d1335a73517eb79cc82091daafc4cb4</anchor>
      <arglist>(igtl_bind_info *info, int type)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>igtl_bind_get_size_normal</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>a5c0a6dd20682d8accfc77ba9bdf1cdf2</anchor>
      <arglist>(igtl_bind_info *info)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>igtl_bind_get_size_request</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>acb3bcc7d0dfc9e5263d39b773f793b55</anchor>
      <arglist>(igtl_bind_info *info)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_bind_init_info</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>ac00f2a3ac38c3a55378ed1cd052a8695</anchor>
      <arglist>(igtl_bind_info *bind_info)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_bind_pack</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>a2453af1ba231b4b1a1af8de26cef3dfd</anchor>
      <arglist>(igtl_bind_info *info, void *byte_array, int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>igtl_bind_pack_normal</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>a0c88dba603bd5c1bce9469e4809a8e50</anchor>
      <arglist>(igtl_bind_info *info, void *byte_array)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>igtl_bind_pack_request</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>a4aa93b4a7b7476cef3b1d75b4464ae42</anchor>
      <arglist>(igtl_bind_info *info, void *byte_array)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_bind_unpack</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>af869693e5a56ab9c7c3f9b19706b6211</anchor>
      <arglist>(int type, void *byte_array, igtl_bind_info *info, igtl_uint64 size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>igtl_bind_unpack_normal</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>a715cc0be57d7951976bd1883fb65f2c5</anchor>
      <arglist>(void *byte_array, igtl_bind_info *info)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>igtl_bind_unpack_request</name>
      <anchorfile>igtl__bind_8c.html</anchorfile>
      <anchor>a5a4be356efbca84ff96fd2923da68af2</anchor>
      <arglist>(void *byte_array, igtl_bind_info *info, igtl_uint64 size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_bind.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__bind_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_bind_child_info</class>
    <class kind="struct">igtl_bind_info</class>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_bind_alloc_info</name>
      <anchorfile>igtl__bind_8h.html</anchorfile>
      <anchor>a457480fd107efbfc66a96b3033fab0ad</anchor>
      <arglist>(igtl_bind_info *bind_info, igtl_uint16 ncmessages)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_bind_free_info</name>
      <anchorfile>igtl__bind_8h.html</anchorfile>
      <anchor>a407863d9519f86667791f9c5040782df</anchor>
      <arglist>(igtl_bind_info *bind_info)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_bind_get_crc</name>
      <anchorfile>igtl__bind_8h.html</anchorfile>
      <anchor>ac688b11a3a8c9a87b3109fe088a85f10</anchor>
      <arglist>(igtl_bind_info *info, int type, void *bind_message)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_bind_get_size</name>
      <anchorfile>igtl__bind_8h.html</anchorfile>
      <anchor>a0d1335a73517eb79cc82091daafc4cb4</anchor>
      <arglist>(igtl_bind_info *info, int type)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_bind_init_info</name>
      <anchorfile>igtl__bind_8h.html</anchorfile>
      <anchor>ac00f2a3ac38c3a55378ed1cd052a8695</anchor>
      <arglist>(igtl_bind_info *bind_info)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_bind_pack</name>
      <anchorfile>igtl__bind_8h.html</anchorfile>
      <anchor>a2453af1ba231b4b1a1af8de26cef3dfd</anchor>
      <arglist>(igtl_bind_info *info, void *byte_array, int type)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_bind_unpack</name>
      <anchorfile>igtl__bind_8h.html</anchorfile>
      <anchor>af869693e5a56ab9c7c3f9b19706b6211</anchor>
      <arglist>(int type, void *byte_array, igtl_bind_info *info, igtl_uint64 size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_capability.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__capability_8c.html</filename>
    <includes id="igtl__capability_8h" name="igtl_capability.h" local="yes" import="no" module="no" objc="no">igtl_capability.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_capability_alloc_info</name>
      <anchorfile>igtl__capability_8c.html</anchorfile>
      <anchor>ad22335394c72ef43a1e510247c49fc98</anchor>
      <arglist>(igtl_capability_info *info, int ntypes)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_capability_free_info</name>
      <anchorfile>igtl__capability_8c.html</anchorfile>
      <anchor>a06018de3a46eb38d6a22628771bd22d1</anchor>
      <arglist>(igtl_capability_info *info)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_capability_get_crc</name>
      <anchorfile>igtl__capability_8c.html</anchorfile>
      <anchor>aac8958110e141ffddf2c8258cfb91916</anchor>
      <arglist>(igtl_capability_info *info, void *capability)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32 igtl_export</type>
      <name>igtl_capability_get_length</name>
      <anchorfile>igtl__capability_8c.html</anchorfile>
      <anchor>a823e9b97da8fa865f440cf89c70fcca3</anchor>
      <arglist>(igtl_capability_info *info)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_capability_init_info</name>
      <anchorfile>igtl__capability_8c.html</anchorfile>
      <anchor>ac1f37e3afc65770e4a5b3abd145d79f7</anchor>
      <arglist>(igtl_capability_info *info)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_capability_pack</name>
      <anchorfile>igtl__capability_8c.html</anchorfile>
      <anchor>a41bc1a4e981b5a1336a2755531afc326</anchor>
      <arglist>(igtl_capability_info *info, void *byte_array)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_capability_unpack</name>
      <anchorfile>igtl__capability_8c.html</anchorfile>
      <anchor>a8b5689339f38c4eb3f8576edcdcf829a</anchor>
      <arglist>(void *byte_array, igtl_capability_info *info, igtl_uint64 pack_size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_capability.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__capability_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_capability_info</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_CAPABILITY_HEADER_SIZE</name>
      <anchorfile>igtl__capability_8h.html</anchorfile>
      <anchor>a284a737c9757f9c9f97774997a916949</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_capability_alloc_info</name>
      <anchorfile>igtl__capability_8h.html</anchorfile>
      <anchor>ad22335394c72ef43a1e510247c49fc98</anchor>
      <arglist>(igtl_capability_info *info, int ntypes)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_capability_free_info</name>
      <anchorfile>igtl__capability_8h.html</anchorfile>
      <anchor>a06018de3a46eb38d6a22628771bd22d1</anchor>
      <arglist>(igtl_capability_info *info)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_capability_get_crc</name>
      <anchorfile>igtl__capability_8h.html</anchorfile>
      <anchor>aac8958110e141ffddf2c8258cfb91916</anchor>
      <arglist>(igtl_capability_info *info, void *capability)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32 igtl_export</type>
      <name>igtl_capability_get_length</name>
      <anchorfile>igtl__capability_8h.html</anchorfile>
      <anchor>a823e9b97da8fa865f440cf89c70fcca3</anchor>
      <arglist>(igtl_capability_info *info)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_capability_init_info</name>
      <anchorfile>igtl__capability_8h.html</anchorfile>
      <anchor>ac1f37e3afc65770e4a5b3abd145d79f7</anchor>
      <arglist>(igtl_capability_info *info)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_capability_pack</name>
      <anchorfile>igtl__capability_8h.html</anchorfile>
      <anchor>a41bc1a4e981b5a1336a2755531afc326</anchor>
      <arglist>(igtl_capability_info *info, void *byte_array)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_capability_unpack</name>
      <anchorfile>igtl__capability_8h.html</anchorfile>
      <anchor>a8b5689339f38c4eb3f8576edcdcf829a</anchor>
      <arglist>(void *byte_array, igtl_capability_info *info, igtl_uint64 pack_size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_colortable.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__colortable_8c.html</filename>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__colortable_8h" name="igtl_colortable.h" local="yes" import="no" module="no" objc="no">igtl_colortable.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_colortable_convert_byte_order</name>
      <anchorfile>igtl__colortable_8c.html</anchorfile>
      <anchor>a7a73f2bbd13d45b6606632e9ef12d235</anchor>
      <arglist>(igtl_colortable_header *header, void *table)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_colortable_get_crc</name>
      <anchorfile>igtl__colortable_8c.html</anchorfile>
      <anchor>aec5da68e6bf9c47eb3166564cd43cf49</anchor>
      <arglist>(igtl_colortable_header *header, void *table)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_colortable_get_table_size</name>
      <anchorfile>igtl__colortable_8c.html</anchorfile>
      <anchor>a2005c937e561a265da3629691f68c8ff</anchor>
      <arglist>(igtl_colortable_header *header)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_colortable.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__colortable_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_colortable_header</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_COLORTABLE_HEADER_SIZE</name>
      <anchorfile>igtl__colortable_8h.html</anchorfile>
      <anchor>ab72fef0c25f71a66d1fe3ccc0daeec88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_COLORTABLE_INDEX_UINT16</name>
      <anchorfile>igtl__colortable_8h.html</anchorfile>
      <anchor>aec9ac8a4e852ca391ff4f7b242341ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_COLORTABLE_INDEX_UINT8</name>
      <anchorfile>igtl__colortable_8h.html</anchorfile>
      <anchor>a3833f13cf7db1bfe2fb375849cf4441b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_COLORTABLE_MAP_RGB</name>
      <anchorfile>igtl__colortable_8h.html</anchorfile>
      <anchor>add9a01f8c4617f2b45c17fdb2a6cf88d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_COLORTABLE_MAP_UINT16</name>
      <anchorfile>igtl__colortable_8h.html</anchorfile>
      <anchor>ac761aa3044b8be9db734358e658041ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_COLORTABLE_MAP_UINT8</name>
      <anchorfile>igtl__colortable_8h.html</anchorfile>
      <anchor>a7e57816359b691d1b4c0bf2ed9b8ea69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_colortable_convert_byte_order</name>
      <anchorfile>igtl__colortable_8h.html</anchorfile>
      <anchor>a7a73f2bbd13d45b6606632e9ef12d235</anchor>
      <arglist>(igtl_colortable_header *header, void *table)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_colortable_get_crc</name>
      <anchorfile>igtl__colortable_8h.html</anchorfile>
      <anchor>aec5da68e6bf9c47eb3166564cd43cf49</anchor>
      <arglist>(igtl_colortable_header *header, void *table)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_colortable_get_table_size</name>
      <anchorfile>igtl__colortable_8h.html</anchorfile>
      <anchor>a2005c937e561a265da3629691f68c8ff</anchor>
      <arglist>(igtl_colortable_header *header)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_command.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__command_8c.html</filename>
    <includes id="igtl__command_8h" name="igtl_command.h" local="yes" import="no" module="no" objc="no">igtl_command.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_command_convert_byte_order</name>
      <anchorfile>igtl__command_8c.html</anchorfile>
      <anchor>a6d60d403a5436d5b42125c7140c39942</anchor>
      <arglist>(igtl_command_header *header)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_command_get_crc</name>
      <anchorfile>igtl__command_8c.html</anchorfile>
      <anchor>ac00a9b12833fd9af70c8e72dd42ef326</anchor>
      <arglist>(igtl_command_header *header, void *command)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_command.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__command_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_command_header</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_COMMAND_HEADER_SIZE</name>
      <anchorfile>igtl__command_8h.html</anchorfile>
      <anchor>a4c6bc3de1c4a62c18c41dbd1a85e291c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_COMMAND_NAME_SIZE</name>
      <anchorfile>igtl__command_8h.html</anchorfile>
      <anchor>a9fac19511b5d27c92ad373e3408a73e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_command_convert_byte_order</name>
      <anchorfile>igtl__command_8h.html</anchorfile>
      <anchor>a6d60d403a5436d5b42125c7140c39942</anchor>
      <arglist>(igtl_command_header *header)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_command_get_crc</name>
      <anchorfile>igtl__command_8h.html</anchorfile>
      <anchor>ac00a9b12833fd9af70c8e72dd42ef326</anchor>
      <arglist>(igtl_command_header *header, void *command)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_header.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__header_8c.html</filename>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_header_convert_byte_order</name>
      <anchorfile>igtl__header_8c.html</anchorfile>
      <anchor>a0d39ebff32af3ba98389f16ed391c229</anchor>
      <arglist>(igtl_header *header)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_header.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__header_8h.html</filename>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <class kind="struct">igtl_header</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_EXTENDED_HEADER_SIZE</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>a68f9bcebae0284eadf03770e3fd342b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_HEADER_DEVSIZE</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>a219ec2900803558352654bf9fe8c5f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_HEADER_NAME_SIZE</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>aa5811970b99b9e8142fde036408dce0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_HEADER_NAMESIZE</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>aa459271f562d839245527bc585a6edbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_HEADER_SIZE</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>a62bc5b45d5e95b07efbd5ac6017d5851</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_HEADER_TYPE_SIZE</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>a0b0d2b7ac87b843ebb801dde0bc72d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_HEADER_TYPESIZE</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>a1070fc8dc4e5f93e8d50fd7756700a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_HEADER_VERSION_1</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>afa4bf6a51f4dc9194f4b61349ef3b791</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_HEADER_VERSION_2</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>a8fd49864b60a4b7ee805ef2307b7681c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NUM_TYPE_PREFIX</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>a177349f154fdd365dfe681f084d0e719</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TYPE_PREFIX_GET</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>a3e547771d425a8c60ab785c86cea3b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TYPE_PREFIX_NONE</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>af06a0869a215d4bf9ce9bb330d5204ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TYPE_PREFIX_RTS</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>a15f5f5b27a7fd4c529e9e8348b28f735</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TYPE_PREFIX_STP</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>a1168a279231b11ac20cf67fec84cff2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TYPE_PREFIX_STT</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>a46aa0d92241d558f54dfa72ac5a62568</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_header_convert_byte_order</name>
      <anchorfile>igtl__header_8h.html</anchorfile>
      <anchor>a0d39ebff32af3ba98389f16ed391c229</anchor>
      <arglist>(igtl_header *header)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_image.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__image_8c.html</filename>
    <includes id="igtl__image_8h" name="igtl_image.h" local="yes" import="no" module="no" objc="no">igtl_image.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_image_convert_byte_order</name>
      <anchorfile>igtl__image_8c.html</anchorfile>
      <anchor>a5edc5e9e3376844a5a52e6dfd536002a</anchor>
      <arglist>(igtl_image_header *header)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_image_get_crc</name>
      <anchorfile>igtl__image_8c.html</anchorfile>
      <anchor>aa4ec6d9c373202e84e9c54b55ea2f7c5</anchor>
      <arglist>(igtl_image_header *header, void *image)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_image_get_data_size</name>
      <anchorfile>igtl__image_8c.html</anchorfile>
      <anchor>a8e861e8584221084c5d8a59948e9ad6f</anchor>
      <arglist>(igtl_image_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_image_get_matrix</name>
      <anchorfile>igtl__image_8c.html</anchorfile>
      <anchor>a94e67cd142a10f1e6dee1479ffe8f8f6</anchor>
      <arglist>(float spacing[3], float origin[3], float norm_i[3], float norm_j[3], float norm_k[3], igtl_image_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_image_get_matrix_4x4</name>
      <anchorfile>igtl__image_8c.html</anchorfile>
      <anchor>ab612e1375475ff686d17a7509cbbfe68</anchor>
      <arglist>(float _matrix[4][4], igtl_image_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_image_set_matrix</name>
      <anchorfile>igtl__image_8c.html</anchorfile>
      <anchor>ab4535bfa473535ed9bbde090bc05ebbe</anchor>
      <arglist>(float spacing[3], float origin[3], float norm_i[3], float norm_j[3], float norm_k[3], igtl_image_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_image_set_matrix_4x4</name>
      <anchorfile>igtl__image_8c.html</anchorfile>
      <anchor>af09f4b981998c088919c900cb2ab8b0c</anchor>
      <arglist>(float _matrix[4][4], igtl_image_header *header)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_image.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__image_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_image_header</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_COORD_LPS</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a93026d5f874a20e98c2ab8a1590927a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_COORD_RAS</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a570f17561520e86d584f829ebeb56486</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_DTYPE_SCALAR</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a4d7a5e8047e667346b5d59946b9f2865</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_DTYPE_VECTOR</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>aacbf99446f336f7a09b446815a0af05d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_ENDIAN_BIG</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>abc820a48b1a0e481a429181fbe870596</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_ENDIAN_LITTLE</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>aa65c80ec7b32059b20034797c847bdfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_HEADER_SIZE</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>ad6be34b2ca2cce4dd84a5756a8f4c9de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_HEADER_VERSION</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a1585700c5b43f85a7ed5e45d8302baea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_STYPE_TYPE_FLOAT32</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a43764ce36c47c8f3bd6d48b1741b35b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_STYPE_TYPE_FLOAT64</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a12cee724fa6631f0c76191f4d62f6556</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_STYPE_TYPE_INT16</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a55ce41464068bbaea4602842a88f1067</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_STYPE_TYPE_INT32</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>acebdc2bc191e0e783ea04051311a59a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_STYPE_TYPE_INT8</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a890390f749a38cbd0a39f47c20038203</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_STYPE_TYPE_UINT16</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a5d364610bbeaeaa9f3acd10154b389ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_STYPE_TYPE_UINT32</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a73e19fa60f2c2d62deb1c59d3e55e5c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMAGE_STYPE_TYPE_UINT8</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>aabbf2ab59fe7e74ad2d0e87f37bf5fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_image_convert_byte_order</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a5edc5e9e3376844a5a52e6dfd536002a</anchor>
      <arglist>(igtl_image_header *header)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_image_get_crc</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>aa4ec6d9c373202e84e9c54b55ea2f7c5</anchor>
      <arglist>(igtl_image_header *header, void *image)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_image_get_data_size</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a8e861e8584221084c5d8a59948e9ad6f</anchor>
      <arglist>(igtl_image_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_image_get_matrix</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>a94e67cd142a10f1e6dee1479ffe8f8f6</anchor>
      <arglist>(float spacing[3], float origin[3], float norm_i[3], float norm_j[3], float norm_k[3], igtl_image_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_image_get_matrix_4x4</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>ab612e1375475ff686d17a7509cbbfe68</anchor>
      <arglist>(float _matrix[4][4], igtl_image_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_image_set_matrix</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>ab4535bfa473535ed9bbde090bc05ebbe</anchor>
      <arglist>(float spacing[3], float origin[3], float norm_i[3], float norm_j[3], float norm_k[3], igtl_image_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_image_set_matrix_4x4</name>
      <anchorfile>igtl__image_8h.html</anchorfile>
      <anchor>af09f4b981998c088919c900cb2ab8b0c</anchor>
      <arglist>(float _matrix[4][4], igtl_image_header *header)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_imgmeta.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__imgmeta_8c.html</filename>
    <includes id="igtl__imgmeta_8h" name="igtl_imgmeta.h" local="yes" import="no" module="no" objc="no">igtl_imgmeta.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_imgmeta_convert_byte_order</name>
      <anchorfile>igtl__imgmeta_8c.html</anchorfile>
      <anchor>aba29628f67d9dd6c5cea8494db0f24ee</anchor>
      <arglist>(igtl_imgmeta_element *metalist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_imgmeta_get_crc</name>
      <anchorfile>igtl__imgmeta_8c.html</anchorfile>
      <anchor>aefa1e28d110be6bf69035a97fc0889e4</anchor>
      <arglist>(igtl_imgmeta_element *metalist, int nitem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_imgmeta.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__imgmeta_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <includes id="igtl__image_8h" name="igtl_image.h" local="yes" import="no" module="no" objc="no">igtl_image.h</includes>
    <class kind="struct">igtl_imgmeta_element</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMGMETA_ELEMENT_SIZE</name>
      <anchorfile>igtl__imgmeta_8h.html</anchorfile>
      <anchor>a8717a65aea51f236b78411c93d21e5dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_imgmeta_get_data_n</name>
      <anchorfile>igtl__imgmeta_8h.html</anchorfile>
      <anchor>aee2fcea1fcbb349e1b6e188403b621f2</anchor>
      <arglist>(size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_imgmeta_get_data_size</name>
      <anchorfile>igtl__imgmeta_8h.html</anchorfile>
      <anchor>aa4bcaeb8f9d3642c9aec1ad70112a551</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMGMETA_LEN_DEVICE_NAME</name>
      <anchorfile>igtl__imgmeta_8h.html</anchorfile>
      <anchor>a04418a1c13df59e257a7ff227cc86639</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMGMETA_LEN_MODALITY</name>
      <anchorfile>igtl__imgmeta_8h.html</anchorfile>
      <anchor>a9c13b0cc08ea2a3d4edb79a4c916c004</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMGMETA_LEN_NAME</name>
      <anchorfile>igtl__imgmeta_8h.html</anchorfile>
      <anchor>a9e0351373401aec6bee5599490386316</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMGMETA_LEN_PATIENT_ID</name>
      <anchorfile>igtl__imgmeta_8h.html</anchorfile>
      <anchor>a8207e0d83bbcaba1334258422d185a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_IMGMETA_LEN_PATIENT_NAME</name>
      <anchorfile>igtl__imgmeta_8h.html</anchorfile>
      <anchor>ac8c64d269e3e1a113c9fca587ed47e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_imgmeta_convert_byte_order</name>
      <anchorfile>igtl__imgmeta_8h.html</anchorfile>
      <anchor>aba29628f67d9dd6c5cea8494db0f24ee</anchor>
      <arglist>(igtl_imgmeta_element *metalist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_imgmeta_get_crc</name>
      <anchorfile>igtl__imgmeta_8h.html</anchorfile>
      <anchor>aefa1e28d110be6bf69035a97fc0889e4</anchor>
      <arglist>(igtl_imgmeta_element *metalist, int nitem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_lbmeta.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__lbmeta_8c.html</filename>
    <includes id="igtl__lbmeta_8h" name="igtl_lbmeta.h" local="yes" import="no" module="no" objc="no">igtl_lbmeta.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_lbmeta_convert_byte_order</name>
      <anchorfile>igtl__lbmeta_8c.html</anchorfile>
      <anchor>a9d2adef1f41f7dcaec215c1a38341f33</anchor>
      <arglist>(igtl_lbmeta_element *metalist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_lbmeta_get_crc</name>
      <anchorfile>igtl__lbmeta_8c.html</anchorfile>
      <anchor>adbe3fa8a355d0108ac24d5f321e08761</anchor>
      <arglist>(igtl_lbmeta_element *metalist, int nitem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_lbmeta.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__lbmeta_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_lbmeta_element</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_LBMETA_ELEMENT_SIZE</name>
      <anchorfile>igtl__lbmeta_8h.html</anchorfile>
      <anchor>a78515ef31820c384ba543c46ba4f92f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_lbmeta_get_data_n</name>
      <anchorfile>igtl__lbmeta_8h.html</anchorfile>
      <anchor>a3bbaca4761eb50b2e65dc22c02f61cd0</anchor>
      <arglist>(size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_lbmeta_get_data_size</name>
      <anchorfile>igtl__lbmeta_8h.html</anchorfile>
      <anchor>a7ee10a10401c12e8645774894e395349</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_LBMETA_LEN_DEVICE_NAME</name>
      <anchorfile>igtl__lbmeta_8h.html</anchorfile>
      <anchor>a4af8e19020f286cb01e70fb078eede78</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_LBMETA_LEN_NAME</name>
      <anchorfile>igtl__lbmeta_8h.html</anchorfile>
      <anchor>a17433b03c7d85dda05e663323e519706</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_LBMETA_LEN_OWNER</name>
      <anchorfile>igtl__lbmeta_8h.html</anchorfile>
      <anchor>a5d8ad694a6f8dedf6ba30f832bf590ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_lbmeta_convert_byte_order</name>
      <anchorfile>igtl__lbmeta_8h.html</anchorfile>
      <anchor>a9d2adef1f41f7dcaec215c1a38341f33</anchor>
      <arglist>(igtl_lbmeta_element *metalist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_lbmeta_get_crc</name>
      <anchorfile>igtl__lbmeta_8h.html</anchorfile>
      <anchor>adbe3fa8a355d0108ac24d5f321e08761</anchor>
      <arglist>(igtl_lbmeta_element *metalist, int nitem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_ndarray.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__ndarray_8c.html</filename>
    <includes id="igtl__ndarray_8h" name="igtl_ndarray.h" local="yes" import="no" module="no" objc="no">igtl_ndarray.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_ndarray_alloc_info</name>
      <anchorfile>igtl__ndarray_8c.html</anchorfile>
      <anchor>ae2f3d0c50a72599f609beaeffedbcee9</anchor>
      <arglist>(igtl_ndarray_info *info, const igtl_uint16 *size)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_ndarray_free_info</name>
      <anchorfile>igtl__ndarray_8c.html</anchorfile>
      <anchor>adb17e92a5d95945c27305cbeddef7fd8</anchor>
      <arglist>(igtl_ndarray_info *info)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_ndarray_get_crc</name>
      <anchorfile>igtl__ndarray_8c.html</anchorfile>
      <anchor>a30166839698419dc43fc60a237e3924c</anchor>
      <arglist>(igtl_ndarray_info *info, int type, void *data)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32</type>
      <name>igtl_ndarray_get_nbyte</name>
      <anchorfile>igtl__ndarray_8c.html</anchorfile>
      <anchor>a7128acb8e726e467976af558a9f4d082</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_ndarray_get_size</name>
      <anchorfile>igtl__ndarray_8c.html</anchorfile>
      <anchor>a0b7154fbd3197ba71f3e4ebc1fbf4bc2</anchor>
      <arglist>(igtl_ndarray_info *info, int type)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_ndarray_init_info</name>
      <anchorfile>igtl__ndarray_8c.html</anchorfile>
      <anchor>a5e32c74ffde65c595a3ce1bb0d086597</anchor>
      <arglist>(igtl_ndarray_info *info)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_ndarray_pack</name>
      <anchorfile>igtl__ndarray_8c.html</anchorfile>
      <anchor>acef5ce2497e1a5e0eedaa12cc32047ec</anchor>
      <arglist>(igtl_ndarray_info *info, void *byte_array, int type)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_ndarray_unpack</name>
      <anchorfile>igtl__ndarray_8c.html</anchorfile>
      <anchor>a40b4ec228ef7fece38715aabd5ea058d</anchor>
      <arglist>(int type, void *byte_array, igtl_ndarray_info *info, igtl_uint64 pack_size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_ndarray.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__ndarray_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_ndarray_info</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NDARRAY_HEADER_SIZE</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>a04fa69d80d10436fdd17971a75804f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NDARRAY_HOST_TO_NETWORK</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>ab7d0d8e4f6358a08d731a9edce6d8e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NDARRAY_NETWORK_TO_HOST</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>a8f029003b2f6d798ae246decdf78ad0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NDARRAY_STYPE_TYPE_COMPLEX</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>a0a5e3b3e0e704492193f9acc75555e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NDARRAY_STYPE_TYPE_FLOAT32</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>a96f654d35ebe8522b85e215a12447693</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NDARRAY_STYPE_TYPE_FLOAT64</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>aae61f18912eba0c3bb9942737d1bade2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NDARRAY_STYPE_TYPE_INT16</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>a39a38f28dc64ca65058026cf4fa7e940</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NDARRAY_STYPE_TYPE_INT32</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>ad4896665dc2b0afdd9f66c1b035b01a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NDARRAY_STYPE_TYPE_INT8</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>a295bff13f4604cc806d8fd8edc631399</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NDARRAY_STYPE_TYPE_UINT16</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>acd5cc335da5f18a2041c4f9c53e0a978</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NDARRAY_STYPE_TYPE_UINT32</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>a24c9b2cafb9a65b8ad6530cbe96a41bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_NDARRAY_STYPE_TYPE_UINT8</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>abe2c95c9c9367c00b0a9d1989736b224</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_ndarray_alloc_info</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>ae2f3d0c50a72599f609beaeffedbcee9</anchor>
      <arglist>(igtl_ndarray_info *info, const igtl_uint16 *size)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_ndarray_free_info</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>adb17e92a5d95945c27305cbeddef7fd8</anchor>
      <arglist>(igtl_ndarray_info *info)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_ndarray_get_crc</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>a93ab750783c7737d994c09f913437c03</anchor>
      <arglist>(igtl_ndarray_info *info, int type, void *byte_array)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_ndarray_get_size</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>a0b7154fbd3197ba71f3e4ebc1fbf4bc2</anchor>
      <arglist>(igtl_ndarray_info *info, int type)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_ndarray_init_info</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>a5e32c74ffde65c595a3ce1bb0d086597</anchor>
      <arglist>(igtl_ndarray_info *info)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_ndarray_pack</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>acef5ce2497e1a5e0eedaa12cc32047ec</anchor>
      <arglist>(igtl_ndarray_info *info, void *byte_array, int type)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_ndarray_unpack</name>
      <anchorfile>igtl__ndarray_8h.html</anchorfile>
      <anchor>a40b4ec228ef7fece38715aabd5ea058d</anchor>
      <arglist>(int type, void *byte_array, igtl_ndarray_info *info, igtl_uint64 pack_size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_point.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__point_8c.html</filename>
    <includes id="igtl__point_8h" name="igtl_point.h" local="yes" import="no" module="no" objc="no">igtl_point.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_point_convert_byte_order</name>
      <anchorfile>igtl__point_8c.html</anchorfile>
      <anchor>a9b06e8437823bd2767e09f9890b3804d</anchor>
      <arglist>(igtl_point_element *pointlist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_point_get_crc</name>
      <anchorfile>igtl__point_8c.html</anchorfile>
      <anchor>abdc8c7183c9d4ebd47cac6505b798d22</anchor>
      <arglist>(igtl_point_element *pointlist, int nitem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_point.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__point_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_point_element</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POINT_ELEMENT_SIZE</name>
      <anchorfile>igtl__point_8h.html</anchorfile>
      <anchor>a0acf4f8a6ea849e0c1003691fa8411be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_point_get_data_n</name>
      <anchorfile>igtl__point_8h.html</anchorfile>
      <anchor>aaea613e48aac4eb6e94bee55e17079e9</anchor>
      <arglist>(size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_point_get_data_size</name>
      <anchorfile>igtl__point_8h.html</anchorfile>
      <anchor>a11aac9e0c5f68392ca8ab9c999d8e9dd</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POINT_LEN_GROUP_NAME</name>
      <anchorfile>igtl__point_8h.html</anchorfile>
      <anchor>a1487f752a36acfcb7a63a878c5a036f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POINT_LEN_NAME</name>
      <anchorfile>igtl__point_8h.html</anchorfile>
      <anchor>a31f388a2316d7fcc89bd68439a81084c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POINT_LEN_OWNER</name>
      <anchorfile>igtl__point_8h.html</anchorfile>
      <anchor>a6cf2a6572db59c3d94bf7fafdae5a503</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_point_convert_byte_order</name>
      <anchorfile>igtl__point_8h.html</anchorfile>
      <anchor>a8d6c7c8320b76533d4ca13bf95f70345</anchor>
      <arglist>(igtl_point_element *pointlist, int nelem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_point_get_crc</name>
      <anchorfile>igtl__point_8h.html</anchorfile>
      <anchor>a61906e4b91a3a7710d9fe1b1d1355a3c</anchor>
      <arglist>(igtl_point_element *pointlist, int nelem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_polydata.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__polydata_8c.html</filename>
    <includes id="igtl__polydata_8h" name="igtl_polydata.h" local="yes" import="no" module="no" objc="no">igtl_polydata.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_polydata_alloc_info</name>
      <anchorfile>igtl__polydata_8c.html</anchorfile>
      <anchor>a1a13591c39f343244c27ffc4f39c8263</anchor>
      <arglist>(igtl_polydata_info *info)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>igtl_polydata_convert_byteorder_topology</name>
      <anchorfile>igtl__polydata_8c.html</anchorfile>
      <anchor>a9e49ec7bb8bad692cfce36335e687efd</anchor>
      <arglist>(igtl_uint32 *dst, igtl_uint32 *src, igtl_uint32 size)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_polydata_free_info</name>
      <anchorfile>igtl__polydata_8c.html</anchorfile>
      <anchor>aea67b0fee8f6a4b2e5e4b712ea9d1ac7</anchor>
      <arglist>(igtl_polydata_info *info)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_polydata_get_crc</name>
      <anchorfile>igtl__polydata_8c.html</anchorfile>
      <anchor>a430116678eedcf3990b3192a2d6a8982</anchor>
      <arglist>(igtl_polydata_info *info, int type, void *polydata_message)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_polydata_get_size</name>
      <anchorfile>igtl__polydata_8c.html</anchorfile>
      <anchor>a89b3ccc4f79be852a150a319914565f1</anchor>
      <arglist>(igtl_polydata_info *info, int type)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_polydata_init_info</name>
      <anchorfile>igtl__polydata_8c.html</anchorfile>
      <anchor>a8dea27d48311fbcb21a1489919731e90</anchor>
      <arglist>(igtl_polydata_info *info)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_polydata_pack</name>
      <anchorfile>igtl__polydata_8c.html</anchorfile>
      <anchor>aad15aa4df6ab7cd1a58638dc56493c5e</anchor>
      <arglist>(igtl_polydata_info *info, void *byte_array, int type)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_polydata_unpack</name>
      <anchorfile>igtl__polydata_8c.html</anchorfile>
      <anchor>ae68c0dbcc40b6915183bd0f66ec9dc7a</anchor>
      <arglist>(int type, void *byte_array, igtl_polydata_info *info, igtl_uint64 size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_polydata.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__polydata_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_polydata_attribute</class>
    <class kind="struct">igtl_polydata_attribute_header</class>
    <class kind="struct">igtl_polydata_header</class>
    <class kind="struct">igtl_polydata_info</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POLY_ATTR_TYPE_NORMAL</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>aab5fdbb6cca649e8be1b4eeda27f08be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POLY_ATTR_TYPE_RGBA</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>a34aab1c5d19718b5b84786e03499b3b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POLY_ATTR_TYPE_SCALAR</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>a5e19e5d6849cf66c141f1bb74aaf59f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POLY_ATTR_TYPE_TCOORDS</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>a935e2eeb44fce2b216ce67e89f330012</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POLY_ATTR_TYPE_TENSOR</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>a961c05a83898cd38b14cdcd5fd6ba4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POLY_ATTR_TYPE_VECTOR</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>a4cfa7e502836b460a4cbfe7ff8e6d3c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POLY_MAX_ATTR_NAME_LEN</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>a3544265dbfc0e8ea07060241736c9918</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_polydata_alloc_info</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>a1a13591c39f343244c27ffc4f39c8263</anchor>
      <arglist>(igtl_polydata_info *info)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_polydata_free_info</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>aea67b0fee8f6a4b2e5e4b712ea9d1ac7</anchor>
      <arglist>(igtl_polydata_info *info)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_polydata_get_crc</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>a430116678eedcf3990b3192a2d6a8982</anchor>
      <arglist>(igtl_polydata_info *info, int type, void *polydata_message)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_polydata_get_size</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>a89b3ccc4f79be852a150a319914565f1</anchor>
      <arglist>(igtl_polydata_info *info, int type)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_polydata_init_info</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>a8dea27d48311fbcb21a1489919731e90</anchor>
      <arglist>(igtl_polydata_info *info)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_polydata_pack</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>aad15aa4df6ab7cd1a58638dc56493c5e</anchor>
      <arglist>(igtl_polydata_info *info, void *byte_array, int type)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_polydata_unpack</name>
      <anchorfile>igtl__polydata_8h.html</anchorfile>
      <anchor>ae68c0dbcc40b6915183bd0f66ec9dc7a</anchor>
      <arglist>(int type, void *byte_array, igtl_polydata_info *info, igtl_uint64 size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_position.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__position_8c.html</filename>
    <includes id="igtl__position_8h" name="igtl_position.h" local="yes" import="no" module="no" objc="no">igtl_position.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_position_convert_byte_order</name>
      <anchorfile>igtl__position_8c.html</anchorfile>
      <anchor>a0f5378317facad4ba5d45ea8ae33addb</anchor>
      <arglist>(igtl_position *pos)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_position_convert_byte_order_position_only</name>
      <anchorfile>igtl__position_8c.html</anchorfile>
      <anchor>a29fff93e2b6a50e50655d1fbb6e5b7e2</anchor>
      <arglist>(igtl_position *pos)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_position_convert_byte_order_quaternion3</name>
      <anchorfile>igtl__position_8c.html</anchorfile>
      <anchor>a9b7d31e5adbd76228f213864342ae418</anchor>
      <arglist>(igtl_position *pos)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_position_get_crc</name>
      <anchorfile>igtl__position_8c.html</anchorfile>
      <anchor>a364d92ca8031eb69b2f1d772eb8d44fe</anchor>
      <arglist>(igtl_position *pos)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_position.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__position_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_position</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POSITION_MESSAGE_DEFAULT_SIZE</name>
      <anchorfile>igtl__position_8h.html</anchorfile>
      <anchor>a8944d6083a755e55d1bfc9694fdcf93f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POSITION_MESSAGE_POSITON_ONLY_SIZE</name>
      <anchorfile>igtl__position_8h.html</anchorfile>
      <anchor>af61508cb70f77baefdfe0520a0214f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_POSITION_MESSAGE_WITH_QUATERNION3_SIZE</name>
      <anchorfile>igtl__position_8h.html</anchorfile>
      <anchor>aca479e59e0d733346b3284dde0c22025</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_position_convert_byte_order</name>
      <anchorfile>igtl__position_8h.html</anchorfile>
      <anchor>a0f5378317facad4ba5d45ea8ae33addb</anchor>
      <arglist>(igtl_position *pos)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_position_convert_byte_order_position_only</name>
      <anchorfile>igtl__position_8h.html</anchorfile>
      <anchor>a29fff93e2b6a50e50655d1fbb6e5b7e2</anchor>
      <arglist>(igtl_position *pos)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_position_convert_byte_order_quaternion3</name>
      <anchorfile>igtl__position_8h.html</anchorfile>
      <anchor>a9b7d31e5adbd76228f213864342ae418</anchor>
      <arglist>(igtl_position *pos)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_position_get_crc</name>
      <anchorfile>igtl__position_8h.html</anchorfile>
      <anchor>a364d92ca8031eb69b2f1d772eb8d44fe</anchor>
      <arglist>(igtl_position *pos)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_qtdata.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__qtdata_8c.html</filename>
    <includes id="igtl__qtdata_8h" name="igtl_qtdata.h" local="yes" import="no" module="no" objc="no">igtl_qtdata.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_qtdata_convert_byte_order</name>
      <anchorfile>igtl__qtdata_8c.html</anchorfile>
      <anchor>a27cb8a3fd46c1db190b915a04e49c157</anchor>
      <arglist>(igtl_qtdata_element *qtdatalist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_qtdata_get_crc</name>
      <anchorfile>igtl__qtdata_8c.html</anchorfile>
      <anchor>aa29e042136ec1926d0c81c4ce8349f5a</anchor>
      <arglist>(igtl_qtdata_element *qtdatalist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_rts_qtdata_convert_byte_order</name>
      <anchorfile>igtl__qtdata_8c.html</anchorfile>
      <anchor>a44a61fef6f6079b6b8e75d69f8ddbcb2</anchor>
      <arglist>(igtl_rts_qtdata *rts_qtdata)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_rts_qtdata_get_crc</name>
      <anchorfile>igtl__qtdata_8c.html</anchorfile>
      <anchor>a4add860cc3c813ef27494e19d0665057</anchor>
      <arglist>(igtl_rts_qtdata *rts_qtdata)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_stt_qtdata_convert_byte_order</name>
      <anchorfile>igtl__qtdata_8c.html</anchorfile>
      <anchor>a8e2a83d3ed6d8b3b174f319d4e8f51e0</anchor>
      <arglist>(igtl_stt_qtdata *stt_qtdata)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_stt_qtdata_get_crc</name>
      <anchorfile>igtl__qtdata_8c.html</anchorfile>
      <anchor>af6364d8105ec10b65950fa681ab4278a</anchor>
      <arglist>(igtl_stt_qtdata *stt_qtdata)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_qtdata.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__qtdata_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_qtdata_element</class>
    <class kind="struct">igtl_rts_qtdata</class>
    <class kind="struct">igtl_stt_qtdata</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_QTDATA_ELEMENT_SIZE</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>a137b21c17545954afbf8374f905c8256</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_qtdata_get_data_n</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>a39a70bd2481fc2eecf0d196c9648e173</anchor>
      <arglist>(size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_qtdata_get_data_size</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>a1df8f1f31b782d4b382ecf356c85706f</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_QTDATA_LEN_NAME</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>aa1ca96be566f38eb4c848880df5beb6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_QTDATA_TYPE_3D</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>a4af91a46bbec64ab38da3487822af088</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_QTDATA_TYPE_5D</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>aa6f8c9e86e942f6eaa28ed955340d309</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_QTDATA_TYPE_6D</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>aa5986922ef9a30b5ebcb00c9fa324320</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_QTDATA_TYPE_TRACKER</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>a29f147a1adfc04fc740fc58278500f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_RTS_QTDATA_SIZE</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>aab678789f76e08e5b4f6df167983ac31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STT_QTDATA_LEN_COORDNAME</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>a06577e1e8e2d628b7e93baf85e8311e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STT_QTDATA_SIZE</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>a3b57532260cd0574e99d92cd300004e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_qtdata_convert_byte_order</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>a2c638aef2734cb99a50339cc0beca90b</anchor>
      <arglist>(igtl_qtdata_element *qtdatalist, int nelem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_qtdata_get_crc</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>a67efe13ea1028b38df2699b3a76908ce</anchor>
      <arglist>(igtl_qtdata_element *qtdatalist, int nelem)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_rts_qtdata_convert_byte_order</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>a44a61fef6f6079b6b8e75d69f8ddbcb2</anchor>
      <arglist>(igtl_rts_qtdata *rts_qtdata)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_rts_qtdata_get_crc</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>a4add860cc3c813ef27494e19d0665057</anchor>
      <arglist>(igtl_rts_qtdata *rts_qtdata)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_stt_qtdata_convert_byte_order</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>a8e2a83d3ed6d8b3b174f319d4e8f51e0</anchor>
      <arglist>(igtl_stt_qtdata *stt_qtdata)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_stt_qtdata_get_crc</name>
      <anchorfile>igtl__qtdata_8h.html</anchorfile>
      <anchor>af6364d8105ec10b65950fa681ab4278a</anchor>
      <arglist>(igtl_stt_qtdata *stt_qtdata)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_qtrans.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__qtrans_8c.html</filename>
    <includes id="igtl__qtrans_8h" name="igtl_qtrans.h" local="yes" import="no" module="no" objc="no">igtl_qtrans.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_qtrans_convert_byte_order</name>
      <anchorfile>igtl__qtrans_8c.html</anchorfile>
      <anchor>a02713c59be3a9edb3bb03b276f5874fe</anchor>
      <arglist>(igtl_qtrans *pos)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_qtrans_get_crc</name>
      <anchorfile>igtl__qtrans_8c.html</anchorfile>
      <anchor>a3f15a544c2f3e87715938747a07b5fb0</anchor>
      <arglist>(igtl_qtrans *pos)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_qtrans.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__qtrans_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_qtrans</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_QTRANS_MESSAGE_DEFAULT_SIZE</name>
      <anchorfile>igtl__qtrans_8h.html</anchorfile>
      <anchor>a4aeb315f6ac7334e481b7a7b3ba77a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_QTRANS_MESSAGE_POSITON_ONLY_SIZE</name>
      <anchorfile>igtl__qtrans_8h.html</anchorfile>
      <anchor>acc650ec426ffce24c3ea9cf3b58a8acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_QTRANS_MESSAGE_WITH_QUATERNION3_SIZE</name>
      <anchorfile>igtl__qtrans_8h.html</anchorfile>
      <anchor>ab3ab3908e4d6fc4c5734f7e8a29043b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_qtrans_convert_byte_order</name>
      <anchorfile>igtl__qtrans_8h.html</anchorfile>
      <anchor>a02713c59be3a9edb3bb03b276f5874fe</anchor>
      <arglist>(igtl_qtrans *pos)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_qtrans_get_crc</name>
      <anchorfile>igtl__qtrans_8h.html</anchorfile>
      <anchor>a3f15a544c2f3e87715938747a07b5fb0</anchor>
      <arglist>(igtl_qtrans *pos)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_query.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__query_8c.html</filename>
    <includes id="igtl__query_8h" name="igtl_query.h" local="yes" import="no" module="no" objc="no">igtl_query.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_query_convert_byte_order</name>
      <anchorfile>igtl__query_8c.html</anchorfile>
      <anchor>a07dc7b7bb999d518cca37c858f9661a7</anchor>
      <arglist>(igtl_query_header *header)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_query_get_crc</name>
      <anchorfile>igtl__query_8c.html</anchorfile>
      <anchor>a176adf31eda1c79e9ff7b228b39fc2a8</anchor>
      <arglist>(igtl_query_header *header, void *query)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_query.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__query_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_query_header</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_QUERY_DATE_TYPE_SIZE</name>
      <anchorfile>igtl__query_8h.html</anchorfile>
      <anchor>aa0bfc3b429130f42c2004fdb02815268</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_QUERY_HEADER_SIZE</name>
      <anchorfile>igtl__query_8h.html</anchorfile>
      <anchor>a739a144d358bb16b222a9118db8b0cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_query_convert_byte_order</name>
      <anchorfile>igtl__query_8h.html</anchorfile>
      <anchor>a07dc7b7bb999d518cca37c858f9661a7</anchor>
      <arglist>(igtl_query_header *header)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_query_get_crc</name>
      <anchorfile>igtl__query_8h.html</anchorfile>
      <anchor>a176adf31eda1c79e9ff7b228b39fc2a8</anchor>
      <arglist>(igtl_query_header *header, void *query)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_sensor.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__sensor_8c.html</filename>
    <includes id="igtl__sensor_8h" name="igtl_sensor.h" local="yes" import="no" module="no" objc="no">igtl_sensor.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_sensor_convert_byte_order</name>
      <anchorfile>igtl__sensor_8c.html</anchorfile>
      <anchor>ae85513c9bae9705153752103ce4555dd</anchor>
      <arglist>(igtl_sensor_header *header, igtl_float64 *data)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_sensor_get_crc</name>
      <anchorfile>igtl__sensor_8c.html</anchorfile>
      <anchor>ac71953ad0d5e2b3d648b3df14ae42d2a</anchor>
      <arglist>(igtl_sensor_header *header, igtl_float64 *data)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32 igtl_export</type>
      <name>igtl_sensor_get_data_size</name>
      <anchorfile>igtl__sensor_8c.html</anchorfile>
      <anchor>ae5ae1f1b797c4a36d51a69330db3fbed</anchor>
      <arglist>(igtl_sensor_header *header)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_sensor.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__sensor_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <includes id="igtl__unit_8h" name="igtl_unit.h" local="yes" import="no" module="no" objc="no">igtl_unit.h</includes>
    <class kind="struct">igtl_sensor_header</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_SENSOR_HEADER_SIZE</name>
      <anchorfile>igtl__sensor_8h.html</anchorfile>
      <anchor>a0d0c9d2817fa693a26de31b13b53687b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_sensor_convert_byte_order</name>
      <anchorfile>igtl__sensor_8h.html</anchorfile>
      <anchor>ae85513c9bae9705153752103ce4555dd</anchor>
      <arglist>(igtl_sensor_header *header, igtl_float64 *data)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_sensor_get_crc</name>
      <anchorfile>igtl__sensor_8h.html</anchorfile>
      <anchor>ac71953ad0d5e2b3d648b3df14ae42d2a</anchor>
      <arglist>(igtl_sensor_header *header, igtl_float64 *data)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32 igtl_export</type>
      <name>igtl_sensor_get_data_size</name>
      <anchorfile>igtl__sensor_8h.html</anchorfile>
      <anchor>ae5ae1f1b797c4a36d51a69330db3fbed</anchor>
      <arglist>(igtl_sensor_header *header)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_status.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__status_8c.html</filename>
    <includes id="igtl__status_8h" name="igtl_status.h" local="yes" import="no" module="no" objc="no">igtl_status.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_status_convert_byte_order</name>
      <anchorfile>igtl__status_8c.html</anchorfile>
      <anchor>af9287a4659cc6cdfa73e4f929d0514ec</anchor>
      <arglist>(igtl_status_header *status)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_status_get_crc</name>
      <anchorfile>igtl__status_8c.html</anchorfile>
      <anchor>a503dbf345e6f423410769d721c9eb06d</anchor>
      <arglist>(igtl_status_header *status, igtl_uint32 msglen, const char *msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_status.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__status_8h.html</filename>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_status_header</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_ACCESS_DENIED</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a47e3023fece59680de2125349982eb23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_BUSY</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>ada4b7211343aae03c621247cb01a6004</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_CHECKSUM_ERROR</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a0a2d1d74c7389d5a8bb34e71b75ea9b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_CONFIG_ERROR</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a5b2348d78694660f39db4a59766af4c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_DISABLED</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>ae1d40a7907be5e317f2d8793fee21e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_ERROR_NAME_LENGTH</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a272e8524b2c457551f1950e42eff5cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_HARDWARE_FAILURE</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a4a9d071696d1f3a0bd5a436de4273fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_HEADER_SIZE</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>ae0a75f8caf9e0c1a923f621293d025a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_ILLEGAL_INSTRUCTION</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a6e76d159ceb8b10edcf6b96e1e9f6083</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_INVALID</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a364950175a91c3f0275f4108e783b1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_MANUAL_MODE</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a7a0bd419531b58b5ffaae3d64d8410a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_NOT_FOUND</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>ab9fe6ec39d0db01844142264321a78d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_NOT_PRESENT</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>aa0e0776db8ddc2e31e2050fcb0fd8d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_NOT_READY</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>ab980568a1f2ecfbb60ce2dc5e431bf2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_OK</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a8eb04128aa205626eff537b50046eb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_OVERFLOW</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>ae72b7dbe70c3d37caa091f48a57ab27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_PANICK_MODE</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a1a6573ce1070b96ba4d08798fe67e023</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_RESOURCE_ERROR</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a454f6b00058cb864e2341a71cb5b39f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_SHUT_DOWN</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a47c9efc9bd7c8c662fdac2cc8330dabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_TIME_OUT</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a85cceaca327409ecb1966a180069f99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_UNKNOWN_ERROR</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a5cc39fa8f7797db281d386b15a28fabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STATUS_UNKNOWN_VERSION</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a171def9395a17487851d351c7b219409</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_status_convert_byte_order</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>af9287a4659cc6cdfa73e4f929d0514ec</anchor>
      <arglist>(igtl_status_header *status)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_status_get_crc</name>
      <anchorfile>igtl__status_8h.html</anchorfile>
      <anchor>a503dbf345e6f423410769d721c9eb06d</anchor>
      <arglist>(igtl_status_header *status, igtl_uint32 msglen, const char *msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_string.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__string_8c.html</filename>
    <includes id="igtl__string_8h" name="igtl_string.h" local="yes" import="no" module="no" objc="no">igtl_string.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_string_convert_byte_order</name>
      <anchorfile>igtl__string_8c.html</anchorfile>
      <anchor>a8b2845f8ca48d23773db2558d8ba6580</anchor>
      <arglist>(igtl_string_header *header)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_string_get_crc</name>
      <anchorfile>igtl__string_8c.html</anchorfile>
      <anchor>ab444181906f45e482d278365c4d86e8d</anchor>
      <arglist>(igtl_string_header *header, void *string)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32 igtl_export</type>
      <name>igtl_string_get_string_length</name>
      <anchorfile>igtl__string_8c.html</anchorfile>
      <anchor>a24217b04644981e0b244f96c7507b30e</anchor>
      <arglist>(igtl_string_header *header)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_string.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__string_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_string_header</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STRING_HEADER_SIZE</name>
      <anchorfile>igtl__string_8h.html</anchorfile>
      <anchor>afcb4e810bc2e53100fea4a2d6b72f80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_string_convert_byte_order</name>
      <anchorfile>igtl__string_8h.html</anchorfile>
      <anchor>a8b2845f8ca48d23773db2558d8ba6580</anchor>
      <arglist>(igtl_string_header *header)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_string_get_crc</name>
      <anchorfile>igtl__string_8h.html</anchorfile>
      <anchor>ab444181906f45e482d278365c4d86e8d</anchor>
      <arglist>(igtl_string_header *header, void *string)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32 igtl_export</type>
      <name>igtl_string_get_string_length</name>
      <anchorfile>igtl__string_8h.html</anchorfile>
      <anchor>a24217b04644981e0b244f96c7507b30e</anchor>
      <arglist>(igtl_string_header *header)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_tdata.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__tdata_8c.html</filename>
    <includes id="igtl__tdata_8h" name="igtl_tdata.h" local="yes" import="no" module="no" objc="no">igtl_tdata.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_rts_tdata_convert_byte_order</name>
      <anchorfile>igtl__tdata_8c.html</anchorfile>
      <anchor>a70186660ed92c5fbe9666342d55f3b55</anchor>
      <arglist>(igtl_rts_tdata *rts_tdata)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_rts_tdata_get_crc</name>
      <anchorfile>igtl__tdata_8c.html</anchorfile>
      <anchor>a7e11ea099f46d5ff387e0eeb33c1fe97</anchor>
      <arglist>(igtl_rts_tdata *rts_tdata)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_stt_tdata_convert_byte_order</name>
      <anchorfile>igtl__tdata_8c.html</anchorfile>
      <anchor>a118e1372399ff55150b2e0419f137a16</anchor>
      <arglist>(igtl_stt_tdata *stt_tdata)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_stt_tdata_get_crc</name>
      <anchorfile>igtl__tdata_8c.html</anchorfile>
      <anchor>a0dbf95a811432bc642073997695cc0e1</anchor>
      <arglist>(igtl_stt_tdata *stt_tdata)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_tdata_convert_byte_order</name>
      <anchorfile>igtl__tdata_8c.html</anchorfile>
      <anchor>a1bedc2a95bc7bc8ae50588342f6334ec</anchor>
      <arglist>(igtl_tdata_element *tdatalist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_tdata_get_crc</name>
      <anchorfile>igtl__tdata_8c.html</anchorfile>
      <anchor>a37244c2810d85e5a23e54b6dfab0a972</anchor>
      <arglist>(igtl_tdata_element *tdatalist, int nitem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_tdata.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__tdata_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_rts_tdata</class>
    <class kind="struct">igtl_stt_tdata</class>
    <class kind="struct">igtl_tdata_element</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_RTS_TDATA_SIZE</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>a42b030139207e5f39bbcd853639c66fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STT_TDATA_LEN_COORDNAME</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>ab25738f4c8994d32c1030fdd0738296c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STT_TDATA_SIZE</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>ac2f26d6eb94be4de6de9a2ac2796da09</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TDATA_ELEMENT_SIZE</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>af336346b9c78697f152912719fc39a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_tdata_get_data_n</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>aae3ca3f53ba85d4a3c6455865884b23d</anchor>
      <arglist>(size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_tdata_get_data_size</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>a105a6119af438825c76fe8c04a411c95</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TDATA_LEN_NAME</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>a32183163cc7a1a104470dbfaf43f1960</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TDATA_TYPE_3D</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>ac4719be19669e20e5be74c4367c6b8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TDATA_TYPE_5D</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>a45567bbf23bd66224b6db023c03986d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TDATA_TYPE_6D</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>a8d0386cc05e96b137f0b93386aa6084d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TDATA_TYPE_TRACKER</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>a4a77f1f0b119069315caeb31888f9a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_rts_tdata_convert_byte_order</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>a70186660ed92c5fbe9666342d55f3b55</anchor>
      <arglist>(igtl_rts_tdata *rts_tdata)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_rts_tdata_get_crc</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>a7e11ea099f46d5ff387e0eeb33c1fe97</anchor>
      <arglist>(igtl_rts_tdata *rts_tdata)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_stt_tdata_convert_byte_order</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>a118e1372399ff55150b2e0419f137a16</anchor>
      <arglist>(igtl_stt_tdata *stt_tdata)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_stt_tdata_get_crc</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>a0dbf95a811432bc642073997695cc0e1</anchor>
      <arglist>(igtl_stt_tdata *stt_tdata)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_tdata_convert_byte_order</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>ab3c44da5f955a02504b91a28dd223fae</anchor>
      <arglist>(igtl_tdata_element *tdatalist, int nelem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_tdata_get_crc</name>
      <anchorfile>igtl__tdata_8h.html</anchorfile>
      <anchor>ad6f38bf5960d723459298c3df58a6cf8</anchor>
      <arglist>(igtl_tdata_element *tdatalist, int nelem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_trajectory.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__trajectory_8c.html</filename>
    <includes id="igtl__trajectory_8h" name="igtl_trajectory.h" local="yes" import="no" module="no" objc="no">igtl_trajectory.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_trajectory_convert_byte_order</name>
      <anchorfile>igtl__trajectory_8c.html</anchorfile>
      <anchor>a753aced5df99eddaaadf4b91059b304d</anchor>
      <arglist>(igtl_trajectory_element *trajectorylist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_trajectory_get_crc</name>
      <anchorfile>igtl__trajectory_8c.html</anchorfile>
      <anchor>ade8497ba8c2527717b0cb8ae5cc09319</anchor>
      <arglist>(igtl_trajectory_element *trajectorylist, int nitem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_trajectory.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__trajectory_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_trajectory_element</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TRAJECTORY_ELEMENT_SIZE</name>
      <anchorfile>igtl__trajectory_8h.html</anchorfile>
      <anchor>a938cb0c774e8f51237e9f2e936601a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_trajectory_get_data_n</name>
      <anchorfile>igtl__trajectory_8h.html</anchorfile>
      <anchor>aa7d3198d4ed8db19b4ed14f20869db8b</anchor>
      <arglist>(size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_trajectory_get_data_size</name>
      <anchorfile>igtl__trajectory_8h.html</anchorfile>
      <anchor>a77b1ec019b8abec3b2d6c22d03f61bb2</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TRAJECTORY_LEN_GROUP_NAME</name>
      <anchorfile>igtl__trajectory_8h.html</anchorfile>
      <anchor>afa0c4ccc1fdb2f5db0cd2f5c7254db29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TRAJECTORY_LEN_NAME</name>
      <anchorfile>igtl__trajectory_8h.html</anchorfile>
      <anchor>a6b0155abe07b5d892ee4153ae8e5d0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TRAJECTORY_LEN_OWNER</name>
      <anchorfile>igtl__trajectory_8h.html</anchorfile>
      <anchor>abc3dcf75d0d2974b928c481bc8965071</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TRAJECTORY_TYPE_ENTRY_ONLY</name>
      <anchorfile>igtl__trajectory_8h.html</anchorfile>
      <anchor>a6da2bca475b35f82cde802565f1a4d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TRAJECTORY_TYPE_ENTRY_TARGET</name>
      <anchorfile>igtl__trajectory_8h.html</anchorfile>
      <anchor>a2df3aab597f6cef0b965464fee277d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TRAJECTORY_TYPE_TARGET_ONLY</name>
      <anchorfile>igtl__trajectory_8h.html</anchorfile>
      <anchor>af8dd41b05af97d54de723de62da07be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_trajectory_convert_byte_order</name>
      <anchorfile>igtl__trajectory_8h.html</anchorfile>
      <anchor>a26079d05bef4babb014b7de807ce22bb</anchor>
      <arglist>(igtl_trajectory_element *trajectorylist, int nelem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_trajectory_get_crc</name>
      <anchorfile>igtl__trajectory_8h.html</anchorfile>
      <anchor>a1dbc48773a118cb2344df6fb1b366932</anchor>
      <arglist>(igtl_trajectory_element *trajectorylist, int nelem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_transform.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__transform_8c.html</filename>
    <includes id="igtl__transform_8h" name="igtl_transform.h" local="yes" import="no" module="no" objc="no">igtl_transform.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_transform_convert_byte_order</name>
      <anchorfile>igtl__transform_8c.html</anchorfile>
      <anchor>a45fda72e5424dc7b6ed81e52fdad6162</anchor>
      <arglist>(igtl_float32 *transform)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_transform_get_crc</name>
      <anchorfile>igtl__transform_8c.html</anchorfile>
      <anchor>ad41b42568605189e249db4a98b84053e</anchor>
      <arglist>(igtl_float32 *transform)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_transform.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__transform_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TRANSFORM_SIZE</name>
      <anchorfile>igtl__transform_8h.html</anchorfile>
      <anchor>adaa76622920b630cd996827c0f3a69ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_transform_convert_byte_order</name>
      <anchorfile>igtl__transform_8h.html</anchorfile>
      <anchor>a45fda72e5424dc7b6ed81e52fdad6162</anchor>
      <arglist>(igtl_float32 *transform)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_transform_get_crc</name>
      <anchorfile>igtl__transform_8h.html</anchorfile>
      <anchor>ad41b42568605189e249db4a98b84053e</anchor>
      <arglist>(igtl_float32 *transform)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_types.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__types_8h.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>igtl_complex</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>a4834826c8a99a963a5715763272cbc76</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IANA_ENCODING_TYPE</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_US_ASCII</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a2029a691042cce0f3673c5228313c192</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aa99e09df36858af48c4b72fbd7685da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_2</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a5df8f7dca4804c3844ac29bd26ab50b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_3</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a5c3127b766fbb6cad12ce9c0bc2ae5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_4</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a501a7a8f0fbed1b34be30d2342c3aeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_5</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af78f6cdf852fa56358ed9e9fd2151329</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_6</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a2174f9843d4a0e9cf0f68750bc720200</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_7</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a0739a23fa39789053f5e1492e71fb934</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_8</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aebd411ee9ca702ef18846a454ca15ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_9</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a3794475f4956a375a5288cf38c1d2dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_10</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a1dde5a248179ed4e7c348d3065f492e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_6937_2_add</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af1c296587bbde7787d0feca4c435e76a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_X0201</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0afe6be4945e6c6bd970e564eb8f1be48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_Encoding</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a2257b782caaf29812b2e8c79b330874e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Shift_JIS</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a4c8a2d86fd7a59444b1d8bbe33abb910</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EUC_JP</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ac5a4811db7dbdc6dba9ecbda726e387c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Extended_UNIX_Code_Fixed_Width_for_Japanese</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a19060e0e25008508140a052806ca4bf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_BS_4730</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a288f6cb1bbd65107945e29cb73eeae38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_SEN_850200_C</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ad654b19e7ac45d4154ef5e0457ccf5dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IT</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae9bf74a3cf682c8711a1ba9ce54ca8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ES</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a153ffc405ee5b4ee497ac26fcc525cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_DIN_66003</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9fdba32981aaeba387caa210aa9391ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_NS_4551_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0abf5276f6c8400c353b8f9fdf665c446e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_NF_Z_62_010</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae3962be533ce61f586e91d9f059c8162</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_10646_UTF_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0abcc742ff202b819f74d8f19107fbc75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_646_basic_1983</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a1597dcca3460f5f2d82f77f22f4f68e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_INVARIANT</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ab7fdfb7e166910c27601efa9914643ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_646_irv_1983</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9973532cbe4540710f41bb7b6b37a1ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_NATS_SEFI</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a342bb51e41b9e6e8da60e85a98f338d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_NATS_SEFI_ADD</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9dab14ea55ce3c36d3e09083c73a2089</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_NATS_DANO</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a6fd9fa1422ad13ed4e751a7c569bc29e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_NATS_DANO_ADD</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a1eb51fe76c79a234a4505c4a95a03942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_SEN_850200_B</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ab708724963a13661e8f95030e157c06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_KS_C_5601_1987</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a8cf26c84f666137f37ba1ff1d359006c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_2022_KR</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a0b7d7c094e6b4692ba933c3847321c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EUC_KR</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af7b8ed636aa0b4e41f666a3532bf815e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_2022_JP</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a370dacf12113c02a4256cf3aa3742fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_2022_JP_2</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a5d59f5c8340fd049174bf8020e0e1ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_C6220_1969_jp</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a49211a9b888a51e3a45a4fb0d378a75d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_C6220_1969_ro</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0afb23b4d3e4a53556e5b46b60bff4d6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_PT</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a173a6be4d417061f6b74dccea70fef74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_greek7_old</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a808b0a0160caabe4217c503b9f42d7ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_latin_greek</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a057a58e51859dde4af2a745e41496787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_NF_Z_62_010_1973</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aadf356749ab37532463726a7c0a6ebba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Latin_greek_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ab0855ebe2c29a02e3648f46f106fd12a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_5427</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aa48e3270342147f2441920b22e85a524</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_C6226_1978</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aab68dbe7b4110a1810be91d947fb2004</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_BS_viewdata</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a6b123d178398f1d7813ecab3f05c0034</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_INIS</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aaa97c2a83fa2e4de26e41900c06a323d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_INIS_8</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a97d08a0269b1e8af9b51d95b7f7533f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_INIS_cyrillic</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a3470eb93b30b78e5338960304e0ab4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_5427_1981</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a65f1ccbea075d5282481e6d5a9fec1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_5428_1980</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a8a09609b5389b0d2c757e25c52dac541</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_GB_1988_80</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae24d494143934b0738c7d9533465f4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_GB_2312_80</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a96c7784cdc1f4ca1dc438481dd658500</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_NS_4551_2</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aac139da3c55be25b9e86d413ed44c855</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_videotex_suppl</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a66d9db0c6654bf312d91e92bcaa7d245</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_PT2</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0acb095263ff69dcc952f1c90c6ea87352</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ES2</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae34d83e805ce78332d30c9ea1e7d9242</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_MSZ_7795_3</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aa9b087c7237af5f96df67b370f93d64f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_C6226_1983</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a55fd7749c735923c586121d546b859e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_greek7</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9fbe88d590b49a6c18135fa6e02579b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ASMO_449</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a0076d2315fab851434acca2be56462af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_iso_ir_90</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a773ab0e26431d4e28b988176191e8f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_C6229_1984_a</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ad598b745ee5d3e4a19db297a444a031a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_C6229_1984_b</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a2195a43cf87ac8b5bf492fb2a31f0f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_C6229_1984_b_add</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a329676c1515e9c4910ed00331c44bb6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_C6229_1984_hand</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a8144f1badcaae04143d744aa9672d8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_C6229_1984_hand_add</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a548f5968eae71a8b8f30e06fc8148f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_C6229_1984_kana</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a5284e83358df42cef42f051868f5b5e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_2033_1983</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aa55d7302dfd05caa1d90f149a14ec504</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ANSI_X3_110_1983</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae6a808847cf8646e63eaf2dee4979a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_T_61_7bit</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a3394baf6a976b1a97217a023c6f9b85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_T_61_8bit</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a7dc1b70716b8e83a158415d8b832c9fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ECMA_cyrillic</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af225d43a72b7695aa927a4720048a167</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_CSA_Z243_4_1985_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a8216dd458961ddc455d0e3ccbde5b2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_CSA_Z243_4_1985_2</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a1a18ad812935363c8cf7ea9b27d95a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_CSA_Z243_4_1985_gr</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a12e85a3d50d6856c0034eac8f2248e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_6_E</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9f8bff35c4360c54cc92f981b71cd0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_6_I</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a72a728ead6d3a69b47b314b3fb60e3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_T_101_G2</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a916f65756f82cb497efa76d50d48abe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_8_E</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aa80d0ca5ce5dd4288a2ac44a771ab2cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_8_I</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae3c395eff784573f11e89faa67b65aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_CSN_369103</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a67d974d425e332d5d6c5302a035fb6d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JUS_I_B1_002</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a04c4d634a847d10b5a8edda387d46c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IEC_P27_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a7e69b3b40765d508df9468598eb6ac8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JUS_I_B1_003_serb</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a0c828947f6143f553f36ed5ba41f9022</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JUS_I_B1_003_mac</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aceb72b63b5c549e2583ee16ae1fab85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_greek_ccitt</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ab64c7610f642267ee3cc30fb2fbe7365</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_NC_NC00_10_81</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae92125d705101eaf2fd23186c99ef457</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_6937_2_25</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a1953274fcc98bebdc4aa3c08aec6327c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_GOST_19768_74</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ab6b87c708f239333cabf54e55d233e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_supp</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af43e862903e7420c0ec96180a7f0e8ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_10367_box</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aeafd8d259042301336d831e2f1c92cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_latin_lap</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0acfffdde87ac6fa9740599478c55eb56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_JIS_X0212_1990</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aee5e941ce32c6876212bdd90ead8742e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_DS_2089</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae1463253e51664e081f0d4078f3c94de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_us_dk</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0acefdc4e814c2e9486b0d9c4199e5d747</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_dk_us</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a2206a9ef1f123376825276532b8e538f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_KSC5636</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ad3b859aa6b57090ef5e61810c8ed438b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_UNICODE_1_1_UTF_7</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a7b360221a9feee1b574e9cfb4eaced9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_2022_CN</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aa2a7aba44aee40d8bec65d106b97381b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_2022_CN_EXT</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0acee253b5f6d39c03830f20cb59cb8473</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_UTF_8</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a4a62fb37a706356116aefcb574b17d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_13</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0add0c54621a216aae21f31e9a68fbeccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_14</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aef6a3927e4269b442b3775813887095d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_15</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a6ce56f4925130bb4c2f0434149c7888e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_16</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ad627699a65368fa87405028c5e70a793</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_GBK</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a08fbcbea1603dc51e3ab63e52e2dacf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_GB18030</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a1a3796554d1a4e1b930428cf2be09e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_OSD_EBCDIC_DF04_15</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ade66115b01f02471a20592a35716d125</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_OSD_EBCDIC_DF03_IRV</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a007eb7c375eefbbb8603cc880d65b2db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_OSD_EBCDIC_DF04_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a43d6e20051e1fc920ad6d7f304c3e8ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_11548_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aac5c596f1fdd3f0eb53313e2c3d6c12c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_KZ_1048</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a4af0eb92e0e246f3730ee40751f648fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_10646_UCS_2</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a95026b33e17b4122a4b865eb782385cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_10646_UCS_4</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9115c8ba54e0f11999cf0dabf21b25c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_10646_UCS_Basic</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af6cb100c551438fb03cc43637b57cb26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_10646_Unicode_Latin1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aa66e6511691db6784c827eb9bdefce51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_10646_J_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a73adfee21b920cb39a9c1bb2adfac610</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_Unicode_IBM_1261</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a1497c90f07def2e54cf27a04fde3babf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_Unicode_IBM_1268</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a19b2a2816e7a8e594338576e606fb677</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_Unicode_IBM_1276</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a568b2b4c2609405637d8dbd5935acbe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_Unicode_IBM_1264</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a87439bef45788502a3f1e22e6d80203e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_Unicode_IBM_1265</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ac0b518229addede41c42d8d65aed883a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_UNICODE_1_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a2ada6ef528ea62d34f455e6bced9d1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_SCSU</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ab0046c3647764146808ba276aa187d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_UTF_7</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a47290189cb94669ed73d659ef3ab1b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_UTF_16BE</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a3583d20217f1ca2189965e3004cf4011</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_UTF_16LE</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9f9561c7c253cfa754e29c491f13285c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_UTF_16</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ad069417b91967bc5ff134e3c165b45ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_CESU_8</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a123eb671997ea07afb70a21a310d6855</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_UTF_32</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ac44d4d771ef14766207c4f20888bf61f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_UTF_32BE</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a05b4616c28a0623d2802a0cf6a010e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_UTF_32LE</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a845d81ac6b641574ff76f5642e68eb0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_BOCU_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a372c1b06be7b36ad9ed034523f9bd9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_1_Windows_3_0_Latin_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ad5b0e57ca7e3527316869b16cffea7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_1_Windows_3_1_Latin_1</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a0600be60da35d82eea775c659e568408</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_2_Windows_Latin_2</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a0478d6305004a049c0ab9619452e8462</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_ISO_8859_9_Windows_Latin_5</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a22eee0a754db43538b5572f441eb3345</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_hp_roman8</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aa22ff5b6b50d52a5f2d6c7cd27b929c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Adobe_Standard_Encoding</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a57730da1c665d7c9230def9e7107f00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Ventura_US</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae72a9a66d94d202e66a54e47fd3833bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Ventura_International</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0afd47d23c3049685efbd69844fc6ad97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_DEC_MCS</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a52f94dc2a179db9a275eb9fb205daab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM850</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a96657ccee16c09cfd95f25fb1bc2dffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_PC8_Danish_Norwegian</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a164158e63afc697bd5ed72891746a681</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM862</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a658893175f57f5d4daf738b644a4e7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_PC8_Turkish</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a1437fd8837425f96a204eb427b501cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM_Symbols</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ac64be292eb6221128969dc08add6c7fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM_Thai</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af3fe4648c558a8ed71016a3f8e84c3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_HP_Legal</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af1beab58d2d9b5ef1e2a919fe11117d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_HP_Pi_font</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a81cfad461f479abeabecf4da1af709d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_HP_Math8</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0afa2001bfe89c2000a383b7c91897200b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Adobe_Symbol_Encoding</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a1cf4be5b33cb58cfb512d7be179500b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_HP_DeskTop</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aab59ecfeadc2777bc9b480ac98675ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Ventura_Math</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af41210375134f029a2d7ca16ec94a10f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Microsoft_Publishing</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a91911032f354ea1948f7c4c23516316f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Windows_31J</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a61e6d725ea78dea7d4277cd34a7f3f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_GB2312</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0adb0bbb3a55caca68954ae4b5aa93412d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Big5</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a87b85dc0b3405324cf8d1befec026908</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_macintosh</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a14ebffbd85f1e619111cffc275e55482</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM037</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a13c10ef37bf3cd9f3fee56f9782922dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM038</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a59131221cf7b2bd65ed0b6ade48bfc75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM273</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a5f147d4408229822d4fe40d9ccff8b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM274</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0abf9554b64f4a1fd870fa1ef33801c1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM275</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a741fa3af783201f0b30686e5fbc061b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM277</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a5669042d1b91e3dcd033c8bc3220266d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM278</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a21787828be33fe0c709e6cd67896592d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM280</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a17a23f279e110aab382590172ff669bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM281</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af5aefdc2fb8e6b39257bf68243740fa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM284</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0adb1e7a2adbf96447512e06dd9a5ead78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM285</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aa5621f29b0dbb1aafe1288ed6593dec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM290</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a474d12ae2e83e9a919c82acf9992847c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM297</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a3752e05d74cda29f3ffe2e2edaab7e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM420</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ace594160f0da02cf2ec56a0ee22e4e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM423</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a166c9da3e37996a91bdb3dbf7bcb9965</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM424</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a4096c8c16e6b344783bca63415964155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM437</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aac73f9367c95fa5f7fd30e6b79c547e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM500</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aac33f91c6e904991c82ff8826766340d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM851</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a3a85a7767bb8f4c4a3d79e7925d5526f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM852</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a7d9f0f70b022829a0f82ba2beb6c05d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM855</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a5ee6485df25ad9c2d905f4da7994049d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM857</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a3d5a28e1e55d77434383eda164def9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM860</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a632773f2e796f6dd4075aeb8013046df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM861</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ad832b263760a788dac033d51dc55db31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM863</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a89d839b34defbb53ab8b943d509ded01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM864</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a3e8cc23beadf61049f8eaee6b4cf7779</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM865</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a08c0309423ed614042171e0e018d5bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM868</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a0fc743270262b00f4d4963eb12fef3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM869</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae7ca5f5d89acbb0011aa9b8af12dab00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM870</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a78c4524fff7ad27ba139ede3db681b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM871</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a4e4b78b654c762ace232ba4c7cd27721</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM880</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a31c5e777f760413571057aede4bd541f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM891</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a10192604de9e8cb690b9f6325d09a029</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM903</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a4f1054c8b5adc26052185e9f3ec2fc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM904</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a3e2a604b8837ac603737eb9185333828</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM905</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aac62d1b3a00f581d2870f5f446f2901c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM918</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a0bd599c2706fdf7a6a2a93a375f09a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM1026</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a7bb7d3622b0c9437cb4f1b84b52908ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_AT_DE</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9e5a5ebc183adef331fa38854630c6af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_AT_DE_A</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a1297e58716c506df8c1a0d0dae2dd132</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_CA_FR</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0abf0677a001de75704156e62c673c6181</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_DK_NO</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af053a90870d5324850f11f90fa804562</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_DK_NO_A</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a76e02a27721f56cf68760e8649bcdf50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_FI_SE</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ab9e140e11a4f25b22b842cbc181357af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_FI_SE_A</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aed8a3e8f8090c2adb5b37f9958c9dea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_FR</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a01976b9c72fa6f367052353f00cc7a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_IT</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ad46fd58e5cdf925b42d5ee7501e953ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_PT</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9ec99c73f9612bd806a6674b80b50b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_ES</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a392c188c46e8a485775436d8d06eb60a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_ES_A</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a77afde5f108aaf2c8c62dcf3ac543205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_ES_S</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a2a7b806e5ff38dfaf296ad3308872586</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_UK</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ac5e2f8b1fd6c996347f6d93955e214d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_EBCDIC_US</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a8c989c9bec5a2567186a3eeab9e794db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_UNKNOWN_8BIT</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae6f9904c7d87d554ac696b7374e4619b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_MNEMONIC</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af68a0aa74b0be34391dc8a4c0f96f07f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_MNEM</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aefa2dd9a6b60947625998b0c3d0416d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_VISCII</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ad527c7e5f29e0bd26d16df94abe64c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_VIQR</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ab9c9da7e7b47bf57ff4a467627f26d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_KOI8_R</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aad695f9511b75cb728c7506cf22876f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_HZ_GB_2312</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9943f675a5a122d48d3c2b17c908d66c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM866</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a840363d70887673a3b04c46a3090be46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM775</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a3e19f62bef1779066f12e90bdad29d8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_KOI8_U</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9f4c34e1ea565812abf2ff50a0673219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM00858</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9d4a166519857f2035c22aee7382eab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM00924</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aeb1c30a971464ba1dcbc0a22ec488d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM01140</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ac8ab47dd53bc8bfbe2af5694588d02c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM01141</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a42003b9116f2880f2d17f77f6ee15ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM01142</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a0737ae73d86138912545055151861847</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM01143</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a292a15c48cfb089af0155cd5f14bba8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM01144</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aac1622809bef314421a04493984e8e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM01145</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af1446cbdfb91b6fbb5ce77b369588253</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM01146</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a5d156f8cad56ea969a9a87bd4cd0359c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM01147</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a837f95f2d1e0501a8f36ed7abfb55834</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM01148</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ab731dcef98d809ae0b5659bdb80e5073</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM01149</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a03fa855cab70d0d5164f34c33999d8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Big5_HKSCS</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a27c765cc8290e58c760ac306662fb5b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_IBM1047</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a8d7b25c1e4f4fdd8aa41f7c3981eef11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_PTCP154</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a70ef4e4be89f58cf8ccef80723b0ab12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_Amiga_1251</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae44c66845c4470eaec30615d9d438ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_KOI7_switched</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0acf1fa1f9dee67a422f49ad1f4971aaf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_BRF</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0af56315fc38775a5743fe710e6e2e6376</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_TSCII</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a09b72d1f4f18179a44e7f856a917cc5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_CP51932</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aa0050097663bcf6d6f944effa9e5605b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_windows_874</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a09812e025950cbf1f4fed917cf27cb1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_windows_1250</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ae69a00e1786b088187b3f112c7727bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_windows_1251</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0accf9f02e55066571728a840899185146</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_windows_1252</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ab859a9f8b9109f646524f4ed883f64b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_windows_1253</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a42344f58b065ca7785cf909bd1f74d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_windows_1254</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a4b224d972c9131e9e247fb5fc91bfddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_windows_1255</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ac9682ccc33e9f3fb382737d6bcbfd6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_windows_1256</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a7515c31d0df4fe64002ed6c54672ef71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_windows_1257</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a0383cb184c602bf04a8d8c42025a44ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_windows_1258</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0aac8968b68411f4ccdae4914dba1ae402</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_TIS_620</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0a9b4e7d7f16da5ba6a75bfd7309f7c578</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IANA_TYPE_CP50220</name>
      <anchorfile>igtl__types_8h.html</anchorfile>
      <anchor>afcecf2910c64ee71e85c5e719bd49cc0ac99bf0b89e570898b90388d2f07674f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_unit.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__unit_8c.html</filename>
    <includes id="igtl__unit_8h" name="igtl_unit.h" local="yes" import="no" module="no" objc="no">igtl_unit.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_unit_init</name>
      <anchorfile>igtl__unit_8c.html</anchorfile>
      <anchor>a5722bd66b498bd7560221cbef796b984</anchor>
      <arglist>(igtl_unit_data *data)</arglist>
    </member>
    <member kind="function">
      <type>igtl_unit igtl_export</type>
      <name>igtl_unit_pack</name>
      <anchorfile>igtl__unit_8c.html</anchorfile>
      <anchor>a0b0c43f87afe1fa858779c49e7c88998</anchor>
      <arglist>(igtl_unit_data *data)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_unit_unpack</name>
      <anchorfile>igtl__unit_8c.html</anchorfile>
      <anchor>aafeddce626e8df35149639c57061dd2b</anchor>
      <arglist>(igtl_unit pack, igtl_unit_data *data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_unit.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__unit_8h.html</filename>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__unit_8h" name="igtl_unit.h" local="yes" import="no" module="no" objc="no">igtl_unit.h</includes>
    <class kind="struct">igtl_unit_data</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_CENTI</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>ac14c5bc7edba6c5bbaeef91b2b296269</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_DECI</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a3e367201ff529feb1a80898fe7257a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_DEKA</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a4acc1afb41916256a1a680954c86c022</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_FEMTO</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a02adb1e52bbde66230624c663825d614</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_GIGA</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a599c7d20435df15b7aac02d47b99ba28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_HECTO</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a7e8672bd0c5f8f503a60702d107d749a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_KILO</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>aa85e274a725c23fff5f1e069e8626896</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_MEGA</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>ae8d91ef6e5cf989ab46bd37aacf5e347</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_MICRO</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a58c2fddbc1d24ffba1ed2d846cac91fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_MILLI</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a37de0b97d02c5ce567de297c4ebcd62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_NANO</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a99b5454de3823365ea00d539ff26c47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_NONE</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a27fb1d382b32e723a60ee361db0b5e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_PETA</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a2523d938d71d472a44dcc6c09009e089</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_PICO</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a239efaf81661f203f9689c07183e1603</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_PREFIX_TERA</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>aad4ca7713fc58d98ab2617bf2fd96c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_BASE_AMPERE</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a8216ee8b6223a882c80549c27386f70e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_BASE_CANDELA</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>af5ffc181e24d0bc44fcab9757ae6c28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_BASE_GRAM</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>abe4b13c4c7359535787a58b73b58189d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_BASE_KELVIN</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>af868bd8b3225b99e9709f042d65ac23b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_BASE_METER</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a4f0afaf5db0d1092420fadfd9eb5ec82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_BASE_MOLE</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a9765e1df92cabd38bdf1ce25f7a52607</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_BASE_NONE</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>ab1741003ef7605261f6792837abf9824</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_BASE_SECOND</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>ab09604eee1a81b667ed3c0cfe114404f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_BECQUEREL</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a5a1e762ec6cacff60eb00afd65f10d95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_COULOMB</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>ae6ec2756350d03ceb75bb10f7ebb9c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_FARAD</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a6da933b6dc002f6a986c45073dab0442</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_GRAY</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a66cb1879254c39f15a7c8c04c9cea0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_HENRY</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>ad71fe98fcf29c509ea243ca4a1296962</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_HERTZ</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a922f83bc0362e23fdc9ad0185eccd33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_JOULE</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>acd2346960da885954d7950f297699b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_LUMEN</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a77dbc20a50cef2936bcf0e88f00b15fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_LUX</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>ac2e4fcc5619de4ea8c6ad1fe6425182b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_NEWTON</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a8dadc5e0277be835d1fb832804972ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_OHM</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>ac1666c4b4785c8a20180a4f6d762ae69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_PASCAL</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a48b4e6f87dbdd55d0378b6b98a83c62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_RADIAN</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a8b7bc5b819cd941f3db75c6c34801f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_SIEMENS</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a3e05bc88600ef4304c8e8ec64c34bdae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_SIEVERT</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>aab93bef83934b6de90c5d6a1f2fce182</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_STERADIAN</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>aab22864ddca2748873cb7bbe4e4bf012</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_TESLA</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>af7ad5ea7309eab7a95016be485ba9c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_VOLT</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a6d14f4efcbcb00b8b5ef32fd3ee6ffd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_WATT</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a4505f838f63fc05a4bd0dce78d9506ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_UNIT_SI_DERIVED_WEBER</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a9436fd4ae2e5812ca5874e5df03aa066</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>igtl_uint64</type>
      <name>igtl_unit</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>ade9b0d10a67c6b8d37f9ca86b1d8e556</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_unit_init</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a5722bd66b498bd7560221cbef796b984</anchor>
      <arglist>(igtl_unit_data *data)</arglist>
    </member>
    <member kind="function">
      <type>igtl_unit igtl_export</type>
      <name>igtl_unit_pack</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>a0b0c43f87afe1fa858779c49e7c88998</anchor>
      <arglist>(igtl_unit_data *data)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_unit_unpack</name>
      <anchorfile>igtl__unit_8h.html</anchorfile>
      <anchor>aafeddce626e8df35149639c57061dd2b</anchor>
      <arglist>(igtl_unit pack, igtl_unit_data *data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_util.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__util_8c.html</filename>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>crc64</name>
      <anchorfile>igtl__util_8c.html</anchorfile>
      <anchor>a9de1a84d05fe56c31a05bfe9042c6f00</anchor>
      <arglist>(unsigned char *data, igtl_uint64 len, igtl_uint64 crc)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32 igtl_export</type>
      <name>igtl_frac_to_nanosec</name>
      <anchorfile>igtl__util_8c.html</anchorfile>
      <anchor>a2ae64f538a324921cfe648faecd98a0c</anchor>
      <arglist>(igtl_uint32 frac)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32 igtl_export</type>
      <name>igtl_get_scalar_size</name>
      <anchorfile>igtl__util_8c.html</anchorfile>
      <anchor>ad5522f46e8e0bc27836a3b2fc9ae1b4c</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_is_little_endian</name>
      <anchorfile>igtl__util_8c.html</anchorfile>
      <anchor>a02ff1ec5f02b7fd393a46c0585e9ad1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_message_dump_hex</name>
      <anchorfile>igtl__util_8c.html</anchorfile>
      <anchor>a0cb0ccd08e58ead927f87d9e04f9d388</anchor>
      <arglist>(FILE *stream, const void *message, int bytes)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32 igtl_export</type>
      <name>igtl_nanosec_to_frac</name>
      <anchorfile>igtl__util_8c.html</anchorfile>
      <anchor>afb043500a84c69b4c9137d126642c726</anchor>
      <arglist>(igtl_uint32 nanosec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_util.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__util_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>BYTE_SWAP_INT16</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a6e76a52bca3b6463e3dcec9bece39af1</anchor>
      <arglist>(S)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BYTE_SWAP_INT32</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a166fa4f3e0c2f5fb79f4a85a295e65a0</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BYTE_SWAP_INT64</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a6d4e6b249898536a317d88d1d474c3ed</anchor>
      <arglist>(LL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_SCALAR_COMPLEX</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a12a3da260922dffd327d7510d222c019</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_SCALAR_FLOAT32</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a7a05133c8fe49005cbfea22983af24d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_SCALAR_FLOAT64</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a8804959d3d564aed9455228f1cddc12f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_SCALAR_INT16</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>ad9314ac74cad547be98021fd42938362</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_SCALAR_INT32</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>aa951ecc99d044298f966335c53561f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_SCALAR_INT8</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a35322440aaa7558e2312d658d3ba7bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_SCALAR_UINT16</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a59fcefc42a2b60ecde245edd51a48cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_SCALAR_UINT32</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a3bab6a1ac096766cf3b5bc0359e0ca1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_SCALAR_UINT8</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a682239dc08a4c74d2e2e9e1f877e077c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>crc64</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a9de1a84d05fe56c31a05bfe9042c6f00</anchor>
      <arglist>(unsigned char *data, igtl_uint64 len, igtl_uint64 crc)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32 igtl_export</type>
      <name>igtl_frac_to_nanosec</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a2ae64f538a324921cfe648faecd98a0c</anchor>
      <arglist>(igtl_uint32 frac)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32 igtl_export</type>
      <name>igtl_get_scalar_size</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>ad5522f46e8e0bc27836a3b2fc9ae1b4c</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>int igtl_export</type>
      <name>igtl_is_little_endian</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a02ff1ec5f02b7fd393a46c0585e9ad1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_message_dump_hex</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>a0378f02c955c029b12f8984da12893d2</anchor>
      <arglist>(FILE *stream, const void *message, int max_size)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint32 igtl_export</type>
      <name>igtl_nanosec_to_frac</name>
      <anchorfile>igtl__util_8h.html</anchorfile>
      <anchor>afb043500a84c69b4c9137d126642c726</anchor>
      <arglist>(igtl_uint32 nanosec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_win32header.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/igtlutil/</path>
    <filename>igtl__win32header_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>igtl_export</name>
      <anchorfile>igtl__win32header_8h.html</anchorfile>
      <anchor>adf81f5b1b7d6f02d0688c554eb3b59e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlWin32Header.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlWin32Header_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_EXPORT</name>
      <anchorfile>igtlWin32Header_8h.html</anchorfile>
      <anchor>a4d2a33a990a63021ee6fb518a6ba4bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_TYPENAME</name>
      <anchorfile>igtlWin32Header_8h.html</anchorfile>
      <anchor>aee6dfee953b32e31e5136fa08968871a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTLCommon_EXPORT</name>
      <anchorfile>igtlWin32Header_8h.html</anchorfile>
      <anchor>a510109b14da2ff98cf05c31cb4839740</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlWindows.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/</path>
    <filename>igtlWindows_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>NOMINMAX</name>
      <anchorfile>igtlWindows_8h.html</anchorfile>
      <anchor>a9f918755b601cf4bffca775992e6fb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WIN32_LEAN_AND_MEAN</name>
      <anchorfile>igtlWindows_8h.html</anchorfile>
      <anchor>ac7bef5d85e3dcd73eef56ad39ffc84a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_video.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtl__video_8c.html</filename>
    <includes id="igtl__video_8h" name="igtl_video.h" local="yes" import="no" module="no" objc="no">igtl_video.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_frame_convert_byte_order</name>
      <anchorfile>igtl__video_8c.html</anchorfile>
      <anchor>a1318f71204f949504b80eae390409b28</anchor>
      <arglist>(igtl_frame_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_frame_get_matrix</name>
      <anchorfile>igtl__video_8c.html</anchorfile>
      <anchor>af03ac8eccbe6e7ed40bd50aa18c2eb61</anchor>
      <arglist>(float spacing[3], float origin[3], float norm_i[3], float norm_j[3], float norm_k[3], igtl_frame_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_frame_get_matrix_4x4</name>
      <anchorfile>igtl__video_8c.html</anchorfile>
      <anchor>a2aac9d48639ae4ef6df60fb9a36b2202</anchor>
      <arglist>(float _matrix[4][4], igtl_frame_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_frame_set_matrix</name>
      <anchorfile>igtl__video_8c.html</anchorfile>
      <anchor>a4eb4da5e2c64a7819bd25b94a2c07bab</anchor>
      <arglist>(float spacing[3], float origin[3], float norm_i[3], float norm_j[3], float norm_k[3], igtl_frame_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_frame_set_matrix_4x4</name>
      <anchorfile>igtl__video_8c.html</anchorfile>
      <anchor>a67d4a585260455f945189ac0bdc6af37</anchor>
      <arglist>(float _matrix[4][4], igtl_frame_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_stt_video_convert_byte_order</name>
      <anchorfile>igtl__video_8c.html</anchorfile>
      <anchor>ae78a6cc26d43c1b1396a6614396b5024</anchor>
      <arglist>(igtl_stt_video *stt_video)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_stt_video_get_crc</name>
      <anchorfile>igtl__video_8c.html</anchorfile>
      <anchor>aec37160b45f07d373a83da224d098c67</anchor>
      <arglist>(igtl_stt_video *stt_video)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_video.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtl__video_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <class kind="struct">igtl_frame_header</class>
    <class kind="struct">igtl_stt_video</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_STT_VIDEO_SIZE</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a88895d93042f3ee5913f2c44594e9236</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_CODEC_NAME_AV1</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>aac74f8d1d35fab49df08c8f0515ca940</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_CODEC_NAME_H264</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a1d975af6b2338a667f6f3b61988ebe21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_CODEC_NAME_I420</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a42bcdd1d72ffad04d99ce2992cf8d5a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_CODEC_NAME_OPENHEVC</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a971b45c4d7d119c06d83fbb04c8fc5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_CODEC_NAME_SIZE</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a728f52658cc79a1abd523f23d8d71344</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_CODEC_NAME_VP9</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a6ff79b02023eba1023f1feeb48893317</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_CODEC_NAME_X265</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a48a3b4d23c20bcdca0ce985ac865038d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_DTYPE_SCALAR</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>afa75ddcdeab0f019373c9f9637d9400f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_DTYPE_VECTOR</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a4c6932b90deecbea4a95948f77ee6ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_ENDIAN_BIG</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>ab8ee46df1eb156e8c576c9c2db7e096e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_ENDIAN_LITTLE</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a1566c6154e781b8b6d7fe0281fd50b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_HEADER_SIZE</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>ac82c97ea584a6388fc35f09fc425266b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_HEADER_VERSION</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>aad54b7b5f397a4070c4ca8227c46ceae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_STYPE_TYPE_INT16</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a13c1f689f571f9cb3a7f5dd4851ba56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_STYPE_TYPE_INT32</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a7725030b624f05aaeb1e3ee1ca1226f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_STYPE_TYPE_INT8</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a31d239c2cbb1f948c91b865b49343900</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_STYPE_TYPE_UINT16</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a65119701e429e13df0b6aac57805270a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_STYPE_TYPE_UINT32</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a203805cd1c04509d1ec5552d5e1dd228</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEO_STYPE_TYPE_UINT8</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a561bd773ce65791c6763b9fe4ac203a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_frame_convert_byte_order</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a1318f71204f949504b80eae390409b28</anchor>
      <arglist>(igtl_frame_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_frame_get_matrix</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>af03ac8eccbe6e7ed40bd50aa18c2eb61</anchor>
      <arglist>(float spacing[3], float origin[3], float norm_i[3], float norm_j[3], float norm_k[3], igtl_frame_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_frame_get_matrix_4x4</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a2aac9d48639ae4ef6df60fb9a36b2202</anchor>
      <arglist>(float _matrix[4][4], igtl_frame_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_frame_set_matrix</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a4eb4da5e2c64a7819bd25b94a2c07bab</anchor>
      <arglist>(float spacing[3], float origin[3], float norm_i[3], float norm_j[3], float norm_k[3], igtl_frame_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_frame_set_matrix_4x4</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>a67d4a585260455f945189ac0bdc6af37</anchor>
      <arglist>(float _matrix[4][4], igtl_frame_header *header)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_stt_video_convert_byte_order</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>ae78a6cc26d43c1b1396a6614396b5024</anchor>
      <arglist>(igtl_stt_video *stt_video)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_stt_video_get_crc</name>
      <anchorfile>igtl__video_8h.html</anchorfile>
      <anchor>aec37160b45f07d373a83da224d098c67</anchor>
      <arglist>(igtl_stt_video *stt_video)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_videometa.c</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtl__videometa_8c.html</filename>
    <includes id="igtl__videometa_8h" name="igtl_videometa.h" local="yes" import="no" module="no" objc="no">igtl_videometa.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_videometa_convert_byte_order</name>
      <anchorfile>igtl__videometa_8c.html</anchorfile>
      <anchor>a2d58400b98468cebc0dbcb5dcdb4cc5c</anchor>
      <arglist>(igtl_videometa_element *metalist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_videometa_get_crc</name>
      <anchorfile>igtl__videometa_8c.html</anchorfile>
      <anchor>a2f0c287232216bbc191bf2790308064a</anchor>
      <arglist>(igtl_videometa_element *metalist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_videometa_get_matrix</name>
      <anchorfile>igtl__videometa_8c.html</anchorfile>
      <anchor>a76f48e30fa5eabcfda9315e55270a65f</anchor>
      <arglist>(float spacing[3], float origin[3], float norm_i[3], float norm_j[3], float norm_k[3], igtl_videometa_element *element)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_videometa_get_matrix_4x4</name>
      <anchorfile>igtl__videometa_8c.html</anchorfile>
      <anchor>a49cde5a631d3467fb9cbae84d6cab671</anchor>
      <arglist>(float _matrix[4][4], igtl_videometa_element *element)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_videometa_set_matrix</name>
      <anchorfile>igtl__videometa_8c.html</anchorfile>
      <anchor>a4edc67d358be59a1f60a7c275b9475a7</anchor>
      <arglist>(float spacing[3], float origin[3], float norm_i[3], float norm_j[3], float norm_k[3], igtl_videometa_element *element)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_videometa_set_matrix_4x4</name>
      <anchorfile>igtl__videometa_8c.html</anchorfile>
      <anchor>a76f930b13674bf19c655c1b3be36a97a</anchor>
      <arglist>(float _matrix[4][4], igtl_videometa_element *element)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtl_videometa.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtl__videometa_8h.html</filename>
    <includes id="igtl__win32header_8h" name="igtl_win32header.h" local="yes" import="no" module="no" objc="no">igtl_win32header.h</includes>
    <includes id="igtl__util_8h" name="igtl_util.h" local="yes" import="no" module="no" objc="no">igtl_util.h</includes>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <includes id="igtl__video_8h" name="igtl_video.h" local="yes" import="no" module="no" objc="no">igtl_video.h</includes>
    <class kind="struct">igtl_videometa_element</class>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEOMETA_ELEMENT_SIZE</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>ad7740c42b6414c7598097a5b77a987ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_videometa_get_data_n</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>a824958feb90814a09afd999b0263c5be</anchor>
      <arglist>(size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>igtl_videometa_get_data_size</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>ab875ecda89d546ba1a7dc282368a43f9</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEOMETA_LEN_DEVICE_NAME</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>a9c881f6dcfda899e8a51554b480f8a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEOMETA_LEN_NAME</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>a86499a08d72647207961acfb2bfd36ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEOMETA_LEN_PATIENT_ID</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>afdeb99dd1daef5cdd14790b405534596</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IGTL_VIDEOMETA_LEN_PATIENT_NAME</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>ae9f81a6c1b546ee831f8cec0c00bf183</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_videometa_convert_byte_order</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>a2d58400b98468cebc0dbcb5dcdb4cc5c</anchor>
      <arglist>(igtl_videometa_element *metalist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64 igtl_export</type>
      <name>igtl_videometa_get_crc</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>a2f0c287232216bbc191bf2790308064a</anchor>
      <arglist>(igtl_videometa_element *metalist, int nitem)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_videometa_get_matrix</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>a76f48e30fa5eabcfda9315e55270a65f</anchor>
      <arglist>(float spacing[3], float origin[3], float norm_i[3], float norm_j[3], float norm_k[3], igtl_videometa_element *element)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_videometa_get_matrix_4x4</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>a49cde5a631d3467fb9cbae84d6cab671</anchor>
      <arglist>(float _matrix[4][4], igtl_videometa_element *element)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_videometa_set_matrix</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>a4edc67d358be59a1f60a7c275b9475a7</anchor>
      <arglist>(float spacing[3], float origin[3], float norm_i[3], float norm_j[3], float norm_k[3], igtl_videometa_element *element)</arglist>
    </member>
    <member kind="function">
      <type>void igtl_export</type>
      <name>igtl_videometa_set_matrix_4x4</name>
      <anchorfile>igtl__videometa_8h.html</anchorfile>
      <anchor>a76f930b13674bf19c655c1b3be36a97a</anchor>
      <arglist>(float _matrix[4][4], igtl_videometa_element *element)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlAV1Decoder.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlAV1Decoder_8cxx.html</filename>
    <includes id="igtlAV1Decoder_8h" name="igtlAV1Decoder.h" local="yes" import="no" module="no" objc="no">igtlAV1Decoder.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlAV1Decoder.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlAV1Decoder_8h.html</filename>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <class kind="struct">igtl::AomInterfaceDecoder</class>
    <class kind="class">igtl::igtlAV1Decoder</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NO_DELAY_DECODING</name>
      <anchorfile>igtlAV1Decoder_8h.html</anchorfile>
      <anchor>adca3e6a898d7e950404ebfe2728445e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlAV1Encoder.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlAV1Encoder_8cxx.html</filename>
    <includes id="igtlAV1Encoder_8h" name="igtlAV1Encoder.h" local="yes" import="no" module="no" objc="no">igtlAV1Encoder.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlAV1Encoder.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlAV1Encoder_8h.html</filename>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <class kind="struct">igtl::AomInterfaceEncoder</class>
    <class kind="class">igtl::igtlAV1Encoder</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlCodecCommonClasses.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlCodecCommonClasses_8cxx.html</filename>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlCodecCommonClasses.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlCodecCommonClasses_8h.html</filename>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <class kind="class">igtl::GenericDecoder</class>
    <class kind="class">igtl::GenericEncoder</class>
    <class kind="class">igtl::ReadConfigFile</class>
    <class kind="struct">igtl::SourcePicture</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlH264Decoder.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlH264Decoder_8cxx.html</filename>
    <includes id="igtlH264Decoder_8h" name="igtlH264Decoder.h" local="yes" import="no" module="no" objc="no">igtlH264Decoder.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlH264Decoder.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlH264Decoder_8h.html</filename>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <class kind="class">igtl::H264Decoder</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NO_DELAY_DECODING</name>
      <anchorfile>igtlH264Decoder_8h.html</anchorfile>
      <anchor>adca3e6a898d7e950404ebfe2728445e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlH264Encoder.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlH264Encoder_8cxx.html</filename>
    <includes id="igtlH264Encoder_8h" name="igtlH264Encoder.h" local="yes" import="no" module="no" objc="no">igtlH264Encoder.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlH264Encoder_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CALC_BI_STRIDE</name>
      <anchorfile>igtlH264Encoder_8cxx.html</anchorfile>
      <anchor>a0cc5df33e595806e6f6429c73a858fc4</anchor>
      <arglist>(width, bitcount)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ONLY_ENC_FRAMES_NUM</name>
      <anchorfile>igtlH264Encoder_8cxx.html</anchorfile>
      <anchor>a0ad0ee465c52e3f165f4877c7d62d5a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlH264Encoder.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlH264Encoder_8h.html</filename>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__video_8h" name="igtl_video.h" local="yes" import="no" module="no" objc="no">igtl_video.h</includes>
    <includes id="igtlOSUtil_8h" name="igtlOSUtil.h" local="yes" import="no" module="no" objc="no">igtlOSUtil.h</includes>
    <includes id="igtlMessageHeader_8h" name="igtlMessageHeader.h" local="yes" import="no" module="no" objc="no">igtlMessageHeader.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <includes id="igtlTimeStamp_8h" name="igtlTimeStamp.h" local="yes" import="no" module="no" objc="no">igtlTimeStamp.h</includes>
    <class kind="class">igtl::H264Encoder</class>
    <class kind="struct">igtl::LayerpEncCtx_s</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EPSN</name>
      <anchorfile>igtlH264Encoder_8h.html</anchorfile>
      <anchor>a33bcdaf3c6eb361b88ce2e358d90da84</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_DEPENDENCY_LAYER</name>
      <anchorfile>igtlH264Encoder_8h.html</anchorfile>
      <anchor>a773ac2b05ac7e68c5bf44441f94e6906</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_THREADS_NUM</name>
      <anchorfile>igtlH264Encoder_8h.html</anchorfile>
      <anchor>a22aa32cbeb9840e967bf59345ddabf52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlH265Decoder.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlH265Decoder_8cxx.html</filename>
    <includes id="igtlH265Decoder_8h" name="igtlH265Decoder.h" local="yes" import="no" module="no" objc="no">igtlH265Decoder.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlH265Decoder.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlH265Decoder_8h.html</filename>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <class kind="class">igtl::H265Decoder</class>
    <class kind="struct">igtl::H265Decoder::Info</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FRAME_CONCEALMENT</name>
      <anchorfile>igtlH265Decoder_8h.html</anchorfile>
      <anchor>a0afc4cd68ebc10c67464fd76ccc6ef61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlH265Encoder.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlH265Encoder_8cxx.html</filename>
    <includes id="igtlH265Encoder_8h" name="igtlH265Encoder.h" local="yes" import="no" module="no" objc="no">igtlH265Encoder.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlH265Encoder.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlH265Encoder_8h.html</filename>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__video_8h" name="igtl_video.h" local="yes" import="no" module="no" objc="no">igtl_video.h</includes>
    <includes id="igtlOSUtil_8h" name="igtlOSUtil.h" local="yes" import="no" module="no" objc="no">igtlOSUtil.h</includes>
    <includes id="igtlMessageHeader_8h" name="igtlMessageHeader.h" local="yes" import="no" module="no" objc="no">igtlMessageHeader.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <includes id="igtlTimeStamp_8h" name="igtlTimeStamp.h" local="yes" import="no" module="no" objc="no">igtlTimeStamp.h</includes>
    <class kind="class">igtl::H265Encoder</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlI420Decoder.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlI420Decoder_8cxx.html</filename>
    <includes id="igtlI420Decoder_8h" name="igtlI420Decoder.h" local="yes" import="no" module="no" objc="no">igtlI420Decoder.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlI420Decoder.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlI420Decoder_8h.html</filename>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <class kind="class">igtl::I420Decoder</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NO_DELAY_DECODING</name>
      <anchorfile>igtlI420Decoder_8h.html</anchorfile>
      <anchor>adca3e6a898d7e950404ebfe2728445e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlI420Encoder.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlI420Encoder_8cxx.html</filename>
    <includes id="igtlI420Encoder_8h" name="igtlI420Encoder.h" local="yes" import="no" module="no" objc="no">igtlI420Encoder.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlI420Encoder.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlI420Encoder_8h.html</filename>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <class kind="class">igtl::I420Encoder</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlVideoMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlVideoMessage_8cxx.html</filename>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlVideoMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlVideoMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMacro_8h" name="igtlMacro.h" local="yes" import="no" module="no" objc="no">igtlMacro.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__video_8h" name="igtl_video.h" local="yes" import="no" module="no" objc="no">igtl_video.h</includes>
    <class kind="class">igtl::StartVideoMessage</class>
    <class kind="class">igtl::StopVideoMessage</class>
    <class kind="class">igtl::VideoMessage</class>
    <class kind="class">igtl::VideoMessageHeader</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlVideoMetaMessage.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlVideoMetaMessage_8cxx.html</filename>
    <includes id="igtlVideoMetaMessage_8h" name="igtlVideoMetaMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMetaMessage.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__videometa_8h" name="igtl_videometa.h" local="yes" import="no" module="no" objc="no">igtl_videometa.h</includes>
    <includes id="igtl__video_8h" name="igtl_video.h" local="yes" import="no" module="no" objc="no">igtl_video.h</includes>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>igtlVideoMetaMessage_8cxx.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlVideoMetaMessage.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlVideoMetaMessage_8h.html</filename>
    <includes id="igtlObject_8h" name="igtlObject.h" local="yes" import="no" module="no" objc="no">igtlObject.h</includes>
    <includes id="igtlMath_8h" name="igtlMath.h" local="yes" import="no" module="no" objc="no">igtlMath.h</includes>
    <includes id="igtlMessageBase_8h" name="igtlMessageBase.h" local="yes" import="no" module="no" objc="no">igtlMessageBase.h</includes>
    <includes id="igtlTypes_8h" name="igtlTypes.h" local="yes" import="no" module="no" objc="no">igtlTypes.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <class kind="class">igtl::GetVideoMetaMessage</class>
    <class kind="class">igtl::VideoMetaElement</class>
    <class kind="class">igtl::VideoMetaMessage</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlVideoStreamIGTLinkReceiver.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlVideoStreamIGTLinkReceiver_8cxx.html</filename>
    <includes id="igtlVideoStreamIGTLinkReceiver_8h" name="igtlVideoStreamIGTLinkReceiver.h" local="yes" import="no" module="no" objc="no">igtlVideoStreamIGTLinkReceiver.h</includes>
    <class kind="struct">igtl::ReadSocketAndPush</class>
    <class kind="struct">igtl::Wrapper</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlVideoStreamIGTLinkReceiver.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlVideoStreamIGTLinkReceiver_8h.html</filename>
    <includes id="igtlOSUtil_8h" name="igtlOSUtil.h" local="yes" import="no" module="no" objc="no">igtlOSUtil.h</includes>
    <includes id="igtlMessageHeader_8h" name="igtlMessageHeader.h" local="yes" import="no" module="no" objc="no">igtlMessageHeader.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <includes id="igtlServerSocket_8h" name="igtlServerSocket.h" local="yes" import="no" module="no" objc="no">igtlServerSocket.h</includes>
    <includes id="igtlMultiThreader_8h" name="igtlMultiThreader.h" local="yes" import="no" module="no" objc="no">igtlMultiThreader.h</includes>
    <includes id="igtlUDPClientSocket_8h" name="igtlUDPClientSocket.h" local="yes" import="no" module="no" objc="no">igtlUDPClientSocket.h</includes>
    <includes id="igtlMessageRTPWrapper_8h" name="igtlMessageRTPWrapper.h" local="yes" import="no" module="no" objc="no">igtlMessageRTPWrapper.h</includes>
    <includes id="igtlConditionVariable_8h" name="igtlConditionVariable.h" local="yes" import="no" module="no" objc="no">igtlConditionVariable.h</includes>
    <includes id="igtlTimeStamp_8h" name="igtlTimeStamp.h" local="yes" import="no" module="no" objc="no">igtlTimeStamp.h</includes>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <class kind="class">igtl::VideoStreamIGTLinkReceiver</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlVideoStreamIGTLinkServer.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlVideoStreamIGTLinkServer_8cxx.html</filename>
    <includes id="igtlVideoStreamIGTLinkServer_8h" name="igtlVideoStreamIGTLinkServer.h" local="yes" import="no" module="no" objc="no">igtlVideoStreamIGTLinkServer.h</includes>
    <class kind="struct">igtl::serverPointer</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlVideoStreamIGTLinkServer.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlVideoStreamIGTLinkServer_8h.html</filename>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__video_8h" name="igtl_video.h" local="yes" import="no" module="no" objc="no">igtl_video.h</includes>
    <includes id="igtlOSUtil_8h" name="igtlOSUtil.h" local="yes" import="no" module="no" objc="no">igtlOSUtil.h</includes>
    <includes id="igtlMessageHeader_8h" name="igtlMessageHeader.h" local="yes" import="no" module="no" objc="no">igtlMessageHeader.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <includes id="igtlServerSocket_8h" name="igtlServerSocket.h" local="yes" import="no" module="no" objc="no">igtlServerSocket.h</includes>
    <includes id="igtlUDPServerSocket_8h" name="igtlUDPServerSocket.h" local="yes" import="no" module="no" objc="no">igtlUDPServerSocket.h</includes>
    <includes id="igtlMultiThreader_8h" name="igtlMultiThreader.h" local="yes" import="no" module="no" objc="no">igtlMultiThreader.h</includes>
    <includes id="igtlConditionVariable_8h" name="igtlConditionVariable.h" local="yes" import="no" module="no" objc="no">igtlConditionVariable.h</includes>
    <includes id="igtlMessageRTPWrapper_8h" name="igtlMessageRTPWrapper.h" local="yes" import="no" module="no" objc="no">igtlMessageRTPWrapper.h</includes>
    <includes id="igtlTimeStamp_8h" name="igtlTimeStamp.h" local="yes" import="no" module="no" objc="no">igtlTimeStamp.h</includes>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <class kind="class">igtl::VideoStreamIGTLinkServer::encodedFrame</class>
    <class kind="class">igtl::VideoStreamIGTLinkServer</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlVP9Decoder.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlVP9Decoder_8cxx.html</filename>
    <includes id="igtlVP9Decoder_8h" name="igtlVP9Decoder.h" local="yes" import="no" module="no" objc="no">igtlVP9Decoder.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlVP9Decoder.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlVP9Decoder_8h.html</filename>
    <includes id="igtl__types_8h" name="igtl_types.h" local="yes" import="no" module="no" objc="no">igtl_types.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <class kind="class">igtl::VP9Decoder</class>
    <class kind="struct">igtl::VpxInterfaceDecoder</class>
    <namespace>igtl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NO_DELAY_DECODING</name>
      <anchorfile>igtlVP9Decoder_8h.html</anchorfile>
      <anchor>adca3e6a898d7e950404ebfe2728445e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlVP9Encoder.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlVP9Encoder_8cxx.html</filename>
    <includes id="igtlVP9Encoder_8h" name="igtlVP9Encoder.h" local="yes" import="no" module="no" objc="no">igtlVP9Encoder.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlVP9Encoder.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/VideoStreaming/</path>
    <filename>igtlVP9Encoder_8h.html</filename>
    <includes id="igtlCodecCommonClasses_8h" name="igtlCodecCommonClasses.h" local="yes" import="no" module="no" objc="no">igtlCodecCommonClasses.h</includes>
    <includes id="igtl__header_8h" name="igtl_header.h" local="yes" import="no" module="no" objc="no">igtl_header.h</includes>
    <includes id="igtl__video_8h" name="igtl_video.h" local="yes" import="no" module="no" objc="no">igtl_video.h</includes>
    <includes id="igtlOSUtil_8h" name="igtlOSUtil.h" local="yes" import="no" module="no" objc="no">igtlOSUtil.h</includes>
    <includes id="igtlMessageHeader_8h" name="igtlMessageHeader.h" local="yes" import="no" module="no" objc="no">igtlMessageHeader.h</includes>
    <includes id="igtlVideoMessage_8h" name="igtlVideoMessage.h" local="yes" import="no" module="no" objc="no">igtlVideoMessage.h</includes>
    <includes id="igtlTimeStamp_8h" name="igtlTimeStamp.h" local="yes" import="no" module="no" objc="no">igtlTimeStamp.h</includes>
    <class kind="class">igtl::VP9Encoder</class>
    <class kind="struct">igtl::VpxInterfaceEncoder</class>
    <namespace>igtl</namespace>
  </compound>
  <compound kind="file">
    <name>igtlWebClientSocket.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/WebSocket/</path>
    <filename>igtlWebClientSocket_8cxx.html</filename>
    <includes id="igtlWebClientSocket_8h" name="igtlWebClientSocket.h" local="yes" import="no" module="no" objc="no">igtlWebClientSocket.h</includes>
  </compound>
  <compound kind="file">
    <name>igtlWebClientSocket.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/WebSocket/</path>
    <filename>igtlWebClientSocket_8h.html</filename>
    <includes id="igtlOSUtil_8h" name="igtlOSUtil.h" local="yes" import="no" module="no" objc="no">igtlOSUtil.h</includes>
    <class kind="class">webSocketClient</class>
    <member kind="typedef">
      <type>websocketpp::config::asio_client::message_type::ptr</type>
      <name>message_ptr</name>
      <anchorfile>igtlWebClientSocket_8h.html</anchorfile>
      <anchor>a8d7da57f57aec5c532259ba0b3fc7a78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>igtlWebServerSocket.cxx</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/WebSocket/</path>
    <filename>igtlWebServerSocket_8cxx.html</filename>
    <includes id="igtlWebServerSocket_8h" name="igtlWebServerSocket.h" local="yes" import="no" module="no" objc="no">igtlWebServerSocket.h</includes>
  </compound>
  <compound kind="file">
    <name>igtlWebServerSocket.h</name>
    <path>D:/STUDIUM/Term4/Project/Repo/OpenIGTLink/Source/WebSocket/</path>
    <filename>igtlWebServerSocket_8h.html</filename>
    <includes id="igtlOSUtil_8h" name="igtlOSUtil.h" local="yes" import="no" module="no" objc="no">igtlOSUtil.h</includes>
    <class kind="struct">action</class>
    <class kind="class">webSocketServer</class>
    <member kind="typedef">
      <type>websocketpp::server&lt; websocketpp::config::asio &gt;</type>
      <name>server</name>
      <anchorfile>igtlWebServerSocket_8h.html</anchorfile>
      <anchor>afc38239e3eef2a4200e324bff14d91d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>action_type</name>
      <anchorfile>igtlWebServerSocket_8h.html</anchorfile>
      <anchor>a864de25b94a13d8c17e790b2e1638687</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBSCRIBE</name>
      <anchorfile>igtlWebServerSocket_8h.html</anchorfile>
      <anchor>a864de25b94a13d8c17e790b2e1638687abc6f919ff681f5f552b2f7d1f0fba832</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSUBSCRIBE</name>
      <anchorfile>igtlWebServerSocket_8h.html</anchorfile>
      <anchor>a864de25b94a13d8c17e790b2e1638687a8395e5981c15d813c588c86988fd4aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE</name>
      <anchorfile>igtlWebServerSocket_8h.html</anchorfile>
      <anchor>a864de25b94a13d8c17e790b2e1638687ab3e6d7e18839259526a01001f558200f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEVERCREATED</name>
      <anchorfile>igtlWebServerSocket_8h.html</anchorfile>
      <anchor>a864de25b94a13d8c17e790b2e1638687aaa863bf93d9cc73e78f88a86f80cb27b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl::BindMessageBase::_ChildMessageInfo</name>
    <filename>structigtl_1_1BindMessageBase_1_1__ChildMessageInfo.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structigtl_1_1BindMessageBase_1_1__ChildMessageInfo.html</anchorfile>
      <anchor>ad7be9b3d85bf955d4499b88340e47047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>ptr</name>
      <anchorfile>structigtl_1_1BindMessageBase_1_1__ChildMessageInfo.html</anchorfile>
      <anchor>adf0add474e8866679bfd8fdddfc892da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtlUint64</type>
      <name>size</name>
      <anchorfile>structigtl_1_1BindMessageBase_1_1__ChildMessageInfo.html</anchorfile>
      <anchor>a88b9c2035c94f9624c44c6191ffe17f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>structigtl_1_1BindMessageBase_1_1__ChildMessageInfo.html</anchorfile>
      <anchor>ae177485f6e2bb37243727eaa131d5f03</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>action</name>
    <filename>structaction.html</filename>
    <member kind="function">
      <type></type>
      <name>action</name>
      <anchorfile>structaction.html</anchorfile>
      <anchor>a24ddce903832ef87c5ca6151ffbbdb04</anchor>
      <arglist>(action_type t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>action</name>
      <anchorfile>structaction.html</anchorfile>
      <anchor>a0be087fbf9a58c69c490951f1b8ea505</anchor>
      <arglist>(action_type t, connection_hdl h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>action</name>
      <anchorfile>structaction.html</anchorfile>
      <anchor>a92cc4a505dd6fe7f5010467d219add5e</anchor>
      <arglist>(action_type t, connection_hdl h, std::string m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>action</name>
      <anchorfile>structaction.html</anchorfile>
      <anchor>a9c34b236d89a455321bb7ec3a1a93e96</anchor>
      <arglist>(action_type t, std::string m)</arglist>
    </member>
    <member kind="variable">
      <type>websocketpp::connection_hdl</type>
      <name>hdl</name>
      <anchorfile>structaction.html</anchorfile>
      <anchor>a77650a81e0754605034920b760c68054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>msg</name>
      <anchorfile>structaction.html</anchorfile>
      <anchor>a5b9fd4b19e790ef3a7db3bae46946362</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>action_type</type>
      <name>type</name>
      <anchorfile>structaction.html</anchorfile>
      <anchor>aa154ad821e11c996d14c118e4cba0fb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl::AomInterfaceDecoder</name>
    <filename>structigtl_1_1AomInterfaceDecoder.html</filename>
    <member kind="variable">
      <type>aom_codec_iface_t *(*const</type>
      <name>codec_interface</name>
      <anchorfile>structigtl_1_1AomInterfaceDecoder.html</anchorfile>
      <anchor>a5cb1cb080eb2dced144526dc58891340</anchor>
      <arglist>)()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl::AomInterfaceEncoder</name>
    <filename>structigtl_1_1AomInterfaceEncoder.html</filename>
    <member kind="variable">
      <type>aom_codec_iface_t *(*const</type>
      <name>codec_interface</name>
      <anchorfile>structigtl_1_1AomInterfaceEncoder.html</anchorfile>
      <anchor>a35f8d67cfffdd8c63c21723111436f4c</anchor>
      <arglist>)()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::Array</name>
    <filename>classigtl_1_1Array.html</filename>
    <templarg>typename T</templarg>
    <base>igtl::ArrayBase</base>
    <member kind="typedef">
      <type>std::vector&lt; igtlUint16 &gt;</type>
      <name>IndexType</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a74f29f46b333d4d9b03cccf6bfb25551</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetDimension</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a94ee16114bb9473aa51bbf26dc57c7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetRawArray</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a9295d2c4a293b3f700f638ba283cf0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtlUint64</type>
      <name>GetRawArraySize</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>ace99e83f300659182779a22b0b2e57eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>GetSize</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a7b4e7bcac70ae96c9a4c3a95a8579bdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetValue</name>
      <anchorfile>classigtl_1_1Array.html</anchorfile>
      <anchor>aeab30131ee070379fce71c2df090d589</anchor>
      <arglist>(IndexType index, T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetArray</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>ac8e5e2e47333ac384f1fba2e8eef467d</anchor>
      <arglist>(void *array)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSize</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a8145c4473378908c60c7564631ca2262</anchor>
      <arglist>(IndexType size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetValue</name>
      <anchorfile>classigtl_1_1Array.html</anchorfile>
      <anchor>a0bf91a17ecfdd40be603132925d1bcea</anchor>
      <arglist>(IndexType index, T value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint32</type>
      <name>Get1DIndex</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>ae0bf54462dc811656f05dce5a0a2f2a7</anchor>
      <arglist>(IndexType index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>GetElementSize</name>
      <anchorfile>classigtl_1_1Array.html</anchorfile>
      <anchor>a93a3b13a36657b000deef95bad0d8887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint32</type>
      <name>GetNumberOfElements</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a6ad070400c6021e162d4cbf887487398</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ArrayBase</name>
    <filename>classigtl_1_1ArrayBase.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; igtlUint16 &gt;</type>
      <name>IndexType</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a74f29f46b333d4d9b03cccf6bfb25551</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetDimension</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a94ee16114bb9473aa51bbf26dc57c7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetRawArray</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a9295d2c4a293b3f700f638ba283cf0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtlUint64</type>
      <name>GetRawArraySize</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>ace99e83f300659182779a22b0b2e57eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>GetSize</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a7b4e7bcac70ae96c9a4c3a95a8579bdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetArray</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>ac8e5e2e47333ac384f1fba2e8eef467d</anchor>
      <arglist>(void *array)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSize</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a8145c4473378908c60c7564631ca2262</anchor>
      <arglist>(IndexType size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ArrayBase</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>af93970f84f0b17bc25d9f2e165c81fba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint32</type>
      <name>Get1DIndex</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>ae0bf54462dc811656f05dce5a0a2f2a7</anchor>
      <arglist>(IndexType index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>GetElementSize</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a5aca0846eecab5b25682c504e1aacf1d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint32</type>
      <name>GetNumberOfElements</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>a6ad070400c6021e162d4cbf887487398</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ArrayBase</name>
      <anchorfile>classigtl_1_1ArrayBase.html</anchorfile>
      <anchor>aa28b9738e33cfba50cfe6d8821934d53</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::BindMessage</name>
    <filename>classigtl_1_1BindMessage.html</filename>
    <base>igtl::BindMessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AppendChildMessage</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a09fddb3bd507e57f066c3d052b33b7ba</anchor>
      <arglist>(igtl::MessageBase *child)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetChildMessage</name>
      <anchorfile>classigtl_1_1BindMessage.html</anchorfile>
      <anchor>aa66949571b456816034f2d12cc9626f3</anchor>
      <arglist>(unsigned int i, igtl::MessageBase *child)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetChildMessageType</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>aa14b9383a1e5a910d5f67f3727314dfe</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfChildMessages</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>ae7c45fec0b6e013bb81f8167787e7497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1BindMessage.html</anchorfile>
      <anchor>a8f2a64cad26d78a07b734809c466f6e5</anchor>
      <arglist>(igtl::BindMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a892394538bad3f1c914d16737eec6488</anchor>
      <arglist>(igtl::BindMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1BindMessage.html</anchorfile>
      <anchor>a9e357501516b911bc97eed19b6a12568</anchor>
      <arglist>(igtl::BindMessage, igtl::BindMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>aac1819abaadd1809e108929523847dc0</anchor>
      <arglist>(igtl::BindMessageBase, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a9129b88d8f7dc941a1e6b968cb81b0fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetChildMessage</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a9e7ed2a23e8ab38bf5aa68162f4ba507</anchor>
      <arglist>(unsigned int i, igtl::MessageBase *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetNumberOfChildMessages</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a25e8fbe421e7f0b07aab20538247e557</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>struct igtl::BindMessageBase::_ChildMessageInfo</type>
      <name>ChildMessageInfo</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>ab0d07d1f00e1c74df204594866b559c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BindMessage</name>
      <anchorfile>classigtl_1_1BindMessage.html</anchorfile>
      <anchor>a6df599f52c3cb5c7d00a5b205f48ebd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1BindMessage.html</anchorfile>
      <anchor>ac7fb88e7169de10e3945c1c43b827848</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1BindMessage.html</anchorfile>
      <anchor>a007adb90aaa84473672e1c1d090b7811</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1BindMessage.html</anchorfile>
      <anchor>afc479cf436b26fc23fc739b14b85e19a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~BindMessage</name>
      <anchorfile>classigtl_1_1BindMessage.html</anchorfile>
      <anchor>aa44c38fefb211e63e53d712d8b23b5db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ChildMessageInfo &gt;</type>
      <name>m_ChildMessages</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>abc885fa399cdee5db15927db0d5a7a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::BindMessageBase</name>
    <filename>classigtl_1_1BindMessageBase.html</filename>
    <base>igtl::MessageBase</base>
    <class kind="struct">igtl::BindMessageBase::_ChildMessageInfo</class>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AppendChildMessage</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a09fddb3bd507e57f066c3d052b33b7ba</anchor>
      <arglist>(igtl::MessageBase *child)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetChildMessageType</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>aa14b9383a1e5a910d5f67f3727314dfe</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfChildMessages</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>ae7c45fec0b6e013bb81f8167787e7497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a892394538bad3f1c914d16737eec6488</anchor>
      <arglist>(igtl::BindMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>aac1819abaadd1809e108929523847dc0</anchor>
      <arglist>(igtl::BindMessageBase, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a9129b88d8f7dc941a1e6b968cb81b0fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetChildMessage</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a9e7ed2a23e8ab38bf5aa68162f4ba507</anchor>
      <arglist>(unsigned int i, igtl::MessageBase *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetNumberOfChildMessages</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a25e8fbe421e7f0b07aab20538247e557</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>struct igtl::BindMessageBase::_ChildMessageInfo</type>
      <name>ChildMessageInfo</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>ab0d07d1f00e1c74df204594866b559c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BindMessageBase</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>aa4a108338723f02011b1cd0406c648a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aed868c4613b81bafcca995b70a498897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a676a1e762a1075bbc79885da102fde3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abc10ae9c58764bfaebe9e73297deb0a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~BindMessageBase</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a769e70cfb555a6a54bf2b407c3a0107b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ChildMessageInfo &gt;</type>
      <name>m_ChildMessages</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>abc885fa399cdee5db15927db0d5a7a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::CapabilityMessage</name>
    <filename>classigtl_1_1CapabilityMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfTypes</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>ad1ec072b58fcbd68ce56088521bebb64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetType</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>a92398e3e4bb6e6ff5392d41634e0e6bc</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetTypes</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>a2f6fa5ef6969c4be8ffb27f4a47a1602</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>ac62c89513ccf765abd3a2b1e27b7b757</anchor>
      <arglist>(igtl::CapabilityMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>ab5bb01a4900e8eddf3ca614cffdb00fd</anchor>
      <arglist>(igtl::CapabilityMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNumberOfTypes</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>aaf92dec44188d3e000dfc163077cc345</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetType</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>ae952945990d9680a7dfea4fbe9a1985d</anchor>
      <arglist>(int id, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTypes</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>adc9c377fdf4960f21b0b496615807416</anchor>
      <arglist>(std::vector&lt; std::string &gt; types)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>a22657e4617d825bd7865a6f6d3628531</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CapabilityMessage</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>a9ec3663e92a2dbf50434242cfd6c790f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>ade20c78ac8828210e17a3fe7255d1858</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>a55375e4951c691625ff27b50c34e76e8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~CapabilityMessage</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>a08c9e8ff11d74218f0772a3c0a1d3259</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>m_TypeNames</name>
      <anchorfile>classigtl_1_1CapabilityMessage.html</anchorfile>
      <anchor>af8d490705da063f631c1546dae703b4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ClientDest</name>
    <filename>classigtl_1_1ClientDest.html</filename>
    <member kind="function">
      <type></type>
      <name>ClientDest</name>
      <anchorfile>classigtl_1_1ClientDest.html</anchorfile>
      <anchor>a3bb35b638de701e4db1fac5f8d26f7b7</anchor>
      <arglist>(const char *add, igtl_uint16 port, unsigned int clientID)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char *</type>
      <name>address</name>
      <anchorfile>classigtl_1_1ClientDest.html</anchorfile>
      <anchor>a78e27d4db2fb2d24415f7bee61ea2515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>clientID</name>
      <anchorfile>classigtl_1_1ClientDest.html</anchorfile>
      <anchor>af1eebee90da60ed229febaa4ccf45f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>portNum</name>
      <anchorfile>classigtl_1_1ClientDest.html</anchorfile>
      <anchor>af1295009d2783ed1a62ff723fb7e9843</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ClientSocket</name>
    <filename>classigtl_1_1ClientSocket.html</filename>
    <base>igtl::Socket</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aa36b49668d96c4e0a31bef60d1338697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtlTypeMacro(igtl::ClientSocket, igtl::Socket) igtlNewMacro(igtl int</type>
      <name>ConnectToServer</name>
      <anchorfile>classigtl_1_1ClientSocket.html</anchorfile>
      <anchor>a7fbe1c79254b30586e7469af05d51497</anchor>
      <arglist>(const char *hostname, int port, bool logErrorIfServerConnectionFailed=true)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetConnected</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>abb9b6a706b03cf3a7678c193cf66e0c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSocketAddressAndPort</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>ab5f6e8238c65f47b28858888d49f6fa7</anchor>
      <arglist>(std::string &amp;address, int &amp;port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint64</type>
      <name>Receive</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a92d9fad46d78bf4144eb26ef3c824785</anchor>
      <arglist>(void *data, igtlUint64 length, bool &amp;timeout, int readFully=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Send</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a963124bab8d7a96c1ab6a21e09811273</anchor>
      <arglist>(const void *data, igtlUint64 length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetReceiveBlocking</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>acc83d42a5d3d2e92e4c5eeff34e2fae2</anchor>
      <arglist>(int sw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetReceiveTimeout</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a5545d2c2b479bc53fc1e61826bd7d1fb</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSendBlocking</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>af76c90b7dab7cfb5c0466712990d7934</anchor>
      <arglist>(int sw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSendTimeout</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>abca1c843ff2fa427981b32f3461c632a</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeout</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a2a7e1892a9aaece95facc30236e03ba8</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Skip</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a6d6e61d7d25c019630c1dc5ef7a50511</anchor>
      <arglist>(igtlUint64 length, int skipFully=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Accept</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aedb40f1ac7fb0646f769e12d65dd5c93</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BindSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aa72c6517455de67590e313a0088ca9e6</anchor>
      <arglist>(int socketdescriptor, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClientSocket</name>
      <anchorfile>classigtl_1_1ClientSocket.html</anchorfile>
      <anchor>a7f9c51206738e05757ed5557682b0dab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CloseSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a337248fd9c6cf4c92f24a1f081e552a0</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Connect</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a012c002e9204e7aaa880466abc4977b6</anchor>
      <arglist>(int socketdescriptor, const char *hostname, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreateSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a024f603e293f57f5eabcd5eb08f35363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetPort</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aff88760cd0c238eeb077e901deb7848e</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>igtlGetMacro</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>ad6ec7041f1169f1a106c0b57631f5922</anchor>
      <arglist>(SocketDescriptor, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Listen</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a658847fd28275fec1d29d12ad1d52d7e</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1ClientSocket.html</anchorfile>
      <anchor>a6815955fb25014367c1c66b5d76acf99</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SelectSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>ac0c19c70fa5478612883947ee2d182d2</anchor>
      <arglist>(int socketdescriptor, unsigned long msec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ClientSocket</name>
      <anchorfile>classigtl_1_1ClientSocket.html</anchorfile>
      <anchor>a5ad7dbc26c568faa7b6d58c8e2a40b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>SelectSockets</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>afde6fab802405106ea100d565e4700bb</anchor>
      <arglist>(const int *sockets_to_select, int size, unsigned long msec, int *selected_index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_SocketDescriptor</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a101b564ff0ec89fa3f287da2ef373e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ServerSocket</name>
      <anchorfile>classigtl_1_1ClientSocket.html</anchorfile>
      <anchor>a11a8bb11feaafab939278a8285afa567</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ColorTableMessage</name>
    <filename>classigtl_1_1ColorTableMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>INDEX_UINT8</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ad669ecd2d46142e88e2211187b24439ea8023eb28b4567ee57d4f839aa6ac8ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INDEX_UINT16</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ad669ecd2d46142e88e2211187b24439ea168909e866a13ae433a42485e42af583</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAP_UINT8</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ad669ecd2d46142e88e2211187b24439ea089c964d292af7ddaa1663fb640d09ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAP_UINT16</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ad669ecd2d46142e88e2211187b24439eabf76cc1eaefec1f9b6461d15d2dc3757</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAP_RGB</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ad669ecd2d46142e88e2211187b24439ea309ea73cc1ac7a4c947a969bc1c8208f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INDEX_UINT16</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ad669ecd2d46142e88e2211187b24439ea168909e866a13ae433a42485e42af583</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INDEX_UINT8</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ad669ecd2d46142e88e2211187b24439ea8023eb28b4567ee57d4f839aa6ac8ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAP_RGB</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ad669ecd2d46142e88e2211187b24439ea309ea73cc1ac7a4c947a969bc1c8208f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAP_UINT16</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ad669ecd2d46142e88e2211187b24439eabf76cc1eaefec1f9b6461d15d2dc3757</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAP_UINT8</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ad669ecd2d46142e88e2211187b24439ea089c964d292af7ddaa1663fb640d09ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateTable</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>a136a72c4084a692697658cd615d89701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetColorTableSize</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>a87b0684f4e2128f10cb4a105ed6bb150</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetIndexType</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>aa9e9d688413d26fe77674fb276389a05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetMapType</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>a98b198d7dc8a5a26a114fbf2288970fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetTablePointer</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>a1f378f908a75bdf9c0ccf1997f6c530c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIndexType</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>a870996a2c2c36af594cf6dcea9964b09</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIndexTypeToUint16</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>a8d55f27450b80643a81c4d33475908e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIndexTypeToUint8</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ab6ca80495e5faefb1174379a2cb9ccdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMapType</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>aa4191778513c1d359261b7e59414e7f3</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMapTypeToUint16</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ac04ffeb266b20202e70fc11eaf9742a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMapTypeToUint8</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>a5247436c9ca9120e86b0e7f9ff01c27c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>aa35270705b561be19360344852896dbd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ColorTableMessage</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>aa70ce6e19c98b5e610757784a046a39a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>a82f40468c975fcf4aa826c3fb4b9dedf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>a95d4fe93a80e5dcd0d8c11ec74e5e8d9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ColorTableMessage</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>a9bfc385b2f0b1eb92b1719fec9f451ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>indexType</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>ab0cf32d9bf2d13f2150062a0d43f2855</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_ColorTable</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>a9f98a0f3642bf800d06e1eb9a1e30c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_ColorTableHeader</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>acfd8ce240f682f0460804405f13c22ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mapType</name>
      <anchorfile>classigtl_1_1ColorTableMessage.html</anchorfile>
      <anchor>a3f4a8bf692d32fc6dfbfd9144504b83e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::CommandMessage</name>
    <filename>classigtl_1_1CommandMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetCommandContent</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a59a97a8048d72f80e8cc7dbe2ae431e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint32</type>
      <name>GetCommandContentLength</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a4c609f1888ad04dd8dbf7caad98b2f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint32</type>
      <name>GetCommandId</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>abf766ca78dea065e8cf507becf31363b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetCommandName</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a6a34fa92c1bd06073f9ef26382604fca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint16</type>
      <name>GetContentEncoding</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a290c4ccb48e273b89f4ea33c93f615d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCommandContent</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a1f02dbc3e1cc7285645d82d1f37d23ad</anchor>
      <arglist>(const char *string)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCommandContent</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>ac39ddf6b03f93ecc7a8a45f396b10331</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCommandId</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a9e6167ac9b53e5332bc1fa1bcfcb120b</anchor>
      <arglist>(igtlUint32 aId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCommandName</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>ac4fbe34b2a05c705b2845a8afc0c37a2</anchor>
      <arglist>(const char *aCommandName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCommandName</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a7d1ee75d57a89296f4f16da7c4bffdcc</anchor>
      <arglist>(const std::string &amp;aCommandName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetContentEncoding</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a62feb989a4b585818a6d9a41b36fce09</anchor>
      <arglist>(igtlUint16 enc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>validEncodings</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>aea22cc8358bf3529404ccd64c1687dfc</anchor>
      <arglist>[257]</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>ab10945132792ecafc743f647f24722ea</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CommandMessage</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>aff9adfe190d337d9c6bb9193fc68ec18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a0494c2a3ad3430e45cd94b34af483745</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>aaef5e1b5fc3c38a8721bc8e0c4ce0033</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~CommandMessage</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>add9624dee0cf8842d6d57de1328cd9b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Command</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a2754da60750c752eeef9c074e13930b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint32</type>
      <name>m_CommandId</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a7984025aaa66e008b1d97a951bb31f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_CommandName</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>afa68f8c55412eef313b4096b1ebbd3f8</anchor>
      <arglist>[IGTL_COMMAND_NAME_SIZE]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint16</type>
      <name>m_Encoding</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a8b98317ec6e58f76aa64182b94b3e76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ConditionVariable</name>
    <filename>classigtl_1_1ConditionVariable.html</filename>
    <base>igtl::LightObject</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Broadcast</name>
      <anchorfile>classigtl_1_1ConditionVariable.html</anchorfile>
      <anchor>abf1dd0bd1281ba6e0e27b293be1731bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad9eb7a0daeedece415de23d8fe7fb2f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1ConditionVariable.html</anchorfile>
      <anchor>a2ec3144327fb2f039bbfac6f979c560c</anchor>
      <arglist>(Self)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1ConditionVariable.html</anchorfile>
      <anchor>a5816904b14a5140049f31ffb19a60410</anchor>
      <arglist>(ConditionVariable, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a3d6cb85cb76122f9face9416dc53d766</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a625027225e277ccfe4c57e97c950f36a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Signal</name>
      <anchorfile>classigtl_1_1ConditionVariable.html</anchorfile>
      <anchor>a1060e56455786c62898a1484fad85090</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a78e0b6f41ea3835d000a794008ce80b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Wait</name>
      <anchorfile>classigtl_1_1ConditionVariable.html</anchorfile>
      <anchor>aaf734582a8306f849e3096c0f315f8c4</anchor>
      <arglist>(SimpleMutexLock *mutex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Wait</name>
      <anchorfile>classigtl_1_1ConditionVariable.html</anchorfile>
      <anchor>a8c11e60ab2c454f5a4fbc6d6f256a460</anchor>
      <arglist>(SimpleMutexLock *mutex, igtl_uint32 waitTime)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a0945ed18193abdae32a0498dae0104bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConditionVariable</name>
      <anchorfile>classigtl_1_1ConditionVariable.html</anchorfile>
      <anchor>ae0f89c0b87bebf735e24247a25543af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6302016f8a7f5b7736e2c96d5be26fad</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ConditionVariable</name>
      <anchorfile>classigtl_1_1ConditionVariable.html</anchorfile>
      <anchor>a32c2a24461d4b851df0261860a96df42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::CreateObjectFunction</name>
    <filename>classigtl_1_1CreateObjectFunction.html</filename>
    <templarg>class T</templarg>
    <base>igtl::CreateObjectFunctionBase</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateObject</name>
      <anchorfile>classigtl_1_1CreateObjectFunction.html</anchorfile>
      <anchor>a6a7e097deecffd86608e582f82be1cc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlFactorylessNewMacro</name>
      <anchorfile>classigtl_1_1CreateObjectFunction.html</anchorfile>
      <anchor>a83595a9ef4023be17fd6adc4cd09fe3c</anchor>
      <arglist>(Self)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1CreateObjectFunction.html</anchorfile>
      <anchor>a513681a1a43c8b485ecf110a9585b031</anchor>
      <arglist>(CreateObjectFunction, CreateObjectFunctionBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1CreateObjectFunctionBase.html</anchorfile>
      <anchor>a942e37b2b55283193e041c9faac8c71b</anchor>
      <arglist>(CreateObjectFunctionBase, Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CreateObjectFunction</name>
      <anchorfile>classigtl_1_1CreateObjectFunction.html</anchorfile>
      <anchor>ab1398257242ab420a58b5d7d09f536d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~CreateObjectFunction</name>
      <anchorfile>classigtl_1_1CreateObjectFunction.html</anchorfile>
      <anchor>a98bf31f98b867cfc42f6e7471eb45aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::CreateObjectFunctionBase</name>
    <filename>classigtl_1_1CreateObjectFunctionBase.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SmartPointer&lt; LightObject &gt;</type>
      <name>CreateObject</name>
      <anchorfile>classigtl_1_1CreateObjectFunctionBase.html</anchorfile>
      <anchor>a7a4ef6323cf9b25556ba24e125b08c11</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1CreateObjectFunctionBase.html</anchorfile>
      <anchor>a942e37b2b55283193e041c9faac8c71b</anchor>
      <arglist>(CreateObjectFunctionBase, Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CreateObjectFunctionBase</name>
      <anchorfile>classigtl_1_1CreateObjectFunctionBase.html</anchorfile>
      <anchor>abf6c7b9edf9227b4b32a50a917804caf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~CreateObjectFunctionBase</name>
      <anchorfile>classigtl_1_1CreateObjectFunctionBase.html</anchorfile>
      <anchor>a24c013c690b863270be5d487bdeb7116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::VideoStreamIGTLinkServer::encodedFrame</name>
    <filename>classigtl_1_1VideoStreamIGTLinkServer_1_1encodedFrame.html</filename>
    <member kind="function">
      <type></type>
      <name>encodedFrame</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer_1_1encodedFrame.html</anchorfile>
      <anchor>a2bd0a2d26122be6a4fa325b85da808ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>encodedFrame</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer_1_1encodedFrame.html</anchorfile>
      <anchor>a8f63c9119b2e9d1a96761b9a8d024e29</anchor>
      <arglist>(encodedFrame const &amp;anotherFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~encodedFrame</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer_1_1encodedFrame.html</anchorfile>
      <anchor>aa518a830c0e5d27cdc8560544d25787c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>messageDataLength</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer_1_1encodedFrame.html</anchorfile>
      <anchor>a6fabde29308d60b9d83f9130ed74939f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>messagePackPointer</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer_1_1encodedFrame.html</anchorfile>
      <anchor>af410be9d7b443bfa44f0b776c5627136</anchor>
      <arglist>[RTP_PAYLOAD_LENGTH *(16384-2)]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::FastMutexLock</name>
    <filename>classigtl_1_1FastMutexLock.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1FastMutexLock.html</anchorfile>
      <anchor>a71db5b3f1a02acb97023cd318e455bdc</anchor>
      <arglist>(Self)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1FastMutexLock.html</anchorfile>
      <anchor>a2ad548f67fb1f0076d90132276883f3a</anchor>
      <arglist>(FastMutexLock, Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Lock</name>
      <anchorfile>classigtl_1_1FastMutexLock.html</anchorfile>
      <anchor>a1c708023822873c81408f68962936fba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Unlock</name>
      <anchorfile>classigtl_1_1FastMutexLock.html</anchorfile>
      <anchor>af643725f26ecceed04f69369f360adee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FastMutexLock</name>
      <anchorfile>classigtl_1_1FastMutexLock.html</anchorfile>
      <anchor>a7dd889399572505725538ba1a8ac0b3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1FastMutexLock.html</anchorfile>
      <anchor>aabfe795a813affd7333a7d9adaaa79b9</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~FastMutexLock</name>
      <anchorfile>classigtl_1_1FastMutexLock.html</anchorfile>
      <anchor>a911d7edee4a35eb30eaa109cd26f9e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_SimpleFastMutexLock</name>
      <anchorfile>classigtl_1_1FastMutexLock.html</anchorfile>
      <anchor>a1557f39e3ab9a1bc455a4ce135c343d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GeneralSocket</name>
    <filename>classigtl_1_1GeneralSocket.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a76192880d0fcf1f00e5300ae4973520f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetConnected</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a7ea24199d8dde270ac1810276cd960f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSocketAddressAndPort</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ab0bd35bd2d94b1c316deb1d2e4c88458</anchor>
      <arglist>(std::string &amp;address, int &amp;port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Receive</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>abf19c4f08cdf1426fc34e7c5bedd5e42</anchor>
      <arglist>(void *data, int length, int readFully=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReceiveUDP</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aba5a7815b3cede7888ba73a7aa314e90</anchor>
      <arglist>(void *data, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Send</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a307e4a7fd7058882d7611aeac485b045</anchor>
      <arglist>(const void *data, int length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SendUDP</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a5438fa6d22b62a874cb70b23fc1f14e9</anchor>
      <arglist>(const void *data, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetIPAddress</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aae8d394c4082f6fd6e4877a686c3bc89</anchor>
      <arglist>(const char *ip)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPortNumber</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a34fc4e38c183332d9dccf8f55ccb7b6b</anchor>
      <arglist>(igtl_uint16 port)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetReceiveBlocking</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a7d2f8d80eb0aed992af7665fab9424a2</anchor>
      <arglist>(int sw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetReceiveTimeout</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a2815bc6c9ce43b1792663985dc0a17b4</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSendBlocking</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a2907603a6cec25943e595ed965aad1fc</anchor>
      <arglist>(int sw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSendTimeout</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a1c035254827b6af356768c2b93f06a4e</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeout</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ad3417ec04636aa9b38eb8894a021e7ed</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Skip</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>afb08857670b95eb79d03723e552920e5</anchor>
      <arglist>(int length, int skipFully=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Accept</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ae2b3217b066a294b85e2fb946b4438af</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BindSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a953a569f2cd5353e25e9fa28ef4d12b4</anchor>
      <arglist>(int socketdescriptor, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CloseSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ac4b2edd5181186efc7b373f26d721f77</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Connect</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a47b87d8a5e8b68caba0eb8c87ef254b9</anchor>
      <arglist>(int socketdescriptor, const char *hostname, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreateSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>afde9b835d7bc35cdde98b97c8ed412cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreateUDPClientSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a1217093e8dbcef0b41bd156d7205afb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreateUDPServerSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a486fd9b8c5b5a0f88f50f011e541d15c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GeneralSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aaab7380ffcd6ab67a78a3f8451f2ee74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetPort</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aa261747bb936a1d20849df580fd53a23</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>igtlGetMacro</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aa1019fbbfc4ec54ce2fa83283382cdbf</anchor>
      <arglist>(SocketDescriptor, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Listen</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a42d2588cdd7be34419767476e1ae0f21</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ac08e31e7229dfa292e2511ceeab93749</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SelectSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a8b29a16f5c7b590fa302064908791f4c</anchor>
      <arglist>(int socketdescriptor, unsigned long msec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GeneralSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a217b2d0b42c2e4c2bd18bb77f78981a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>SelectSockets</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a43217e7cc3ca9ae1b36033030a6c0e71</anchor>
      <arglist>(const int *sockets_to_select, int size, unsigned long msec, int *selected_index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_SocketDescriptor</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>af7a18e868afb012030db49ae21738796</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>vtkSocketCollection</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a4e3b82b42752248c8d22cf7842f683bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GenericDecoder</name>
    <filename>classigtl_1_1GenericDecoder.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DecodeBitStreamIntoFrame</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a0755e045fcb26bce381188dc9bf3a074</anchor>
      <arglist>(unsigned char *bitStream, igtl_uint8 *outputFrame, igtl_uint32 iDimensions[], igtl_uint64 &amp;iStreamSize)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>DecodeVideoMSGIntoSingleFrame</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ad69d3f08ee54e51ff4beb9916efc621e</anchor>
      <arglist>(igtl::VideoMessage *videoMessage, SourcePicture *decodedPic)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericDecoder</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a7e05e837c301f2a59b5527f8eeeca871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl_int64</type>
      <name>getCurrentTime</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ae527f8cd6beedcd925c3507e106c05bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a1af1d4990ac1b37480e303e06f02dfa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetIsGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a70337d5a712b95e02c20d27af27b1c83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ad8370b82298fa02e836c3ca96a242855</anchor>
      <arglist>(igtl::GenericDecoder, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ab8434315e149e2308ebf44923c0a801c</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetIsGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a5b0adc21d495e8b401b45eda0abba426</anchor>
      <arglist>(bool grayImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackUncompressedData</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a0cdd23e9a49e340341a4148c60703f16</anchor>
      <arglist>(igtl::VideoMessage *videoMessage, SourcePicture *decodedPic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericDecoder</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a30eb08c7edc3a963153126b0dfa6853a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ConvertYUVToGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a232a346fe06f6fd10507b88238fd7694</anchor>
      <arglist>(igtl_uint8 *YUV420Frame, igtl_uint8 *GrayFrame, int iHeight, int iWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ConvertYUVToRGB</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ae3fe0c17e14e40fecdd36075688b5c0a</anchor>
      <arglist>(igtl_uint8 *YUVFrame, igtl_uint8 *RGBFrame, int iHeight, int iWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Write2File</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a8e8c0f586c6e8713e6ef0898c1d93a11</anchor>
      <arglist>(FILE *pFp, unsigned char *pData[], igtl_uint32 iDimensions[], igtl_uint32 iStride[])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ComposeByteSteam</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a96119a61a32eda3d7c51b8b1c9cbd123</anchor>
      <arglist>(igtl_uint8 **inputData, int dimension[2], int iStride[2], igtl_uint8 *outputFrame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>deviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ab8f8222fe0f2b68f036aef9e3a5f96d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a956de3fe095a963187f2f390e8a2988c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GenericEncoder</name>
    <filename>classigtl_1_1GenericEncoder.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ConvertToLocalImageFormat</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a2075a78f74ff69a7c5fe2341ce16d059</anchor>
      <arglist>(SourcePicture *pSrcPic)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>EncodeSingleFrameIntoVideoMSG</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a588fb6abd55bb5e031571670c9c2063b</anchor>
      <arglist>(SourcePicture *pSrcPic, igtl::VideoMessage *videoMessage, bool isGrayImage=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>FillSpecificParameters</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a935ad9c1fe856a7a34781c9085ba6cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericEncoder</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a507bdd8f3dfd0e6a384078d5b4444797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInitializationStatus</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ad78caf307fd44c4654b9df04a7918585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetLosslessLink</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a5d938933566220c3d0e4ad80ad7725ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>GetPicHeight</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a6a2c7ee59a8e1e514ed5b740b0e02685</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>GetPicWidth</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ac378d53023ba430ba55ba1debe1a08b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetVideoFrameType</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>afc09caed262be2ad951e32ebf24f43cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ab008518cb4d43607db39821a3cac289f</anchor>
      <arglist>(GenericEncoder, Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>InitializeEncoder</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a655a32e8e14a681b3f4bd66372e00ae4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PackUncompressedData</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ab17ef3b62aeaeaf26b5f47b1b7f8fad6</anchor>
      <arglist>(SourcePicture *pSrcPic, igtl::VideoMessage *videoMessage, bool isGrayImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetConfigurationFile</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a3062d79523e3fe4dfd59150413a525ee</anchor>
      <arglist>(std::string configFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetKeyFrameDistance</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>abc444dfe1fbff10f33c476a99f8898d0</anchor>
      <arglist>(int frameNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetLosslessLink</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a1e85d41d1fe9191e7b6511a36e8fac09</anchor>
      <arglist>(bool linkMethod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetPicWidthAndHeight</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a2ec61909b763c845e1d056e44ee79bd8</anchor>
      <arglist>(unsigned int Width, unsigned int Height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetQP</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a28d11037bffd9c677c6a5e5e1d952ae9</anchor>
      <arglist>(int maxQP, int minQP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetRCMode</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a910655ec940f60f71b4f5a965316883e</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetRCTargetBitRate</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a1c2ab2b47329a63ce3e6ecb21e7d5055</anchor>
      <arglist>(unsigned int bitRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetSpeed</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a1495d6afd0d3d082f598debdb7d14486</anchor>
      <arglist>(int speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericEncoder</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a33259b85a3d41e70d4d9a53fc1e57d5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ConvertRGBToYUV</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>aaf55abdb6605c665e43bf2c6c8a305ce</anchor>
      <arglist>(igtlUint8 *rgb, igtlUint8 *destination, unsigned int width, unsigned int height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codecSpeed</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a12ef10929fcbea81ce6a637be25fb26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>configFile</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a184f04a12c55c16b9e1c87c09475d0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReadConfigFile</type>
      <name>cRdCfg</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a91bfe8794607708b2cabf2397628d582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>encodedFrameType</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a6db666c31e29284f9649a599afc0ec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>initializationDone</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a861dc3c6546c78ce628c08163fec3424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isLossLessLink</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a14757b9da47b57ba6c02bccbc76deb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>picHeight</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a021c10e506464282da7aa9622e4ec145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>picWidth</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a1999241652600dc3b15e3400d18806b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GetBindMessage</name>
    <filename>classigtl_1_1GetBindMessage.html</filename>
    <base>igtl::BindMessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AppendChildMessage</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a09fddb3bd507e57f066c3d052b33b7ba</anchor>
      <arglist>(igtl::MessageBase *child)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AppendChildMessage</name>
      <anchorfile>classigtl_1_1GetBindMessage.html</anchorfile>
      <anchor>ac9c2bd939c5d84f6d662c3bdd4b96a9a</anchor>
      <arglist>(const char *type, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetChildMessageType</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>aa14b9383a1e5a910d5f67f3727314dfe</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfChildMessages</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>ae7c45fec0b6e013bb81f8167787e7497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a892394538bad3f1c914d16737eec6488</anchor>
      <arglist>(igtl::BindMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetBindMessage.html</anchorfile>
      <anchor>a6cb669b6cbedcda0c0c05e015d00fceb</anchor>
      <arglist>(igtl::GetBindMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>aac1819abaadd1809e108929523847dc0</anchor>
      <arglist>(igtl::BindMessageBase, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetBindMessage.html</anchorfile>
      <anchor>ac2d53fa1d1b1d4469d485277fe6ce572</anchor>
      <arglist>(igtl::GetBindMessage, igtl::BindMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a9129b88d8f7dc941a1e6b968cb81b0fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetChildMessage</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a9e7ed2a23e8ab38bf5aa68162f4ba507</anchor>
      <arglist>(unsigned int i, igtl::MessageBase *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetNumberOfChildMessages</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a25e8fbe421e7f0b07aab20538247e557</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>struct igtl::BindMessageBase::_ChildMessageInfo</type>
      <name>ChildMessageInfo</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>ab0d07d1f00e1c74df204594866b559c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1GetBindMessage.html</anchorfile>
      <anchor>ade8c24091716e814c28d9cf86a670614</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GetBindMessage</name>
      <anchorfile>classigtl_1_1GetBindMessage.html</anchorfile>
      <anchor>a5ad0a8eb2f377f50245a574a79e4eed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1GetBindMessage.html</anchorfile>
      <anchor>af1a1ac8e4919be3acfca1ec5756c8b51</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1GetBindMessage.html</anchorfile>
      <anchor>aa97af5506142b7ccdcd8328c32f859a3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GetBindMessage</name>
      <anchorfile>classigtl_1_1GetBindMessage.html</anchorfile>
      <anchor>a30012de5c4d5e04d5252cdc2d395cf86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ChildMessageInfo &gt;</type>
      <name>m_ChildMessages</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>abc885fa399cdee5db15927db0d5a7a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GetColorTableMessage</name>
    <filename>classigtl_1_1GetColorTableMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetColorTableMessage.html</anchorfile>
      <anchor>a02c2886085ef717be0f678ea56f0053a</anchor>
      <arglist>(igtl::GetColorTableMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetColorTableMessage.html</anchorfile>
      <anchor>afe1b74618240cf4dbfb3a66a32cd7216</anchor>
      <arglist>(igtl::GetColorTableMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1GetColorTableMessage.html</anchorfile>
      <anchor>addab76f50a1289d9953cee5465a17864</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GetColorTableMessage</name>
      <anchorfile>classigtl_1_1GetColorTableMessage.html</anchorfile>
      <anchor>aaea2779d31164cb0877d8e201a570a2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1GetColorTableMessage.html</anchorfile>
      <anchor>ae5fdb6f21c52f71202a00b4da041d3cb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1GetColorTableMessage.html</anchorfile>
      <anchor>a9d97a946e4271947251f11df1012bc9c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GetColorTableMessage</name>
      <anchorfile>classigtl_1_1GetColorTableMessage.html</anchorfile>
      <anchor>ae4bec4aab4df7994b446afd8a5b73ebb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GetImageMessage</name>
    <filename>classigtl_1_1GetImageMessage.html</filename>
    <base>igtl::HeaderOnlyMessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetImageMessage.html</anchorfile>
      <anchor>ae2d7cbf8ed85e6ebe5b886488c230964</anchor>
      <arglist>(igtl::GetImageMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a2490de099ea3804d81264174e8ade61a</anchor>
      <arglist>(igtl::HeaderOnlyMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetImageMessage.html</anchorfile>
      <anchor>a7380e988b50482b518fd5b207ef83bf0</anchor>
      <arglist>(igtl::GetImageMessage, igtl::HeaderOnlyMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a4ea157687cffa9ddcc8336cc52fde7be</anchor>
      <arglist>(igtl::HeaderOnlyMessageBase, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>ac5a60869cd7888329b8211b35e10f3e0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GetImageMessage</name>
      <anchorfile>classigtl_1_1GetImageMessage.html</anchorfile>
      <anchor>a4eac01e35212e433cdf14a3f80b89366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a062c3f706b51d5b68295d188c1946022</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a1cbb666248fc4bd80244952225e04a6d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GetImageMessage</name>
      <anchorfile>classigtl_1_1GetImageMessage.html</anchorfile>
      <anchor>a09862a617438448efd80f49a9e5136ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GetImageMessage2</name>
    <filename>classigtl_1_1GetImageMessage2.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetImageMessage2.html</anchorfile>
      <anchor>a2618db94f0d70d2501423ffd63b36b1d</anchor>
      <arglist>(igtl::GetImageMessage2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetImageMessage2.html</anchorfile>
      <anchor>ad732090fb898c65fbbef0f0087cfff67</anchor>
      <arglist>(igtl::GetImageMessage2, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1GetImageMessage2.html</anchorfile>
      <anchor>abe70ee9e3d707e7e89253b9cde3ff097</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GetImageMessage2</name>
      <anchorfile>classigtl_1_1GetImageMessage2.html</anchorfile>
      <anchor>aa5b3519f482a128dfbe6aba4855d87fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1GetImageMessage2.html</anchorfile>
      <anchor>a8218b0a2065a20b2bcf9db04933bf703</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1GetImageMessage2.html</anchorfile>
      <anchor>abc3a4f1676cb464e8afb766eafdc4675</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GetImageMessage2</name>
      <anchorfile>classigtl_1_1GetImageMessage2.html</anchorfile>
      <anchor>aee92a676f98dd3964ba4fc19edb2a432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GetImageMetaMessage</name>
    <filename>classigtl_1_1GetImageMetaMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetImageMetaMessage.html</anchorfile>
      <anchor>a6b06c48654c4335416a7eb3d7c89b53a</anchor>
      <arglist>(igtl::GetImageMetaMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetImageMetaMessage.html</anchorfile>
      <anchor>a4db068c7baf898a9397c8db418fc723b</anchor>
      <arglist>(igtl::GetImageMetaMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1GetImageMetaMessage.html</anchorfile>
      <anchor>ad084843e56ce03f1e6b8ef2e883e8059</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GetImageMetaMessage</name>
      <anchorfile>classigtl_1_1GetImageMetaMessage.html</anchorfile>
      <anchor>a3ebb6ac679364db264a081f15e681fdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1GetImageMetaMessage.html</anchorfile>
      <anchor>a93bc471817b6fa153a49a76ba49f003e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1GetImageMetaMessage.html</anchorfile>
      <anchor>a0dd242ba19a10255fa66e4b24e4f83db</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GetImageMetaMessage</name>
      <anchorfile>classigtl_1_1GetImageMetaMessage.html</anchorfile>
      <anchor>a5f88fd6a650a1bfad528157d6ea468cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GetLabelMetaMessage</name>
    <filename>classigtl_1_1GetLabelMetaMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetLabelMetaMessage.html</anchorfile>
      <anchor>a5f4da6316d5987df0e7069798a7f9919</anchor>
      <arglist>(igtl::GetLabelMetaMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetLabelMetaMessage.html</anchorfile>
      <anchor>a95501ba7313ff669e2c773085e55d515</anchor>
      <arglist>(igtl::GetLabelMetaMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1GetLabelMetaMessage.html</anchorfile>
      <anchor>a65124f4d7ad56d89f84e89a1f51b3696</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GetLabelMetaMessage</name>
      <anchorfile>classigtl_1_1GetLabelMetaMessage.html</anchorfile>
      <anchor>ad975649870ccb7081984ec55343c32c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1GetLabelMetaMessage.html</anchorfile>
      <anchor>af9352fa9a783d66e66a523813e7f89f5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1GetLabelMetaMessage.html</anchorfile>
      <anchor>ab06161b8fd02e2426d9ece0ebf25d0f4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GetLabelMetaMessage</name>
      <anchorfile>classigtl_1_1GetLabelMetaMessage.html</anchorfile>
      <anchor>a3d4522d842d0c673bbb99bd649f5aaef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GetPointMessage</name>
    <filename>classigtl_1_1GetPointMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetPointMessage.html</anchorfile>
      <anchor>a7cb89b6dda980af57b4aa715f46349d2</anchor>
      <arglist>(igtl::GetPointMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetPointMessage.html</anchorfile>
      <anchor>a506240638aafb075c8c6b29707e566ab</anchor>
      <arglist>(igtl::GetPointMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1GetPointMessage.html</anchorfile>
      <anchor>a5c068feaae499be02c45b4c931eb6f43</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GetPointMessage</name>
      <anchorfile>classigtl_1_1GetPointMessage.html</anchorfile>
      <anchor>ace3608e4b5a75d9395afe2cd70ed1f30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1GetPointMessage.html</anchorfile>
      <anchor>a3b8bcbe252d47665e52aff6ac9ffe1e1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1GetPointMessage.html</anchorfile>
      <anchor>ac94078a6ed37ab5933efb6b4c88eeb64</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GetPointMessage</name>
      <anchorfile>classigtl_1_1GetPointMessage.html</anchorfile>
      <anchor>a523e02f13eb20fbcaf32c87f16c0c1f7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GetPolyDataMessage</name>
    <filename>classigtl_1_1GetPolyDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetPolyDataMessage.html</anchorfile>
      <anchor>a3c4afaefe1d5d5f6b23ea24455005ab6</anchor>
      <arglist>(igtl::GetPolyDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetPolyDataMessage.html</anchorfile>
      <anchor>a99b16a8040d0e755323831f2fc84dcd1</anchor>
      <arglist>(igtl::GetPolyDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1GetPolyDataMessage.html</anchorfile>
      <anchor>a542b38449b3136a083ded18f3ee7751f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GetPolyDataMessage</name>
      <anchorfile>classigtl_1_1GetPolyDataMessage.html</anchorfile>
      <anchor>a07261a14e9a3b25b83925b64e3a1f528</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1GetPolyDataMessage.html</anchorfile>
      <anchor>a0ac31f850f6a3d4258e8d2a2aecdbdb2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1GetPolyDataMessage.html</anchorfile>
      <anchor>af3f03531c731cba3a251c638006a8941</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GetPolyDataMessage</name>
      <anchorfile>classigtl_1_1GetPolyDataMessage.html</anchorfile>
      <anchor>a1109457e45e15f4874976ce4fe3443f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GetStatusMessage</name>
    <filename>classigtl_1_1GetStatusMessage.html</filename>
    <base>igtl::HeaderOnlyMessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetStatusMessage.html</anchorfile>
      <anchor>ac95ceadde070dbc2799bdb732e54fb4f</anchor>
      <arglist>(igtl::GetStatusMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a2490de099ea3804d81264174e8ade61a</anchor>
      <arglist>(igtl::HeaderOnlyMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetStatusMessage.html</anchorfile>
      <anchor>acf60f42f71450d276210d2fecfd4b4c4</anchor>
      <arglist>(igtl::GetStatusMessage, igtl::HeaderOnlyMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a4ea157687cffa9ddcc8336cc52fde7be</anchor>
      <arglist>(igtl::HeaderOnlyMessageBase, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>ac5a60869cd7888329b8211b35e10f3e0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GetStatusMessage</name>
      <anchorfile>classigtl_1_1GetStatusMessage.html</anchorfile>
      <anchor>a866dc0cbfa437e9485d020a4cf5c5bab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a062c3f706b51d5b68295d188c1946022</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a1cbb666248fc4bd80244952225e04a6d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GetStatusMessage</name>
      <anchorfile>classigtl_1_1GetStatusMessage.html</anchorfile>
      <anchor>a3ca7a7b0bf24a610fe9f989e8252766f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GetTrajectoryMessage</name>
    <filename>classigtl_1_1GetTrajectoryMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetTrajectoryMessage.html</anchorfile>
      <anchor>ad2cb6e8430cfa1b938b591548d944170</anchor>
      <arglist>(igtl::GetTrajectoryMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetTrajectoryMessage.html</anchorfile>
      <anchor>aabc01fa18743f5f7d7fcbbd7b0acf319</anchor>
      <arglist>(igtl::GetTrajectoryMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1GetTrajectoryMessage.html</anchorfile>
      <anchor>a4dc3d5d8a376e6e5d04522c4dbebe8cd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GetTrajectoryMessage</name>
      <anchorfile>classigtl_1_1GetTrajectoryMessage.html</anchorfile>
      <anchor>a222ff6b388b0fe2a40f4fa935109b1b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1GetTrajectoryMessage.html</anchorfile>
      <anchor>ac03119f5c7b73ac5a5437e2f5b665208</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1GetTrajectoryMessage.html</anchorfile>
      <anchor>acdcafb392cddf6170c518953fb47e46b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GetTrajectoryMessage</name>
      <anchorfile>classigtl_1_1GetTrajectoryMessage.html</anchorfile>
      <anchor>adb6807b3bc43d4c9f0e5bdda9521a1df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GetTransformMessage</name>
    <filename>classigtl_1_1GetTransformMessage.html</filename>
    <base>igtl::HeaderOnlyMessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetTransformMessage.html</anchorfile>
      <anchor>a1f297bb0ea45549b9b804bdd0074e0f0</anchor>
      <arglist>(igtl::GetTransformMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a2490de099ea3804d81264174e8ade61a</anchor>
      <arglist>(igtl::HeaderOnlyMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetTransformMessage.html</anchorfile>
      <anchor>af9b8d622bac6ab77ed73315f7749fe09</anchor>
      <arglist>(igtl::GetTransformMessage, igtl::HeaderOnlyMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a4ea157687cffa9ddcc8336cc52fde7be</anchor>
      <arglist>(igtl::HeaderOnlyMessageBase, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>ac5a60869cd7888329b8211b35e10f3e0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GetTransformMessage</name>
      <anchorfile>classigtl_1_1GetTransformMessage.html</anchorfile>
      <anchor>a6e13cb6916efe80aa916cb7b85d96064</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a062c3f706b51d5b68295d188c1946022</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a1cbb666248fc4bd80244952225e04a6d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GetTransformMessage</name>
      <anchorfile>classigtl_1_1GetTransformMessage.html</anchorfile>
      <anchor>a13e138726c07e118e7e1744f8bbacd20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GetVideoMetaMessage</name>
    <filename>classigtl_1_1GetVideoMetaMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetVideoMetaMessage.html</anchorfile>
      <anchor>aeb6ee838a50de3fbcfc0044a47266d1c</anchor>
      <arglist>(igtl::GetVideoMetaMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetVideoMetaMessage.html</anchorfile>
      <anchor>abb187bccaa4469f40081578b6b29260f</anchor>
      <arglist>(igtl::GetVideoMetaMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1GetVideoMetaMessage.html</anchorfile>
      <anchor>a08be2bd99ee27d08dc043815335b921a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GetVideoMetaMessage</name>
      <anchorfile>classigtl_1_1GetVideoMetaMessage.html</anchorfile>
      <anchor>a33bb0cfd6abe700b98c38638c9573ea7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1GetVideoMetaMessage.html</anchorfile>
      <anchor>aa4b49ba24542850037c42bda927a144b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1GetVideoMetaMessage.html</anchorfile>
      <anchor>a8b147b4d8054352b52647f4ac368fb83</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~GetVideoMetaMessage</name>
      <anchorfile>classigtl_1_1GetVideoMetaMessage.html</anchorfile>
      <anchor>a8c9e458dc96ac6b1f643742ea98081eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::GroupDest</name>
    <filename>classigtl_1_1GroupDest.html</filename>
    <member kind="function">
      <type></type>
      <name>GroupDest</name>
      <anchorfile>classigtl_1_1GroupDest.html</anchorfile>
      <anchor>a4f476838c4c4044cc03279d477f92db8</anchor>
      <arglist>(const char *add, igtl_uint16 port, unsigned int groupID)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char *</type>
      <name>address</name>
      <anchorfile>classigtl_1_1GroupDest.html</anchorfile>
      <anchor>ac52541e5051df87e1e7ea51635e3bca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>groupID</name>
      <anchorfile>classigtl_1_1GroupDest.html</anchorfile>
      <anchor>a44aa069bb287e8893a734c58466de1fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>portNum</name>
      <anchorfile>classigtl_1_1GroupDest.html</anchorfile>
      <anchor>a71c216fef8df5156cb66e7aaab0b0e45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::H264Decoder</name>
    <filename>classigtl_1_1H264Decoder.html</filename>
    <base>igtl::GenericDecoder</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DecodeBitStreamIntoFrame</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a0755e045fcb26bce381188dc9bf3a074</anchor>
      <arglist>(unsigned char *bitStream, igtl_uint8 *outputFrame, igtl_uint32 iDimensions[], igtl_uint64 &amp;iStreamSize)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DecodeBitStreamIntoFrame</name>
      <anchorfile>classigtl_1_1H264Decoder.html</anchorfile>
      <anchor>a1411aaebddb2cdd89eae6df88374011b</anchor>
      <arglist>(unsigned char *bitStream, igtl_uint8 *outputFrame, igtl_uint32 iDimensions[2], igtl_uint64 &amp;iStreamSize) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DecodeVideoMSGIntoSingleFrame</name>
      <anchorfile>classigtl_1_1H264Decoder.html</anchorfile>
      <anchor>a57e38d3ac5be7c652acdd1acfe5fbbc1</anchor>
      <arglist>(igtl::VideoMessage *videoMessage, SourcePicture *pDecodedPic) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl_int64</type>
      <name>getCurrentTime</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ae527f8cd6beedcd925c3507e106c05bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a1af1d4990ac1b37480e303e06f02dfa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetIsGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a70337d5a712b95e02c20d27af27b1c83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H264Decoder</name>
      <anchorfile>classigtl_1_1H264Decoder.html</anchorfile>
      <anchor>af991c356f693e137c245081baa13586f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1H264Decoder.html</anchorfile>
      <anchor>aa44672753c7c3a15bfbebc66c62fe998</anchor>
      <arglist>(H264Decoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ad8370b82298fa02e836c3ca96a242855</anchor>
      <arglist>(igtl::GenericDecoder, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1H264Decoder.html</anchorfile>
      <anchor>ab472e40736dbb9a608da46ef18e88138</anchor>
      <arglist>(H264Decoder, GenericDecoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Process</name>
      <anchorfile>classigtl_1_1H264Decoder.html</anchorfile>
      <anchor>a65d355871aa38a0b34ea23d041c2ae40</anchor>
      <arglist>(void *pDst[3], SBufferInfo *pInfo, FILE *pFp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ab8434315e149e2308ebf44923c0a801c</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetIsGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a5b0adc21d495e8b401b45eda0abba426</anchor>
      <arglist>(bool grayImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackUncompressedData</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a0cdd23e9a49e340341a4148c60703f16</anchor>
      <arglist>(igtl::VideoMessage *videoMessage, SourcePicture *decodedPic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~H264Decoder</name>
      <anchorfile>classigtl_1_1H264Decoder.html</anchorfile>
      <anchor>aeac07f5516ef5dfa8e22372e32f2b9e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ConvertYUVToGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a232a346fe06f6fd10507b88238fd7694</anchor>
      <arglist>(igtl_uint8 *YUV420Frame, igtl_uint8 *GrayFrame, int iHeight, int iWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ConvertYUVToRGB</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ae3fe0c17e14e40fecdd36075688b5c0a</anchor>
      <arglist>(igtl_uint8 *YUVFrame, igtl_uint8 *RGBFrame, int iHeight, int iWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Write2File</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a8e8c0f586c6e8713e6ef0898c1d93a11</anchor>
      <arglist>(FILE *pFp, unsigned char *pData[], igtl_uint32 iDimensions[], igtl_uint32 iStride[])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>deviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ab8f8222fe0f2b68f036aef9e3a5f96d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a956de3fe095a963187f2f390e8a2988c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::H264Encoder</name>
    <filename>classigtl_1_1H264Encoder.html</filename>
    <base>igtl::GenericEncoder</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ConvertToLocalImageFormat</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>a23987003fcc0d00037f40cf5b5f1c3dd</anchor>
      <arglist>(SourcePicture *pSrcPic) override</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EncodeSingleFrameIntoVideoMSG</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>adc5cd41f304b5e7b5a951bcdc2de9d2b</anchor>
      <arglist>(SourcePicture *pSrcPic, igtl::VideoMessage *videoMessage, bool isGrayImage=false) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FillSpecificParameters</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>ad80add96ee49efaa02474bd7c55a586b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInitializationStatus</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ad78caf307fd44c4654b9df04a7918585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetLosslessLink</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>adfc2ccd1a3f0ac8f842f4048a8fe4581</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetPicHeight</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>abf2b0b49c5d07d7ca215951fdd028209</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetPicWidth</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>ad66da10783608f65545786733351a8a7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetVideoFrameType</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>afc09caed262be2ad951e32ebf24f43cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H264Encoder</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>aa557ef0f9ee5c4108ce9eca47583c9b7</anchor>
      <arglist>(char *configFile=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>aa9ecf3dee0ecb28f834fdf1ce2b64035</anchor>
      <arglist>(H264Encoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ab008518cb4d43607db39821a3cac289f</anchor>
      <arglist>(GenericEncoder, Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>ae6fa5a5c4693219fa5acac7134190682</anchor>
      <arglist>(H264Encoder, GenericEncoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InitializeEncoder</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>ad9d5027581596197c229264458dd1a17</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PackUncompressedData</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ab17ef3b62aeaeaf26b5f47b1b7f8fad6</anchor>
      <arglist>(SourcePicture *pSrcPic, igtl::VideoMessage *videoMessage, bool isGrayImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetConfigurationFile</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a3062d79523e3fe4dfd59150413a525ee</anchor>
      <arglist>(std::string configFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetKeyFrameDistance</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>a62cbfeaf7e027b83658ed60971caf59e</anchor>
      <arglist>(int frameNum) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetLosslessLink</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>aa4f1fba77d9e14b73e714ff95a86a15c</anchor>
      <arglist>(bool linkMethod) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPicWidthAndHeight</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>a1485ae5ef83d0bd8263c9fcc04bffe4c</anchor>
      <arglist>(unsigned int Width, unsigned int Height) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetQP</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>a4a7ba4a3523329152eecb8fbfd318d46</anchor>
      <arglist>(int maxQP, int minQP) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetRCMode</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>a2bc19c8cbaa9a89890c690853c1cb809</anchor>
      <arglist>(int value) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetRCTargetBitRate</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>abc47705412ce8ecb2117eb82febb0e05</anchor>
      <arglist>(unsigned int bitRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSpeed</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>a9528a717ed4f96f5f6f9f85ea8bc73e0</anchor>
      <arglist>(int speed) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~H264Encoder</name>
      <anchorfile>classigtl_1_1H264Encoder.html</anchorfile>
      <anchor>a88e2f504077406259913e6da0135c47c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ConvertRGBToYUV</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>aaf55abdb6605c665e43bf2c6c8a305ce</anchor>
      <arglist>(igtlUint8 *rgb, igtlUint8 *destination, unsigned int width, unsigned int height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codecSpeed</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a12ef10929fcbea81ce6a637be25fb26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>configFile</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a184f04a12c55c16b9e1c87c09475d0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReadConfigFile</type>
      <name>cRdCfg</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a91bfe8794607708b2cabf2397628d582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>encodedFrameType</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a6db666c31e29284f9649a599afc0ec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>initializationDone</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a861dc3c6546c78ce628c08163fec3424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isLossLessLink</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a14757b9da47b57ba6c02bccbc76deb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>picHeight</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a021c10e506464282da7aa9622e4ec145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>picWidth</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a1999241652600dc3b15e3400d18806b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::H265Decoder</name>
    <filename>classigtl_1_1H265Decoder.html</filename>
    <base>igtl::GenericDecoder</base>
    <class kind="struct">igtl::H265Decoder::Info</class>
    <member kind="enumvalue">
      <name>MULTITHREAD_FRAME</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>aee541d2f07b8c70b166ed1b10ec2f35fa4a4fc5b16b2a9126436ec4f64b0ab938</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTITHREAD_SLICE</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>aee541d2f07b8c70b166ed1b10ec2f35fa51186275dde5ce3f7b8c42db99d8988b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTITHREAD_FRAME_SLICE</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>aee541d2f07b8c70b166ed1b10ec2f35fa72954d7d9c0468d0e3729c14387ba2a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct igtl::H265Decoder::Info</type>
      <name>Info</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>a928af96b16842f1b11765fa2738f0b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTITHREAD_FRAME</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>aee541d2f07b8c70b166ed1b10ec2f35fa4a4fc5b16b2a9126436ec4f64b0ab938</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTITHREAD_FRAME_SLICE</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>aee541d2f07b8c70b166ed1b10ec2f35fa72954d7d9c0468d0e3729c14387ba2a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTITHREAD_SLICE</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>aee541d2f07b8c70b166ed1b10ec2f35fa51186275dde5ce3f7b8c42db99d8988b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DecodeBitStreamIntoFrame</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a0755e045fcb26bce381188dc9bf3a074</anchor>
      <arglist>(unsigned char *bitStream, igtl_uint8 *outputFrame, igtl_uint32 iDimensions[], igtl_uint64 &amp;iStreamSize)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DecodeBitStreamIntoFrame</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>a86b5c3ed49690eb15981d2c5499fa4da</anchor>
      <arglist>(unsigned char *bitStream, igtl_uint8 *outputFrame, igtl_uint32 iDimensions[2], igtl_uint64 &amp;iStreamSize) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DecodeVideoMSGIntoSingleFrame</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>ab2cb34d06e637cca21057c986a680eca</anchor>
      <arglist>(igtl::VideoMessage *videoMessage, SourcePicture *pDecodedPic) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl_int64</type>
      <name>getCurrentTime</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ae527f8cd6beedcd925c3507e106c05bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a1af1d4990ac1b37480e303e06f02dfa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetIsGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a70337d5a712b95e02c20d27af27b1c83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H265Decoder</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>a3e3d779a92323721e5fd707a216ce78b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>a21560471cac3dd841b267b777839d968</anchor>
      <arglist>(H265Decoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ad8370b82298fa02e836c3ca96a242855</anchor>
      <arglist>(igtl::GenericDecoder, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>a734f283e33c4407e17e28389b86a46eb</anchor>
      <arglist>(H265Decoder, GenericDecoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ab8434315e149e2308ebf44923c0a801c</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetIsGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a5b0adc21d495e8b401b45eda0abba426</anchor>
      <arglist>(bool grayImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackUncompressedData</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a0cdd23e9a49e340341a4148c60703f16</anchor>
      <arglist>(igtl::VideoMessage *videoMessage, SourcePicture *decodedPic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~H265Decoder</name>
      <anchorfile>classigtl_1_1H265Decoder.html</anchorfile>
      <anchor>a7ff72f6354314972108107f81d4337b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ConvertYUVToGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a232a346fe06f6fd10507b88238fd7694</anchor>
      <arglist>(igtl_uint8 *YUV420Frame, igtl_uint8 *GrayFrame, int iHeight, int iWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ConvertYUVToRGB</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ae3fe0c17e14e40fecdd36075688b5c0a</anchor>
      <arglist>(igtl_uint8 *YUVFrame, igtl_uint8 *RGBFrame, int iHeight, int iWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Write2File</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a8e8c0f586c6e8713e6ef0898c1d93a11</anchor>
      <arglist>(FILE *pFp, unsigned char *pData[], igtl_uint32 iDimensions[], igtl_uint32 iStride[])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>deviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ab8f8222fe0f2b68f036aef9e3a5f96d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a956de3fe095a963187f2f390e8a2988c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::H265Encoder</name>
    <filename>classigtl_1_1H265Encoder.html</filename>
    <base>igtl::GenericEncoder</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ConvertToLocalImageFormat</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>a6a49b882bb2722735bb2ebae05e2b94d</anchor>
      <arglist>(SourcePicture *pSrcPic) override</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EncodeSingleFrameIntoVideoMSG</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>a1b02b32f89218bec326705ccde6b6911</anchor>
      <arglist>(SourcePicture *pSrcPic, igtl::VideoMessage *videoMessage, bool isGrayImage=false) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FillSpecificParameters</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>aeb99c2d72579003c82fe204483084c2b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInitializationStatus</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ad78caf307fd44c4654b9df04a7918585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetLosslessLink</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>adf010b5eb447b2a2502ff81dd570f872</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetPicHeight</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>ab51c87a52f78302f57db0b8aa6c00280</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetPicWidth</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>af76ef036ed775b4af372864e36f301c7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetVideoFrameType</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>afc09caed262be2ad951e32ebf24f43cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H265Encoder</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>af371be6d84e98ccd543af31db59b38d9</anchor>
      <arglist>(char *configFile=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>a5571a5fe2705f7745abdfcdb1e770745</anchor>
      <arglist>(H265Encoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ab008518cb4d43607db39821a3cac289f</anchor>
      <arglist>(GenericEncoder, Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>a1fe04668a2cd47a57ccf02ca4c85e078</anchor>
      <arglist>(H265Encoder, GenericEncoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InitializeEncoder</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>a339016e69c05d13d1450aa85f148f288</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PackUncompressedData</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ab17ef3b62aeaeaf26b5f47b1b7f8fad6</anchor>
      <arglist>(SourcePicture *pSrcPic, igtl::VideoMessage *videoMessage, bool isGrayImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetConfigurationFile</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a3062d79523e3fe4dfd59150413a525ee</anchor>
      <arglist>(std::string configFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetKeyFrameDistance</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>a888d3adaf3a7e5a9920aaea13b54dcd6</anchor>
      <arglist>(int frameNum) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetLosslessLink</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>accbd8f46a794eb49ef97b768adb98893</anchor>
      <arglist>(bool linkMethod) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPicWidthAndHeight</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>a2e1c505d99da5ddc1dfa2fef3091f16e</anchor>
      <arglist>(unsigned int Width, unsigned int Height) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetQP</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>af5c050d40e13635f918fb0b5ef62b79c</anchor>
      <arglist>(int maxQP, int minQP) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetRCMode</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>a9bce6a644708489e6d8303e97d7500b0</anchor>
      <arglist>(int value) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetRCTargetBitRate</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>a4a8b9617d8b95427ee54a0ba08597687</anchor>
      <arglist>(unsigned int bitRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSpeed</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>af14efd8d55c1546b7052dafbe35ccbb3</anchor>
      <arglist>(int speed) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~H265Encoder</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>aa0146e889f3c3c6e7c1c6587f1531967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ConvertRGBToYUV</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>aaf55abdb6605c665e43bf2c6c8a305ce</anchor>
      <arglist>(igtlUint8 *rgb, igtlUint8 *destination, unsigned int width, unsigned int height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopySettingToAnother</name>
      <anchorfile>classigtl_1_1H265Encoder.html</anchorfile>
      <anchor>aa7d668da5a4494536cf3200ce0ff1e45</anchor>
      <arglist>(x265_param *srcSetting, x265_param *dstSetting)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codecSpeed</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a12ef10929fcbea81ce6a637be25fb26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>configFile</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a184f04a12c55c16b9e1c87c09475d0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReadConfigFile</type>
      <name>cRdCfg</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a91bfe8794607708b2cabf2397628d582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>encodedFrameType</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a6db666c31e29284f9649a599afc0ec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>initializationDone</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a861dc3c6546c78ce628c08163fec3424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isLossLessLink</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a14757b9da47b57ba6c02bccbc76deb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>picHeight</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a021c10e506464282da7aa9622e4ec145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>picWidth</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a1999241652600dc3b15e3400d18806b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::HeaderOnlyMessageBase</name>
    <filename>classigtl_1_1HeaderOnlyMessageBase.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a2490de099ea3804d81264174e8ade61a</anchor>
      <arglist>(igtl::HeaderOnlyMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a4ea157687cffa9ddcc8336cc52fde7be</anchor>
      <arglist>(igtl::HeaderOnlyMessageBase, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>ac5a60869cd7888329b8211b35e10f3e0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HeaderOnlyMessageBase</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a007b50e3ad518e1c518c3b4b7e590598</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a062c3f706b51d5b68295d188c1946022</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a1cbb666248fc4bd80244952225e04a6d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~HeaderOnlyMessageBase</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a5356ec4cdc6281ad92a39b230a44df28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::I420Decoder</name>
    <filename>classigtl_1_1I420Decoder.html</filename>
    <base>igtl::GenericDecoder</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DecodeBitStreamIntoFrame</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a0755e045fcb26bce381188dc9bf3a074</anchor>
      <arglist>(unsigned char *bitStream, igtl_uint8 *outputFrame, igtl_uint32 iDimensions[], igtl_uint64 &amp;iStreamSize)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DecodeBitStreamIntoFrame</name>
      <anchorfile>classigtl_1_1I420Decoder.html</anchorfile>
      <anchor>a3d6a5dfbbe15bb94f32c291f40bac09b</anchor>
      <arglist>(unsigned char *bitStream, igtl_uint8 *outputFrame, igtl_uint32 iDimensions[2], igtl_uint64 &amp;iStreamSize) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DecodeVideoMSGIntoSingleFrame</name>
      <anchorfile>classigtl_1_1I420Decoder.html</anchorfile>
      <anchor>a6db1b2aa7945d964c41d44ddf4758440</anchor>
      <arglist>(igtl::VideoMessage *videoMessage, SourcePicture *pDecodedPic) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl_int64</type>
      <name>getCurrentTime</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ae527f8cd6beedcd925c3507e106c05bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a1af1d4990ac1b37480e303e06f02dfa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetIsGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a70337d5a712b95e02c20d27af27b1c83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I420Decoder</name>
      <anchorfile>classigtl_1_1I420Decoder.html</anchorfile>
      <anchor>ad065489154a08bbd65c6e3b95f3db739</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1I420Decoder.html</anchorfile>
      <anchor>a11d8fbfa04759d17b31221bca97fbd7d</anchor>
      <arglist>(I420Decoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ad8370b82298fa02e836c3ca96a242855</anchor>
      <arglist>(igtl::GenericDecoder, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1I420Decoder.html</anchorfile>
      <anchor>a24eac9ce31e387334a9af0c90ad4f204</anchor>
      <arglist>(I420Decoder, GenericDecoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ab8434315e149e2308ebf44923c0a801c</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetIsGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a5b0adc21d495e8b401b45eda0abba426</anchor>
      <arglist>(bool grayImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackUncompressedData</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a0cdd23e9a49e340341a4148c60703f16</anchor>
      <arglist>(igtl::VideoMessage *videoMessage, SourcePicture *decodedPic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~I420Decoder</name>
      <anchorfile>classigtl_1_1I420Decoder.html</anchorfile>
      <anchor>abc895b45c7704212863bfff5b77bf2b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ConvertYUVToGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a232a346fe06f6fd10507b88238fd7694</anchor>
      <arglist>(igtl_uint8 *YUV420Frame, igtl_uint8 *GrayFrame, int iHeight, int iWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ConvertYUVToRGB</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ae3fe0c17e14e40fecdd36075688b5c0a</anchor>
      <arglist>(igtl_uint8 *YUVFrame, igtl_uint8 *RGBFrame, int iHeight, int iWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Write2File</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a8e8c0f586c6e8713e6ef0898c1d93a11</anchor>
      <arglist>(FILE *pFp, unsigned char *pData[], igtl_uint32 iDimensions[], igtl_uint32 iStride[])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ComposeByteSteam</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a96119a61a32eda3d7c51b8b1c9cbd123</anchor>
      <arglist>(igtl_uint8 **inputData, int dimension[2], int iStride[2], igtl_uint8 *outputFrame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>deviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ab8f8222fe0f2b68f036aef9e3a5f96d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a956de3fe095a963187f2f390e8a2988c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::I420Encoder</name>
    <filename>classigtl_1_1I420Encoder.html</filename>
    <base>igtl::GenericEncoder</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ConvertToLocalImageFormat</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a2075a78f74ff69a7c5fe2341ce16d059</anchor>
      <arglist>(SourcePicture *pSrcPic)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EncodeSingleFrameIntoVideoMSG</name>
      <anchorfile>classigtl_1_1I420Encoder.html</anchorfile>
      <anchor>a0dd6685c27b0579b05ad0b2b5a47d5fc</anchor>
      <arglist>(SourcePicture *pSrcPic, igtl::VideoMessage *videoMessage, bool isGrayImage=false) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>FillSpecificParameters</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a935ad9c1fe856a7a34781c9085ba6cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInitializationStatus</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ad78caf307fd44c4654b9df04a7918585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetLosslessLink</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a5d938933566220c3d0e4ad80ad7725ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>GetPicHeight</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a6a2c7ee59a8e1e514ed5b740b0e02685</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>GetPicWidth</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ac378d53023ba430ba55ba1debe1a08b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetVideoFrameType</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>afc09caed262be2ad951e32ebf24f43cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I420Encoder</name>
      <anchorfile>classigtl_1_1I420Encoder.html</anchorfile>
      <anchor>af7f542a3dcc707b82d9ed502b95562e4</anchor>
      <arglist>(char *configFile=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1I420Encoder.html</anchorfile>
      <anchor>a18fa5a26e7864e414f406f61a6cb9b8c</anchor>
      <arglist>(I420Encoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ab008518cb4d43607db39821a3cac289f</anchor>
      <arglist>(GenericEncoder, Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1I420Encoder.html</anchorfile>
      <anchor>aa6f4a4b9974ffe49f79e1be28e42defe</anchor>
      <arglist>(I420Encoder, GenericEncoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InitializeEncoder</name>
      <anchorfile>classigtl_1_1I420Encoder.html</anchorfile>
      <anchor>ae23de1413b9c576aa4fccd3cf974f9c3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PackUncompressedData</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ab17ef3b62aeaeaf26b5f47b1b7f8fad6</anchor>
      <arglist>(SourcePicture *pSrcPic, igtl::VideoMessage *videoMessage, bool isGrayImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetConfigurationFile</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a3062d79523e3fe4dfd59150413a525ee</anchor>
      <arglist>(std::string configFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetKeyFrameDistance</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>abc444dfe1fbff10f33c476a99f8898d0</anchor>
      <arglist>(int frameNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetLosslessLink</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a1e85d41d1fe9191e7b6511a36e8fac09</anchor>
      <arglist>(bool linkMethod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetPicWidthAndHeight</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a2ec61909b763c845e1d056e44ee79bd8</anchor>
      <arglist>(unsigned int Width, unsigned int Height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetQP</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a28d11037bffd9c677c6a5e5e1d952ae9</anchor>
      <arglist>(int maxQP, int minQP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetRCMode</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a910655ec940f60f71b4f5a965316883e</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetRCTargetBitRate</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a1c2ab2b47329a63ce3e6ecb21e7d5055</anchor>
      <arglist>(unsigned int bitRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetSpeed</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a1495d6afd0d3d082f598debdb7d14486</anchor>
      <arglist>(int speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~I420Encoder</name>
      <anchorfile>classigtl_1_1I420Encoder.html</anchorfile>
      <anchor>af6250e9b274c32e02547eaccbf9f9421</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ConvertRGBToYUV</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>aaf55abdb6605c665e43bf2c6c8a305ce</anchor>
      <arglist>(igtlUint8 *rgb, igtlUint8 *destination, unsigned int width, unsigned int height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codecSpeed</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a12ef10929fcbea81ce6a637be25fb26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>configFile</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a184f04a12c55c16b9e1c87c09475d0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReadConfigFile</type>
      <name>cRdCfg</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a91bfe8794607708b2cabf2397628d582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>encodedFrameType</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a6db666c31e29284f9649a599afc0ec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>initializationDone</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a861dc3c6546c78ce628c08163fec3424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isLossLessLink</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a14757b9da47b57ba6c02bccbc76deb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>picHeight</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a021c10e506464282da7aa9622e4ec145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>picWidth</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a1999241652600dc3b15e3400d18806b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_bind_child_info</name>
    <filename>structigtl__bind__child__info.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>name</name>
      <anchorfile>structigtl__bind__child__info.html</anchorfile>
      <anchor>a4999f8eeb0dca7a7cdb7d74a78aee8fd</anchor>
      <arglist>[IGTL_HEADER_NAME_SIZE+1]</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>ptr</name>
      <anchorfile>structigtl__bind__child__info.html</anchorfile>
      <anchor>aecd3bd0f22b7c898cfcadfbe61d0a002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint64</type>
      <name>size</name>
      <anchorfile>structigtl__bind__child__info.html</anchorfile>
      <anchor>a4f0902a7b6fa65c2cb4ce22e44da0150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>type</name>
      <anchorfile>structigtl__bind__child__info.html</anchorfile>
      <anchor>a9a59baaed89d753077a2c2861ea8946e</anchor>
      <arglist>[IGTL_HEADER_TYPE_SIZE+1]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_bind_info</name>
    <filename>structigtl__bind__info.html</filename>
    <member kind="variable">
      <type>igtl_bind_child_info *</type>
      <name>child_info_array</name>
      <anchorfile>structigtl__bind__info.html</anchorfile>
      <anchor>a8397a193986d56cebc7fe9ce98200287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>ncmessages</name>
      <anchorfile>structigtl__bind__info.html</anchorfile>
      <anchor>a55b1f023679f9b53d9db8822db31219e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>request_all</name>
      <anchorfile>structigtl__bind__info.html</anchorfile>
      <anchor>a1e1d7477a4f29b963cc5fe90a37ebd30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint64</type>
      <name>resol</name>
      <anchorfile>structigtl__bind__info.html</anchorfile>
      <anchor>a61dc596b582e1698eb9a95598826cb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>status</name>
      <anchorfile>structigtl__bind__info.html</anchorfile>
      <anchor>ae3413d162b917effa7c27b3f4b5506e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_capability_info</name>
    <filename>structigtl__capability__info.html</filename>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>ntypes</name>
      <anchorfile>structigtl__capability__info.html</anchorfile>
      <anchor>a5283dec328559f17e1193815cf871838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char **</type>
      <name>typenames</name>
      <anchorfile>structigtl__capability__info.html</anchorfile>
      <anchor>a8e3ff37dde50b86fdf478da1f649d71f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_colortable_header</name>
    <filename>structigtl__colortable__header.html</filename>
    <member kind="variable">
      <type>igtl_int8</type>
      <name>indexType</name>
      <anchorfile>structigtl__colortable__header.html</anchorfile>
      <anchor>aa9ea72a31bd218748c1d320773d50cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_int8</type>
      <name>mapType</name>
      <anchorfile>structigtl__colortable__header.html</anchorfile>
      <anchor>a1dadbab59c37fa358c93a856275a7709</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_command_header</name>
    <filename>structigtl__command__header.html</filename>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>commandId</name>
      <anchorfile>structigtl__command__header.html</anchorfile>
      <anchor>a21427e54bb0a8868ae834476c52da7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>commandName</name>
      <anchorfile>structigtl__command__header.html</anchorfile>
      <anchor>ad2c4d2970fd26e51b64626228ba807f2</anchor>
      <arglist>[IGTL_COMMAND_NAME_SIZE]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>encoding</name>
      <anchorfile>structigtl__command__header.html</anchorfile>
      <anchor>a1a56681d86e61fdad8e80f0683f82035</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>length</name>
      <anchorfile>structigtl__command__header.html</anchorfile>
      <anchor>afe5768ea0ac2aa9dbaa7e1984fdbcb93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_frame_header</name>
    <filename>structigtl__frame__header.html</filename>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>coord</name>
      <anchorfile>structigtl__frame__header.html</anchorfile>
      <anchor>ab23310af9e5d056eacdc10a079d212c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>encoding</name>
      <anchorfile>structigtl__frame__header.html</anchorfile>
      <anchor>a20c8af6e3ac34c6662e0cf6594532839</anchor>
      <arglist>[IGTL_VIDEO_CODEC_NAME_SIZE]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>endian</name>
      <anchorfile>structigtl__frame__header.html</anchorfile>
      <anchor>a049cbe195ef551f82c1049e34b66202f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>frameType</name>
      <anchorfile>structigtl__frame__header.html</anchorfile>
      <anchor>a6419f6acfc823d83c3591533a712c22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>header_version</name>
      <anchorfile>structigtl__frame__header.html</anchorfile>
      <anchor>a1947fb6f85c635a6ec1409e879c51b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>matrix</name>
      <anchorfile>structigtl__frame__header.html</anchorfile>
      <anchor>a51e26f3c38e6791a0d864bd6531b3a96</anchor>
      <arglist>[12]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>size</name>
      <anchorfile>structigtl__frame__header.html</anchorfile>
      <anchor>aea374f62633efd8b626c2bee35b72d0b</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>subvol_offset</name>
      <anchorfile>structigtl__frame__header.html</anchorfile>
      <anchor>ab40f7bb7fc5d0b5da568dc1f8d21d601</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>subvol_size</name>
      <anchorfile>structigtl__frame__header.html</anchorfile>
      <anchor>a894a8d18d38f613d596d9012caa10721</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_header</name>
    <filename>structigtl__header.html</filename>
    <member kind="variable">
      <type>igtl_uint64</type>
      <name>body_size</name>
      <anchorfile>structigtl__header.html</anchorfile>
      <anchor>a73c7519797a20afc6f4fa657bfd3e5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint64</type>
      <name>crc</name>
      <anchorfile>structigtl__header.html</anchorfile>
      <anchor>a258c302fad6dec08b547a9c0b097b8a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>device_name</name>
      <anchorfile>structigtl__header.html</anchorfile>
      <anchor>a3e6dd68f64775b7e46881c90a274678b</anchor>
      <arglist>[IGTL_HEADER_NAME_SIZE]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>header_version</name>
      <anchorfile>structigtl__header.html</anchorfile>
      <anchor>a37c3fc4cd2bb3899c890ca501c7326f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>name</name>
      <anchorfile>structigtl__header.html</anchorfile>
      <anchor>a4e5e5968aa5602d92c74066d33fe7306</anchor>
      <arglist>[IGTL_HEADER_TYPE_SIZE]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint64</type>
      <name>timestamp</name>
      <anchorfile>structigtl__header.html</anchorfile>
      <anchor>add6c199d2f86ebe3e4e38216992887c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_image_header</name>
    <filename>structigtl__image__header.html</filename>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>coord</name>
      <anchorfile>structigtl__image__header.html</anchorfile>
      <anchor>a822d076ea2f25bfa4efada47c10703d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>endian</name>
      <anchorfile>structigtl__image__header.html</anchorfile>
      <anchor>a85a8ff5f97aa2ab01ba6ea986203b8cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>header_version</name>
      <anchorfile>structigtl__image__header.html</anchorfile>
      <anchor>a6f9a9207eeef744a41e66221d1df3eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>matrix</name>
      <anchorfile>structigtl__image__header.html</anchorfile>
      <anchor>ac82b37f2065891c4c10b775e98cc6741</anchor>
      <arglist>[12]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>num_components</name>
      <anchorfile>structigtl__image__header.html</anchorfile>
      <anchor>a415cb4f26fee434a175078c2fe6df899</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>scalar_type</name>
      <anchorfile>structigtl__image__header.html</anchorfile>
      <anchor>a3b9eee407b1b6f62169421798ab55245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>size</name>
      <anchorfile>structigtl__image__header.html</anchorfile>
      <anchor>a499fdf26f4bfc414f7b304b19cb03d9f</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>subvol_offset</name>
      <anchorfile>structigtl__image__header.html</anchorfile>
      <anchor>a63a2ce3c268f6ac9abd1e3654be598f3</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>subvol_size</name>
      <anchorfile>structigtl__image__header.html</anchorfile>
      <anchor>a2bbe6dc218e300472f7dce738af2e52f</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_imgmeta_element</name>
    <filename>structigtl__imgmeta__element.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>device_name</name>
      <anchorfile>structigtl__imgmeta__element.html</anchorfile>
      <anchor>a2b6268dd9a59e6c59eb807879ffd3fb9</anchor>
      <arglist>[IGTL_IMGMETA_LEN_DEVICE_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>modality</name>
      <anchorfile>structigtl__imgmeta__element.html</anchorfile>
      <anchor>aa276d2a6e65309f56a69060186ad2df0</anchor>
      <arglist>[IGTL_IMGMETA_LEN_MODALITY]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>name</name>
      <anchorfile>structigtl__imgmeta__element.html</anchorfile>
      <anchor>aafa385934a1cde1e8a06656a9456389e</anchor>
      <arglist>[IGTL_IMGMETA_LEN_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>patient_id</name>
      <anchorfile>structigtl__imgmeta__element.html</anchorfile>
      <anchor>a0185733754e8ef0a8b790d567ae85eb8</anchor>
      <arglist>[IGTL_IMGMETA_LEN_PATIENT_ID]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>patient_name</name>
      <anchorfile>structigtl__imgmeta__element.html</anchorfile>
      <anchor>a6ec0cba6d485c30844313e5d2b3602a5</anchor>
      <arglist>[IGTL_IMGMETA_LEN_PATIENT_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>reserved</name>
      <anchorfile>structigtl__imgmeta__element.html</anchorfile>
      <anchor>adfbb166c17f16031acaa41823ad55c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>scalar_type</name>
      <anchorfile>structigtl__imgmeta__element.html</anchorfile>
      <anchor>a0ad89d31a7178169de5a0dca3c1f41f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>size</name>
      <anchorfile>structigtl__imgmeta__element.html</anchorfile>
      <anchor>a54030c16cbfab39412b3274517774126</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint64</type>
      <name>timestamp</name>
      <anchorfile>structigtl__imgmeta__element.html</anchorfile>
      <anchor>af68270251f3fbf2f9fa19ed164440143</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_lbmeta_element</name>
    <filename>structigtl__lbmeta__element.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>device_name</name>
      <anchorfile>structigtl__lbmeta__element.html</anchorfile>
      <anchor>a3b37ee40463cfd27040d43c95111c9bb</anchor>
      <arglist>[IGTL_LBMETA_LEN_DEVICE_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>label</name>
      <anchorfile>structigtl__lbmeta__element.html</anchorfile>
      <anchor>a73045011bde70df94c4c415821960aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>name</name>
      <anchorfile>structigtl__lbmeta__element.html</anchorfile>
      <anchor>a9d2cbc7b1cb0943e88502196721652e9</anchor>
      <arglist>[IGTL_LBMETA_LEN_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>owner</name>
      <anchorfile>structigtl__lbmeta__element.html</anchorfile>
      <anchor>aea22fd3d2ba87a5f7c899cce074eff6f</anchor>
      <arglist>[IGTL_LBMETA_LEN_OWNER]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>reserved</name>
      <anchorfile>structigtl__lbmeta__element.html</anchorfile>
      <anchor>a1165cca30cabadb263b87aeb74ea9894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>rgba</name>
      <anchorfile>structigtl__lbmeta__element.html</anchorfile>
      <anchor>a8112d14c160be9574bfbeda10dc02f4d</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>size</name>
      <anchorfile>structigtl__lbmeta__element.html</anchorfile>
      <anchor>a5e289f06e85dfc113b8560eea217bccc</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_ndarray_info</name>
    <filename>structigtl__ndarray__info.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>array</name>
      <anchorfile>structigtl__ndarray__info.html</anchorfile>
      <anchor>ad0226817f91a41fe98026b3106e6a79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>dim</name>
      <anchorfile>structigtl__ndarray__info.html</anchorfile>
      <anchor>a7ff65cd5738a346a11201c79bc92ea3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16 *</type>
      <name>size</name>
      <anchorfile>structigtl__ndarray__info.html</anchorfile>
      <anchor>ab8c35f011293a3f4ada50872f2558b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>type</name>
      <anchorfile>structigtl__ndarray__info.html</anchorfile>
      <anchor>a8a0b3a8f06a00693b9acd22eb435ca9a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_point_element</name>
    <filename>structigtl__point__element.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>group_name</name>
      <anchorfile>structigtl__point__element.html</anchorfile>
      <anchor>ada14b630be2890e18113a454f588e27a</anchor>
      <arglist>[IGTL_POINT_LEN_GROUP_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>name</name>
      <anchorfile>structigtl__point__element.html</anchorfile>
      <anchor>aaaaf917eb4e90e03ee94614d6cab2ed8</anchor>
      <arglist>[IGTL_POINT_LEN_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>owner</name>
      <anchorfile>structigtl__point__element.html</anchorfile>
      <anchor>a0492282a4eb9a7fe1ec224f4ff4567d9</anchor>
      <arglist>[IGTL_POINT_LEN_OWNER]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>position</name>
      <anchorfile>structigtl__point__element.html</anchorfile>
      <anchor>a6d0af59703cf8be0334631ab87bbc00c</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>radius</name>
      <anchorfile>structigtl__point__element.html</anchorfile>
      <anchor>a2dd01b924f1aaa568b6cde655b2eea6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>rgba</name>
      <anchorfile>structigtl__point__element.html</anchorfile>
      <anchor>ad15679f68a19dd590d829107b5c1dbb3</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_polydata_attribute</name>
    <filename>structigtl__polydata__attribute.html</filename>
    <member kind="variable">
      <type>igtl_float32 *</type>
      <name>data</name>
      <anchorfile>structigtl__polydata__attribute.html</anchorfile>
      <anchor>a7cec73762a05a55585cf0bb5ee06823e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>n</name>
      <anchorfile>structigtl__polydata__attribute.html</anchorfile>
      <anchor>ad5324f5bef6820f00dc47c4e6ef25afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structigtl__polydata__attribute.html</anchorfile>
      <anchor>a68110759c3b7836b57e56196d045dba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>ncomponents</name>
      <anchorfile>structigtl__polydata__attribute.html</anchorfile>
      <anchor>aec241bc9121ed6af9aac4b9cf1fffcc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>type</name>
      <anchorfile>structigtl__polydata__attribute.html</anchorfile>
      <anchor>ac6e0256325df755c752416bc351fb15f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_polydata_attribute_header</name>
    <filename>structigtl__polydata__attribute__header.html</filename>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>n</name>
      <anchorfile>structigtl__polydata__attribute__header.html</anchorfile>
      <anchor>ab89b53c9b8bdc6e40cc20a5713f5f413</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>ncomponents</name>
      <anchorfile>structigtl__polydata__attribute__header.html</anchorfile>
      <anchor>a740ecf7a1f103468b8af554f6019c741</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>type</name>
      <anchorfile>structigtl__polydata__attribute__header.html</anchorfile>
      <anchor>ab2a33ff51f85684989dca21b6b087c01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_polydata_header</name>
    <filename>structigtl__polydata__header.html</filename>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>nattributes</name>
      <anchorfile>structigtl__polydata__header.html</anchorfile>
      <anchor>a22664fd09f339f5e826aecff9f429bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>nlines</name>
      <anchorfile>structigtl__polydata__header.html</anchorfile>
      <anchor>a9460e8dd20d77a1156057804e354c3a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>npoints</name>
      <anchorfile>structigtl__polydata__header.html</anchorfile>
      <anchor>a41317b375f52fd33d1a8ce586f719ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>npolygons</name>
      <anchorfile>structigtl__polydata__header.html</anchorfile>
      <anchor>abae2d0227447b89106f7903711f322a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>ntriangle_strips</name>
      <anchorfile>structigtl__polydata__header.html</anchorfile>
      <anchor>a2637e7200b8727927de9595d614f4bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>nvertices</name>
      <anchorfile>structigtl__polydata__header.html</anchorfile>
      <anchor>a2cb025baed022a190e280519b11e0609</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>size_lines</name>
      <anchorfile>structigtl__polydata__header.html</anchorfile>
      <anchor>a01cf9e58debd15e40123787472cea2ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>size_polygons</name>
      <anchorfile>structigtl__polydata__header.html</anchorfile>
      <anchor>aa04ac11c28947b993f9f48f8f31cb5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>size_triangle_strips</name>
      <anchorfile>structigtl__polydata__header.html</anchorfile>
      <anchor>a182a214376fd9bd41c4c321cfdd23d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>size_vertices</name>
      <anchorfile>structigtl__polydata__header.html</anchorfile>
      <anchor>a17fa2a9e1aa2b1265d9dc73a0eb32dc2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_polydata_info</name>
    <filename>structigtl__polydata__info.html</filename>
    <member kind="variable">
      <type>igtl_polydata_attribute *</type>
      <name>attributes</name>
      <anchorfile>structigtl__polydata__info.html</anchorfile>
      <anchor>a37a0556e9cae8a47715e183b84fea655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_polydata_header</type>
      <name>header</name>
      <anchorfile>structigtl__polydata__info.html</anchorfile>
      <anchor>a99e4cbd9da53f3a86ea701222162bdad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32 *</type>
      <name>lines</name>
      <anchorfile>structigtl__polydata__info.html</anchorfile>
      <anchor>aaf282eeccc5c809004ae0f5542f6ad85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32 *</type>
      <name>points</name>
      <anchorfile>structigtl__polydata__info.html</anchorfile>
      <anchor>a02369bb50ff6d2efc3e6829fe2c67523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32 *</type>
      <name>polygons</name>
      <anchorfile>structigtl__polydata__info.html</anchorfile>
      <anchor>a9d310730554c7d1b04d7b887cbb7a127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32 *</type>
      <name>triangle_strips</name>
      <anchorfile>structigtl__polydata__info.html</anchorfile>
      <anchor>a9f0ed761aef1a69583b0457e958efbda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32 *</type>
      <name>vertices</name>
      <anchorfile>structigtl__polydata__info.html</anchorfile>
      <anchor>a1c0b0a3c995f693b76032c792d774f1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_position</name>
    <filename>structigtl__position.html</filename>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>position</name>
      <anchorfile>structigtl__position.html</anchorfile>
      <anchor>a0d4a09f72e012701a82ef79d8e49df98</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>quaternion</name>
      <anchorfile>structigtl__position.html</anchorfile>
      <anchor>af4212bf10bfb6a8b28d252fb0ed508dc</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_qtdata_element</name>
    <filename>structigtl__qtdata__element.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>name</name>
      <anchorfile>structigtl__qtdata__element.html</anchorfile>
      <anchor>a4c3200310cf1edc25accceb371be1d20</anchor>
      <arglist>[IGTL_QTDATA_LEN_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>position</name>
      <anchorfile>structigtl__qtdata__element.html</anchorfile>
      <anchor>a4b012663d5fb2776dfe9c8982967c923</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>quaternion</name>
      <anchorfile>structigtl__qtdata__element.html</anchorfile>
      <anchor>a1a5e53de9ba625945d1bb6eebc6e87cc</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>reserved</name>
      <anchorfile>structigtl__qtdata__element.html</anchorfile>
      <anchor>a87900dec1f86d73567bea1dda752fd6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>type</name>
      <anchorfile>structigtl__qtdata__element.html</anchorfile>
      <anchor>a734c9c2b2f866714fe246172c370713e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_qtrans</name>
    <filename>structigtl__qtrans.html</filename>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>qtrans</name>
      <anchorfile>structigtl__qtrans.html</anchorfile>
      <anchor>ad2cc9a4a52ca3f90383475a5d5e801fb</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>quaternion</name>
      <anchorfile>structigtl__qtrans.html</anchorfile>
      <anchor>a44bf8db72c406b03a098032cdf65cd8c</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_query_header</name>
    <filename>structigtl__query__header.html</filename>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>deviceUIDLength</name>
      <anchorfile>structigtl__query__header.html</anchorfile>
      <anchor>a4ed3a59ff2611ff81ddefd18c7300b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>queryDataType</name>
      <anchorfile>structigtl__query__header.html</anchorfile>
      <anchor>a2f4ae4ed32b02b9e786d4c92b0cc6f05</anchor>
      <arglist>[IGTL_QUERY_DATE_TYPE_SIZE]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>queryID</name>
      <anchorfile>structigtl__query__header.html</anchorfile>
      <anchor>a179281c46a5ad1cb75fba7d65291916c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_rts_qtdata</name>
    <filename>structigtl__rts__qtdata.html</filename>
    <member kind="variable">
      <type>igtl_int8</type>
      <name>status</name>
      <anchorfile>structigtl__rts__qtdata.html</anchorfile>
      <anchor>aefa64214bf730d811e950f6aa24c8b76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_rts_tdata</name>
    <filename>structigtl__rts__tdata.html</filename>
    <member kind="variable">
      <type>igtl_int8</type>
      <name>status</name>
      <anchorfile>structigtl__rts__tdata.html</anchorfile>
      <anchor>aa57ac0bdde546a116432e2b170f257b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_sensor_header</name>
    <filename>structigtl__sensor__header.html</filename>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>larray</name>
      <anchorfile>structigtl__sensor__header.html</anchorfile>
      <anchor>ae874fdc3777ebf6cc3226e70f9a48b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>status</name>
      <anchorfile>structigtl__sensor__header.html</anchorfile>
      <anchor>a109b44439969a379c326b83f1e16b8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_unit</type>
      <name>unit</name>
      <anchorfile>structigtl__sensor__header.html</anchorfile>
      <anchor>a349958ca51cee4df885fe5d7fc79fa7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_status_header</name>
    <filename>structigtl__status__header.html</filename>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>code</name>
      <anchorfile>structigtl__status__header.html</anchorfile>
      <anchor>a949d95b43053e348fc6cbe49e5ee4da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>error_name</name>
      <anchorfile>structigtl__status__header.html</anchorfile>
      <anchor>a79e81275c611933f7281764bd9136439</anchor>
      <arglist>[IGTL_STATUS_ERROR_NAME_LENGTH]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_int64</type>
      <name>subcode</name>
      <anchorfile>structigtl__status__header.html</anchorfile>
      <anchor>a03a445d5b9f8289caedc7417f0af869c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_string_header</name>
    <filename>structigtl__string__header.html</filename>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>encoding</name>
      <anchorfile>structigtl__string__header.html</anchorfile>
      <anchor>a53a9df7c08da06344774efc077b13269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>length</name>
      <anchorfile>structigtl__string__header.html</anchorfile>
      <anchor>ae166de1cee0a9d9499eb9550f4bb4b70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_stt_qtdata</name>
    <filename>structigtl__stt__qtdata.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>coord_name</name>
      <anchorfile>structigtl__stt__qtdata.html</anchorfile>
      <anchor>afc6020957818bd1176a2073efb6e8f49</anchor>
      <arglist>[IGTL_STT_QTDATA_LEN_COORDNAME]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_int32</type>
      <name>resolution</name>
      <anchorfile>structigtl__stt__qtdata.html</anchorfile>
      <anchor>a41bc5a4066d46d06140373bfe41c9065</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_stt_tdata</name>
    <filename>structigtl__stt__tdata.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>coord_name</name>
      <anchorfile>structigtl__stt__tdata.html</anchorfile>
      <anchor>a6e1557aa14f820ba1e5da17415c74bb4</anchor>
      <arglist>[IGTL_STT_TDATA_LEN_COORDNAME]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_int32</type>
      <name>resolution</name>
      <anchorfile>structigtl__stt__tdata.html</anchorfile>
      <anchor>a03ff44f93b37305a464c4fe2ae3a3711</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_stt_video</name>
    <filename>structigtl__stt__video.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>codec</name>
      <anchorfile>structigtl__stt__video.html</anchorfile>
      <anchor>a574790df4c67e9952dfa073ac2cea22b</anchor>
      <arglist>[IGTL_VIDEO_CODEC_NAME_SIZE]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>time_interval</name>
      <anchorfile>structigtl__stt__video.html</anchorfile>
      <anchor>af1bb920a891f2512664daa8bb450f97e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_tdata_element</name>
    <filename>structigtl__tdata__element.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>name</name>
      <anchorfile>structigtl__tdata__element.html</anchorfile>
      <anchor>a4c145a20d521ca714fcba89a1da32eb5</anchor>
      <arglist>[IGTL_TDATA_LEN_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>reserved</name>
      <anchorfile>structigtl__tdata__element.html</anchorfile>
      <anchor>af9925abe261d9c180a47927c44328cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>transform</name>
      <anchorfile>structigtl__tdata__element.html</anchorfile>
      <anchor>a08cbc2b6a7ae3386dad95a35878f2601</anchor>
      <arglist>[12]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>type</name>
      <anchorfile>structigtl__tdata__element.html</anchorfile>
      <anchor>a99a958351365327f3754b09c03b000b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_trajectory_element</name>
    <filename>structigtl__trajectory__element.html</filename>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>entry_pos</name>
      <anchorfile>structigtl__trajectory__element.html</anchorfile>
      <anchor>af2b43a11a52e4dba18fa91a00947c779</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>group_name</name>
      <anchorfile>structigtl__trajectory__element.html</anchorfile>
      <anchor>ac0728fece2a844dce1a7db3d942ea6fd</anchor>
      <arglist>[IGTL_TRAJECTORY_LEN_GROUP_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>name</name>
      <anchorfile>structigtl__trajectory__element.html</anchorfile>
      <anchor>a67a9df3e1465bacba43bb541cb5c3164</anchor>
      <arglist>[IGTL_TRAJECTORY_LEN_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>owner_name</name>
      <anchorfile>structigtl__trajectory__element.html</anchorfile>
      <anchor>aacb69086d044d763809306116351270e</anchor>
      <arglist>[IGTL_TRAJECTORY_LEN_OWNER]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>radius</name>
      <anchorfile>structigtl__trajectory__element.html</anchorfile>
      <anchor>a15f2e51f8e4a7edc3ad0e21ddd3a0d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_int8</type>
      <name>reserved</name>
      <anchorfile>structigtl__trajectory__element.html</anchorfile>
      <anchor>aca55bd65d0d02236fca8e1ab105c191e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>rgba</name>
      <anchorfile>structigtl__trajectory__element.html</anchorfile>
      <anchor>aced17abf323d058f167f1ebc3040bf4f</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>target_pos</name>
      <anchorfile>structigtl__trajectory__element.html</anchorfile>
      <anchor>a779ebfd4d8b0548d4f0398a2d0523e87</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_int8</type>
      <name>type</name>
      <anchorfile>structigtl__trajectory__element.html</anchorfile>
      <anchor>abe125e669ba6211f3afc095367d1da29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_unit_data</name>
    <filename>structigtl__unit__data.html</filename>
    <member kind="variable">
      <type>igtl_int8</type>
      <name>exp</name>
      <anchorfile>structigtl__unit__data.html</anchorfile>
      <anchor>a721276909009ecab2a62692c86d1a48f</anchor>
      <arglist>[6]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>prefix</name>
      <anchorfile>structigtl__unit__data.html</anchorfile>
      <anchor>af995522f177c62d9fc23f3e548805195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>unit</name>
      <anchorfile>structigtl__unit__data.html</anchorfile>
      <anchor>a4e7419b47dbfb13b3769482b990d15fc</anchor>
      <arglist>[6]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl_videometa_element</name>
    <filename>structigtl__videometa__element.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>device_name</name>
      <anchorfile>structigtl__videometa__element.html</anchorfile>
      <anchor>a058bec48110235047c8004c87c5692c9</anchor>
      <arglist>[IGTL_VIDEOMETA_LEN_DEVICE_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_float64</type>
      <name>focal_length</name>
      <anchorfile>structigtl__videometa__element.html</anchorfile>
      <anchor>a72c5410d44259aee8216944d88d61fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_float32</type>
      <name>matrix</name>
      <anchorfile>structigtl__videometa__element.html</anchorfile>
      <anchor>a9a85207a32256dbd20fcd771a24eb40d</anchor>
      <arglist>[12]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>name</name>
      <anchorfile>structigtl__videometa__element.html</anchorfile>
      <anchor>a6adfee79bd866caafbf5c8b5824aac42</anchor>
      <arglist>[IGTL_VIDEOMETA_LEN_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>patient_id</name>
      <anchorfile>structigtl__videometa__element.html</anchorfile>
      <anchor>ac7f678b595806053cafea26beb84763d</anchor>
      <arglist>[IGTL_VIDEOMETA_LEN_PATIENT_ID]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>patient_name</name>
      <anchorfile>structigtl__videometa__element.html</anchorfile>
      <anchor>ae4edd2180dbabdc7c817402db12f0671</anchor>
      <arglist>[IGTL_VIDEOMETA_LEN_PATIENT_NAME]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>reserved</name>
      <anchorfile>structigtl__videometa__element.html</anchorfile>
      <anchor>a286f8e82ff36fae460a8fa5674ca713b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint8</type>
      <name>scalar_type</name>
      <anchorfile>structigtl__videometa__element.html</anchorfile>
      <anchor>a684d1f25de9394892b6e376c3a645c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>size</name>
      <anchorfile>structigtl__videometa__element.html</anchorfile>
      <anchor>a280ce391605fbbe700666426d875c77c</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_int16</type>
      <name>zoom_level</name>
      <anchorfile>structigtl__videometa__element.html</anchorfile>
      <anchor>a91fea8af4663a72b8d23bca576763f38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::igtlAV1Decoder</name>
    <filename>classigtl_1_1igtlAV1Decoder.html</filename>
    <base>igtl::GenericDecoder</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DecodeBitStreamIntoFrame</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a0755e045fcb26bce381188dc9bf3a074</anchor>
      <arglist>(unsigned char *bitStream, igtl_uint8 *outputFrame, igtl_uint32 iDimensions[], igtl_uint64 &amp;iStreamSize)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DecodeBitStreamIntoFrame</name>
      <anchorfile>classigtl_1_1igtlAV1Decoder.html</anchorfile>
      <anchor>a1a0e4cdea25ef35e7b35913dd62c7f79</anchor>
      <arglist>(unsigned char *bitStream, igtl_uint8 *outputFrame, igtl_uint32 iDimensions[2], igtl_uint64 &amp;iStreamSize) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DecodeVideoMSGIntoSingleFrame</name>
      <anchorfile>classigtl_1_1igtlAV1Decoder.html</anchorfile>
      <anchor>a886e1100e0af33bc5e2d1be466df14ae</anchor>
      <arglist>(igtl::VideoMessage *videoMessage, SourcePicture *pDecodedPic) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl_int64</type>
      <name>getCurrentTime</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ae527f8cd6beedcd925c3507e106c05bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a1af1d4990ac1b37480e303e06f02dfa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetIsGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a70337d5a712b95e02c20d27af27b1c83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlAV1Decoder</name>
      <anchorfile>classigtl_1_1igtlAV1Decoder.html</anchorfile>
      <anchor>a6504f355b0eac784b3abb1068e7dfdc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1igtlAV1Decoder.html</anchorfile>
      <anchor>a7fa76c39db4d4f102172cb7ba1470008</anchor>
      <arglist>(igtlAV1Decoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ad8370b82298fa02e836c3ca96a242855</anchor>
      <arglist>(igtl::GenericDecoder, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1igtlAV1Decoder.html</anchorfile>
      <anchor>ae40f260499b01dd7efb6ef0bb08d6cb4</anchor>
      <arglist>(igtlAV1Decoder, GenericDecoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ab8434315e149e2308ebf44923c0a801c</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetIsGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a5b0adc21d495e8b401b45eda0abba426</anchor>
      <arglist>(bool grayImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackUncompressedData</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a0cdd23e9a49e340341a4148c60703f16</anchor>
      <arglist>(igtl::VideoMessage *videoMessage, SourcePicture *decodedPic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~igtlAV1Decoder</name>
      <anchorfile>classigtl_1_1igtlAV1Decoder.html</anchorfile>
      <anchor>ae8cde02512c8500d63e0373f9a1e5095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ConvertYUVToGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a232a346fe06f6fd10507b88238fd7694</anchor>
      <arglist>(igtl_uint8 *YUV420Frame, igtl_uint8 *GrayFrame, int iHeight, int iWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ConvertYUVToRGB</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ae3fe0c17e14e40fecdd36075688b5c0a</anchor>
      <arglist>(igtl_uint8 *YUVFrame, igtl_uint8 *RGBFrame, int iHeight, int iWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Write2File</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a8e8c0f586c6e8713e6ef0898c1d93a11</anchor>
      <arglist>(FILE *pFp, unsigned char *pData[], igtl_uint32 iDimensions[], igtl_uint32 iStride[])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>deviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ab8f8222fe0f2b68f036aef9e3a5f96d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a956de3fe095a963187f2f390e8a2988c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::igtlAV1Encoder</name>
    <filename>classigtl_1_1igtlAV1Encoder.html</filename>
    <base>igtl::GenericEncoder</base>
    <member kind="enumvalue">
      <name>SlowestSpeed</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>ac0e6b1f4772801ee4fc5299daf2bbdfda515b8be6ed8bbd93afc74c1abc1a1f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FastestSpeed</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>ac0e6b1f4772801ee4fc5299daf2bbdfdaa403e5906b026c282ed5cb837639ed6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FastestSpeed</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>ac0e6b1f4772801ee4fc5299daf2bbdfdaa403e5906b026c282ed5cb837639ed6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SlowestSpeed</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>ac0e6b1f4772801ee4fc5299daf2bbdfda515b8be6ed8bbd93afc74c1abc1a1f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ConvertToLocalImageFormat</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>a234785c4ae66722b5af59c73895766dd</anchor>
      <arglist>(SourcePicture *pSrcPic) override</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EncodeSingleFrameIntoVideoMSG</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>a223a99c7bab568b9c7b0bc4169a3c985</anchor>
      <arglist>(SourcePicture *pSrcPic, igtl::VideoMessage *videoMessage, bool isGrayImage=false) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FillSpecificParameters</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>ac0fd869b1b1df45fa8a27d5ece121942</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInitializationStatus</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ad78caf307fd44c4654b9df04a7918585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetLosslessLink</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a5d938933566220c3d0e4ad80ad7725ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetPicHeight</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>ae1a97b6d78720794a86964983c154dc9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetPicWidth</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>ab62ec0a54e5a651243c4e0a47b6ae10e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetVideoFrameType</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>afc09caed262be2ad951e32ebf24f43cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlAV1Encoder</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>a839c53b2d8a782338c6177eda23e58fb</anchor>
      <arglist>(char *configFile=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>a0e4424c903c0cde9089cefb5ac25a155</anchor>
      <arglist>(igtlAV1Encoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ab008518cb4d43607db39821a3cac289f</anchor>
      <arglist>(GenericEncoder, Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>acba5842540f5cda5ac6409bdc195364d</anchor>
      <arglist>(igtlAV1Encoder, GenericEncoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InitializeEncoder</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>a3197c6cec27ba03c811835a302395d13</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PackUncompressedData</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ab17ef3b62aeaeaf26b5f47b1b7f8fad6</anchor>
      <arglist>(SourcePicture *pSrcPic, igtl::VideoMessage *videoMessage, bool isGrayImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetConfigurationFile</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a3062d79523e3fe4dfd59150413a525ee</anchor>
      <arglist>(std::string configFile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetDeadlineMode</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>ab4542f3abef11928c41d3b3c60688be4</anchor>
      <arglist>(unsigned long mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetKeyFrameDistance</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>adc3b169214ac8a468cdd0c24804addf3</anchor>
      <arglist>(int frameNum) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetLosslessLink</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>a2059a4b5ef5279eb56d2462d7b484028</anchor>
      <arglist>(bool linkMethod) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPicWidthAndHeight</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>aa7894e9318523ba54f75b9ac8d8d079a</anchor>
      <arglist>(unsigned int width, unsigned int height) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetQP</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>a45303fa8497d4ebeedf2a11d2bebf076</anchor>
      <arglist>(int maxQP, int minQP) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetRCMode</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>ab52964c946c6feb1824e6f4921795b96</anchor>
      <arglist>(int value) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetRCTargetBitRate</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>a95c51af19324ee8a65a2390f61ffd574</anchor>
      <arglist>(unsigned int bitRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSpeed</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>ad8be49686d4c444a4a4c5de847cbff99</anchor>
      <arglist>(int speed) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~igtlAV1Encoder</name>
      <anchorfile>classigtl_1_1igtlAV1Encoder.html</anchorfile>
      <anchor>a976e75e9a75c020ef39ea0da520ef102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ConvertRGBToYUV</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>aaf55abdb6605c665e43bf2c6c8a305ce</anchor>
      <arglist>(igtlUint8 *rgb, igtlUint8 *destination, unsigned int width, unsigned int height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codecSpeed</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a12ef10929fcbea81ce6a637be25fb26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>configFile</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a184f04a12c55c16b9e1c87c09475d0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReadConfigFile</type>
      <name>cRdCfg</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a91bfe8794607708b2cabf2397628d582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>encodedFrameType</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a6db666c31e29284f9649a599afc0ec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>initializationDone</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a861dc3c6546c78ce628c08163fec3424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isLossLessLink</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a14757b9da47b57ba6c02bccbc76deb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>picHeight</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a021c10e506464282da7aa9622e4ec145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>picWidth</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a1999241652600dc3b15e3400d18806b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ImageMessage</name>
    <filename>classigtl_1_1ImageMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDIAN_BIG</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a63bc4ccc6d4452f913b45815169ae353afe34776aceb87788b7e284857f8a6ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDIAN_LITTLE</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a63bc4ccc6d4452f913b45815169ae353a7e72cb0e44cfbbd22e490224509d4f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT8</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763aa7a67bfbb277cc23720975a7d9c17bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT8</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763ac30b56c9d47677265f3449b4401b7032</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT16</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763a71da399537e10a4599d2ffcc6644094b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT16</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763a84814e6103aa12481a535901e5572c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT32</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763a79950392378b31b58d2bf63fb211f8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT32</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763a69b1cbfac24b3eb1d8be360505489559</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT32</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763ae78cd0bfddedbd2ef0a0f6ff912fb6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT64</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763ad283362c708f935a9cf77285a91383ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATE_RAS</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a504e04d8cbefea9983a8ce8a9d660405a13b9687fea6fc1057d2d50b350994266</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATE_LPS</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a504e04d8cbefea9983a8ce8a9d660405a7eddd1835e1fe81d03582360079695cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DTYPE_SCALAR</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a4674eb64ebe4ca378744712a4c83d4dbabcd61ca221833a9127b89e9e7b5c2d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DTYPE_VECTOR</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a4674eb64ebe4ca378744712a4c83d4dba6ccd7fb08e5dd85e01fe943f1297f410</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATE_LPS</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a504e04d8cbefea9983a8ce8a9d660405a7eddd1835e1fe81d03582360079695cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATE_RAS</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a504e04d8cbefea9983a8ce8a9d660405a13b9687fea6fc1057d2d50b350994266</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DTYPE_SCALAR</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a4674eb64ebe4ca378744712a4c83d4dbabcd61ca221833a9127b89e9e7b5c2d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DTYPE_VECTOR</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a4674eb64ebe4ca378744712a4c83d4dba6ccd7fb08e5dd85e01fe943f1297f410</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDIAN_BIG</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a63bc4ccc6d4452f913b45815169ae353afe34776aceb87788b7e284857f8a6ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDIAN_LITTLE</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a63bc4ccc6d4452f913b45815169ae353a7e72cb0e44cfbbd22e490224509d4f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT32</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763ae78cd0bfddedbd2ef0a0f6ff912fb6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT64</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763ad283362c708f935a9cf77285a91383ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT16</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763a71da399537e10a4599d2ffcc6644094b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT32</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763a79950392378b31b58d2bf63fb211f8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT8</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763aa7a67bfbb277cc23720975a7d9c17bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT16</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763a84814e6103aa12481a535901e5572c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT32</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763a69b1cbfac24b3eb1d8be360505489559</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT8</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a62e0aae7b9f5214dc63a1d070d648763ac30b56c9d47677265f3449b4401b7032</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateScalars</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>ad6dc038a3dcc67d380495828159c94a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCoordinateSystem</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a7b49e9866a536b082866ead687266eea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetDimensions</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a86084721fedcb3ebb6e8b5429708c0dc</anchor>
      <arglist>(int &amp;i, int &amp;j, int &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetDimensions</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a2ed6723c616edb52480e5cde02e2fd2e</anchor>
      <arglist>(int s[3])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndian</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a5e0635d588b52d5e10dc965390df1f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetImageSize</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a66e23b3384def6d366703824e08a11d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMatrix</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a090bc759ff6694fb90fc8efa0ef2a635</anchor>
      <arglist>(Matrix4x4 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNormals</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a7a513ddf96ceff52eb6e2e46fc95e281</anchor>
      <arglist>(float o[3][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNormals</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>abd292743a2795b70cca70a2dbdfe4068</anchor>
      <arglist>(float t[3], float s[3], float n[3])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumComponents</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a13a46480f6cced253ceace20cb326503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrigin</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a22fc0dc97e37717e6cff51660bc94d1a</anchor>
      <arglist>(float &amp;px, float &amp;py, float &amp;pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrigin</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>ac427b972d629f5f84d971b0fbe5f2478</anchor>
      <arglist>(float p[3])</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetScalarPointer</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a199e7001c3020b13ae5a0f72b3b9e203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetScalarSize</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>ab143bffb1c25ac96b270ef863a929421</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetScalarSize</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a6ce8221dc46d0c083dc0ef902e00b5fd</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetScalarType</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a2846be4b7e40e61c5138face170f499a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSpacing</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a5e171d437bcffc4bd5ad34e98f2896f1</anchor>
      <arglist>(float &amp;si, float &amp;sj, float &amp;sk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSpacing</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>aea7a8078d7872ff6fe616dc0770399bc</anchor>
      <arglist>(float s[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSubVolume</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>aa4907b1a6f6a98e32b6b34ddaeb4225a</anchor>
      <arglist>(int &amp;dimi, int &amp;dimj, int &amp;dimk, int &amp;offi, int &amp;offj, int &amp;offk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSubVolume</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>af1cbc290dfd8c046bf589432b42efe2a</anchor>
      <arglist>(int dim[3], int off[3])</arglist>
    </member>
    <member kind="function">
      <type>igtlUint64</type>
      <name>GetSubVolumeImageSize</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>afff2071d08cb738da9b08e96f69240b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCoordinateSystem</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a16e5973eb16235bd0f85e090cc8b9320</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDimensions</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>ad7d53467e35168e107001cb1be5dfff6</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDimensions</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a42a5d6234010537f6e08202b85d76c8d</anchor>
      <arglist>(int s[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndian</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>ae56c7fe03efea54f3f2e493d3752a332</anchor>
      <arglist>(int e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMatrix</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>ac8aa25424f7a86919031a2ed043a2eba</anchor>
      <arglist>(Matrix4x4 &amp;mat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormals</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a48d87482bc568b437b6bd1eed9b291d8</anchor>
      <arglist>(float o[3][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormals</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a25c8b624e5939752e7a1e5fd563d3466</anchor>
      <arglist>(float t[3], float s[3], float n[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNumComponents</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a1632b840d5f7f46c5f0d020f82f49382</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a609a7a475e05c693221ffd4c253f7d31</anchor>
      <arglist>(float p[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>ad40d7da554c6db6dbca685762a5fda3b</anchor>
      <arglist>(float px, float py, float pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarType</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a9298c2205ed3d2e9de44ff87b0f74ffc</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarTypeToInt16</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a37d60147a0361e96768e26f3d79ee49f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarTypeToInt32</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a59065a3616a52216cabbc21a72ff031b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarTypeToInt8</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a11718461c6e18ffd2e69574a794c78dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarTypeToUint16</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a0f5017c60128dce9c428f54d3b5e45ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarTypeToUint32</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a9d5cc4a40e73afc3bbb56d30b832f882</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarTypeToUint8</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a1bacf867c2e14f48d52f1b9db69700ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpacing</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a49d1ae57079d9f2463d04c575bf90cd7</anchor>
      <arglist>(float s[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpacing</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a30e0cbab656acf26378e253ee664118c</anchor>
      <arglist>(float si, float sj, float sk)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSubVolume</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a7806da124344bf0d4c5a143dbc57e765</anchor>
      <arglist>(int dim[3], int off[3])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSubVolume</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>adbd50d9bbe4f3fce1fb16d97c29de2c5</anchor>
      <arglist>(int dimi, int dimj, int dimk, int offi, int offj, int offk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a1bda57497532709e1578dc8c47f88540</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageMessage</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>ab13594a0107951f211a25aa6a4b7f639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>ada13b64d4754e872cd3531d1eef5fa97</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>af95b63d22950ef41d42fd7f43335ec25</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ImageMessage</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a8db1a2e5501ca9c174345efe97d14abc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>coordinate</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a18b329966d5e58d82743913a68d669f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dimensions</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a913309828bfb58457f3cb518ed5df5fa</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>endian</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a798254c442ca4d846544ba01e1bfd648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Image</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a53b6e5d9c4eee2791f3a9d2f6e2299ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_ImageHeader</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>afdb44c463e6b67710aa4e88ef51df762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix4x4</type>
      <name>matrix</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a0b850cc9ac6c50a597c99fa72d912478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numComponents</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>ad8fe74b6d4ee7e0a099aea7cac834199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ScalarSizeTable</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a2c917c4aef995ce5aafde457f3e12bf1</anchor>
      <arglist>[12]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>scalarType</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a1270f8a176eeef8610d14cedf68fa35e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>spacing</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>acf74dbc392e210ea99a35b99ca21b144</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subDimensions</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>a4fcca1d12882ff16a7e0f392955123d1</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subOffset</name>
      <anchorfile>classigtl_1_1ImageMessage.html</anchorfile>
      <anchor>ada84395741876e31197f2cd1780c344f</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ImageMessage2</name>
    <filename>classigtl_1_1ImageMessage2.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>ENDIAN_BIG</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ae50a6edfd5c550f63ccd877853929790ae36c7ed4eae263ea9c49834362386112</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDIAN_LITTLE</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ae50a6edfd5c550f63ccd877853929790a2525af5a6a12be68ed7bda33efbffe04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATE_RAS</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a45db8eaf7ae1b225d407d096764f0addaf517da0b93a9c35c3f01f6d21f9e7fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATE_LPS</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a45db8eaf7ae1b225d407d096764f0adda10f0363e44c8a1e374642e05a6c892ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DTYPE_SCALAR</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a2b9e392a019d196866a09443e1974ac3aae119964578c27f4a94bd1145bc35e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DTYPE_VECTOR</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a2b9e392a019d196866a09443e1974ac3aae2428d35f85214fc06a1740d637810b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT8</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fa85c1df436cd1342a4fc62c375431efb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT8</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fadba57752f1caa3b671f1041da0db550c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT16</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fa3f5588a9791cadb45e6e1ea98af261bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT16</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fa8b420b5976e5ba439124e3f5d7ac2091</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT32</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5faa9f7b2838bedfe50a754994a72b11f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT32</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fad524ead80e74ebb8e1a513fedd91cf78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT32</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fab136a9a2b5de47a2fa0fe8fdcfe84813</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT64</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fafb7aa1aa7609b6417ebc6a81924032a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATE_LPS</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a45db8eaf7ae1b225d407d096764f0adda10f0363e44c8a1e374642e05a6c892ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATE_RAS</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a45db8eaf7ae1b225d407d096764f0addaf517da0b93a9c35c3f01f6d21f9e7fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DTYPE_SCALAR</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a2b9e392a019d196866a09443e1974ac3aae119964578c27f4a94bd1145bc35e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DTYPE_VECTOR</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a2b9e392a019d196866a09443e1974ac3aae2428d35f85214fc06a1740d637810b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDIAN_BIG</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ae50a6edfd5c550f63ccd877853929790ae36c7ed4eae263ea9c49834362386112</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDIAN_LITTLE</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ae50a6edfd5c550f63ccd877853929790a2525af5a6a12be68ed7bda33efbffe04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT32</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fab136a9a2b5de47a2fa0fe8fdcfe84813</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT64</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fafb7aa1aa7609b6417ebc6a81924032a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT16</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fa3f5588a9791cadb45e6e1ea98af261bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT32</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5faa9f7b2838bedfe50a754994a72b11f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT8</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fa85c1df436cd1342a4fc62c375431efb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT16</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fa8b420b5976e5ba439124e3f5d7ac2091</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT32</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fad524ead80e74ebb8e1a513fedd91cf78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT8</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af6cb6e353d4a3ea15758276dc9cbce5fadba57752f1caa3b671f1041da0db550c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a1305e2fb070bcab45880c30e99079a99</anchor>
      <arglist>(igtlUint64 contentSize) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateScalars</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a9e992b66f046e6b1b6ff218a2df85b62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>aa5339f66a45bd5cbc240f1020c672949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCoordinateSystem</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a29e1f06f58cd439c565c3f880418f7df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetDimensions</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ab60faed6438b4565dfd47f1b26a24465</anchor>
      <arglist>(int &amp;i, int &amp;j, int &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetDimensions</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ad607cb23864167fed919499157d766bd</anchor>
      <arglist>(int s[3])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndian</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a4d15646e34f9ed8aed01854f215c818f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetImageSize</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ab66fcb39d4d20b4bdd5d71b575e92a7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMatrix</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a51bbd9913d155e9c81cd95d957300d77</anchor>
      <arglist>(Matrix4x4 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNormals</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a5ae2d0020948f6a70cef220e35921c78</anchor>
      <arglist>(float o[3][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNormals</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a5c68d829ae9de2f9bc03a0e9d19ffcde</anchor>
      <arglist>(float t[3], float s[3], float n[3])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfPackFragments</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a56111ea6ee774bb1ab86e32e30678cc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumComponents</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a4a564072cb92d0a47b24211926d79686</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrigin</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a861aeec589d9a36c94a36638474738e3</anchor>
      <arglist>(float &amp;px, float &amp;py, float &amp;pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrigin</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>aef530821c55f04fb99e2b665f4be14da</anchor>
      <arglist>(float p[3])</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackFragmentPointer</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ac715b549c7c10b6221af498ce6dc8fce</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetPackFragmentSize</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a836ab353bf13de569613a584c125e18b</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetScalarPointer</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ad15f56c6ef6d722ec4ad742980e1944f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetScalarSize</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ac8e38e07ac26204bcb3e4c5999bdc6f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetScalarSize</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ab17f6db6f65483f0b0d795ff3c14b851</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetScalarType</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ad9fe3493851f559aed7a9c019a02b60a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSpacing</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>adf481cd1ecad81e17cb55f0aa06d0639</anchor>
      <arglist>(float &amp;si, float &amp;sj, float &amp;sk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSpacing</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a79b876461a686c1e8fbfddfbe787bd4d</anchor>
      <arglist>(float s[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSubVolume</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>aad4e1b140a5b13199a2ed960a52f3192</anchor>
      <arglist>(int &amp;dimi, int &amp;dimj, int &amp;dimk, int &amp;offi, int &amp;offj, int &amp;offk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSubVolume</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a1af810af886f33050018ac55f10e7c5b</anchor>
      <arglist>(int dim[3], int off[3])</arglist>
    </member>
    <member kind="function">
      <type>igtlUint64</type>
      <name>GetSubVolumeImageSize</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a5283ca0cefea3a2aa111ff2311a5281f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a777101969305c570a0712f046722e499</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>adccbc9ee0e1e910d22c97015179f0a44</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCoordinateSystem</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af96166e32184a69ae7529a7501bb86f2</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDimensions</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>affd72e93766539c97fa3a60252668bb6</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDimensions</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>aedaea436c16a33f9d33ac3d4995b5f5e</anchor>
      <arglist>(int s[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndian</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a20c0ba919ab84b7ffecf8ff43e926c91</anchor>
      <arglist>(int e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMatrix</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ac1a9760aeade82c61157550bedec3769</anchor>
      <arglist>(Matrix4x4 &amp;mat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormals</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ab6d8233ae5a56e3e0d4c99a174e4b1a4</anchor>
      <arglist>(float o[3][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormals</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a2f5f1547f1129b1fb0d3bf920fe2708a</anchor>
      <arglist>(float t[3], float s[3], float n[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNumComponents</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a6accd76c6d8297780899d883a6e60c21</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a89489d40e0dccc873830e839eea49901</anchor>
      <arglist>(float p[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>af0706485029eb37427379e70f46a28a7</anchor>
      <arglist>(float px, float py, float pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetScalarPointer</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a016c74fcd1841c048916924d260fec21</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarType</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a8acdd9530e3db02961969d66e17a51aa</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarTypeToInt16</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a0966d1bf37fcb13c51be89daa5993ce4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarTypeToInt32</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a102662b5c69786957ceae77aec7d6c7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarTypeToInt8</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a64d81371c4cd79c8b7b34c234f69393a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarTypeToUint16</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a743471e822cf46d9b9430f72e839dfce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarTypeToUint32</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a5722336c8de352fc6ef533f90b2045fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarTypeToUint8</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ab104c9a0a2dc4a2f80b7050bbe7f276f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpacing</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a6da9e38e374b9bcfefbe3775c707df81</anchor>
      <arglist>(float s[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpacing</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a7b550d859f842927ae279f17514e51da</anchor>
      <arglist>(float si, float sj, float sk)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSubVolume</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>aadeba9e06db8fccc049ab18846a49ce9</anchor>
      <arglist>(int dim[3], int off[3])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSubVolume</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ab2fa885f93f5fa31f8e7b2616900a9ca</anchor>
      <arglist>(int dimi, int dimj, int dimk, int offi, int offj, int offk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a7d06df9c66b02386d5fd458dcf951e32</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>coordinate</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ab2d5358bc20b4560b6ccf873ead389d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dimensions</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a3d8a02c46d57bb673d56e04aef0059c7</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>endian</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ae5979e37c73c6391b0ce1ae68c7490cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char *</type>
      <name>m_Image</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a7a241cdb07d7b68a58450afc9686449c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char *</type>
      <name>m_ImageHeader</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>aa4ef5c571f7a5f2583e2c7cfc1195788</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_ImageSize</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a2e2328a509ed07b3a96015478f2884b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_SelfAllocatedImage</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a328ae644ebb918019a3a29e93a80f358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_SelfAllocatedImageHeader</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a01784ddb64cce35b3bcb9609331c4015</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char *</type>
      <name>m_SinglePack</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a00ffd5fd23517c28e3e96eca95c8a2cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_SinglePackSize</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a1a549dac27aae9d890dcacc1307e3c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix4x4</type>
      <name>matrix</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a74e3123b626f56e8e9ede99def577284</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numComponents</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>acb72dbc6e8dd204e2a8f1d1904644d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ScalarSizeTable</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ae501dd202549ae1f64b6e151de3a02b6</anchor>
      <arglist>[12]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>scalarType</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a23633176b776e601104d1d69751a7dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>spacing</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a13c0ba0297321ca9aa167832ee186fe2</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>subDimensions</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a6f0b39ecac8c3a392bacfe28ff1e2e13</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>subOffset</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a3234f03fa81b5b5b2c3bcc7af651d739</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ad181c9afe6c884c812f916818874edfe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageMessage2</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>a29792dae90540469e9e4ac28f94bbd11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ImageMessage2</name>
      <anchorfile>classigtl_1_1ImageMessage2.html</anchorfile>
      <anchor>ae45ad5bb8518be6d3006d78aa62ab405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ImageMetaElement</name>
    <filename>classigtl_1_1ImageMetaElement.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a11761e5c06e4a430952725bf98fd5f7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetModality</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a38570a65165891a9a8efd2fb3af23512</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>ae123a0eddd5e053066df1df47d6459cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetPatientID</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a44189e8730016450b0b2c39fff60135d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetPatientName</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a7cd6590eae175b3af11237ec1df5d009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint8</type>
      <name>GetScalarType</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>afe8c08ffe6b550452285a253688e18ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSize</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a5a2b1ff675c4a84fcb26364e05836029</anchor>
      <arglist>(igtlUint16 &amp;si, igtlUint16 &amp;sj, igtlUint16 &amp;sk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSize</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>ad654efd6361ed2ba6e820712e8537f38</anchor>
      <arglist>(igtlUint16 *size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>acc2582086478a892361b3afcd994c936</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a841310adcd599759864eb2ca392d016f</anchor>
      <arglist>(igtl::ImageMetaElement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>ab05ef42311d1349f27ec07af7e11d918</anchor>
      <arglist>(igtl::ImageMetaElement, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a8ac8f72501011313c116734a624bebd9</anchor>
      <arglist>(const char *devname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetModality</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a86793697d404dbe7180a9504fd9b2232</anchor>
      <arglist>(const char *modality)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetName</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>ae6995e3b9b3652c6f2f8648de23245e0</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPatientID</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a29cbbea369140313e2a3090f3f7a2a66</anchor>
      <arglist>(const char *patid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPatientName</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a45d4bb6b94df797ac044dfc28303d613</anchor>
      <arglist>(const char *patname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarType</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a47d5858df84ce76f8812bbeff318e19b</anchor>
      <arglist>(igtlUint8 type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSize</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a4edc105fe9f7cd80abb8715ecb442329</anchor>
      <arglist>(igtlUint16 si, igtlUint16 sj, igtlUint16 sk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSize</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a86ced3aadad74eee129c18866f4af4d7</anchor>
      <arglist>(igtlUint16 size[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>aa8e4d47610733fb2a834af3cd146de0e</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageMetaElement</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a0feb179a26eb9c127d38201a01093cb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ImageMetaElement</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a4f151af29d47fb2533c8460432128728</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a9040af774db74fd5f73b8ce72c7f3310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Modality</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a9cb745d7ae57f45d25f64563eeedf4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Name</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>af19cd0017ad0a4f3ed29ad51a867fd91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_PatientID</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a792413eee026027c0f98ec9915e6c504</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_PatientName</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a20c73963db15db991f3e8a7145823265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_ScalarType</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a86c75b3de2b069a234c085cc07773d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint16</type>
      <name>m_Size</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a0fb6e4f862f0e1e819c6258f388be45a</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeStamp::Pointer</type>
      <name>m_TimeStamp</name>
      <anchorfile>classigtl_1_1ImageMetaElement.html</anchorfile>
      <anchor>a49fb4e363117ea12b2074f22f1abada5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ImageMetaMessage</name>
    <filename>classigtl_1_1ImageMetaMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddImageMetaElement</name>
      <anchorfile>classigtl_1_1ImageMetaMessage.html</anchorfile>
      <anchor>a156707fb1752e860eada3f71c01c8988</anchor>
      <arglist>(ImageMetaElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearImageMetaElement</name>
      <anchorfile>classigtl_1_1ImageMetaMessage.html</anchorfile>
      <anchor>adb070dee730b5d84d10fc16bec715555</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetImageMetaElement</name>
      <anchorfile>classigtl_1_1ImageMetaMessage.html</anchorfile>
      <anchor>af7083dd6e8dee67b518a11c796ec5828</anchor>
      <arglist>(int index, ImageMetaElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfImageMetaElement</name>
      <anchorfile>classigtl_1_1ImageMetaMessage.html</anchorfile>
      <anchor>a56e50bae88d15498d802acd4fe0df448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1ImageMetaMessage.html</anchorfile>
      <anchor>af5d13d00627bbf24fa20eee465081c86</anchor>
      <arglist>(igtl::ImageMetaMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1ImageMetaMessage.html</anchorfile>
      <anchor>a121f63980ce66267b2216d7ea6a0241d</anchor>
      <arglist>(igtl::ImageMetaMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1ImageMetaMessage.html</anchorfile>
      <anchor>a6fd57f1dd128a8a91680590f609cab94</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageMetaMessage</name>
      <anchorfile>classigtl_1_1ImageMetaMessage.html</anchorfile>
      <anchor>aeaed397a9048d228a5f7c3f0fa9f41c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1ImageMetaMessage.html</anchorfile>
      <anchor>acc41ab90cea0dbed262da77dae6f1057</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1ImageMetaMessage.html</anchorfile>
      <anchor>ac0fd8ae58342efefa2ab6aa0764bccce</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ImageMetaMessage</name>
      <anchorfile>classigtl_1_1ImageMetaMessage.html</anchorfile>
      <anchor>a30f5a77831784af9e78f7a81cbdd4d98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ImageMetaElement::Pointer &gt;</type>
      <name>m_ImageMetaList</name>
      <anchorfile>classigtl_1_1ImageMetaMessage.html</anchorfile>
      <anchor>aacd479ac7b59ee8b860d0dbfefa1c263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl::H265Decoder::Info</name>
    <filename>structigtl_1_1H265Decoder_1_1Info.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>NbFrame</name>
      <anchorfile>structigtl_1_1H265Decoder_1_1Info.html</anchorfile>
      <anchor>a9c25a06a928f9f47dc773257848912fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Poc</name>
      <anchorfile>structigtl_1_1H265Decoder_1_1Info.html</anchorfile>
      <anchor>aa3185ba31abde99fac1cb10b738bbcfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Qid</name>
      <anchorfile>structigtl_1_1H265Decoder_1_1Info.html</anchorfile>
      <anchor>a231740e10c576aa6e5e914c0707e50a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>size</name>
      <anchorfile>structigtl_1_1H265Decoder_1_1Info.html</anchorfile>
      <anchor>adb136e8789064c4d6ecf1f3ce80aa27a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Tid</name>
      <anchorfile>structigtl_1_1H265Decoder_1_1Info.html</anchorfile>
      <anchor>a2a88bb974d3a7b3b3934264be4e493f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structigtl_1_1H265Decoder_1_1Info.html</anchorfile>
      <anchor>abdbaf182c25ba6584a1a42fe54143cc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::LabelMetaElement</name>
    <filename>classigtl_1_1LabelMetaElement.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a2a031f02b4a93a4f8ac3fcb685f8149b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtlUint8</type>
      <name>GetLabel</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>af567be75f3b7eea95d22f452f30604c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>aff2d2dc990e7d7f00ff09e6866473a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetOwner</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a28fec6c68ba9c712e4cd27495b5d377c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRGBA</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a08a6f81cb8af3d0b4aefb11cf8f17a74</anchor>
      <arglist>(igtlUint8 &amp;r, igtlUint8 &amp;g, igtlUint8 &amp;b, igtlUint8 &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRGBA</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a9daab4fd38622fde0d42bbeb1a13c6b1</anchor>
      <arglist>(igtlUint8 *rgba)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSize</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a6b9141a8519f938f7d668c39dbd2bbd7</anchor>
      <arglist>(igtlUint16 &amp;si, igtlUint16 &amp;sj, igtlUint16 &amp;sk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSize</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a17da9bfc718c003bd4dbff3229892ddb</anchor>
      <arglist>(igtlUint16 *size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>ad0b9b94b16884a62ea951f2ae9439f70</anchor>
      <arglist>(igtl::LabelMetaElement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>ad2f7c01807669ec66c9f862463c77f35</anchor>
      <arglist>(igtl::LabelMetaElement, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a3aaea350ef6b436f5459bb86b2bd038c</anchor>
      <arglist>(const char *devname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLabel</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a4c7ec220e21c67105b3a79424ac72b9c</anchor>
      <arglist>(igtlUint8 label)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetName</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a5bde80f01b9a88f1f77a852827e8ba52</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetOwner</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a41f4303f1b517c4da7522ab6408e9d53</anchor>
      <arglist>(const char *owner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRGBA</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a6ef2c786b56ff8c31c4873bb78c9d99d</anchor>
      <arglist>(igtlUint8 r, igtlUint8 g, igtlUint8 b, igtlUint8 a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRGBA</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a1ef784a320943d67f7c7ccdeeb89f95f</anchor>
      <arglist>(igtlUint8 rgba[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSize</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a3680eb3751b29a5b48a38eb688bfdcce</anchor>
      <arglist>(igtlUint16 si, igtlUint16 sj, igtlUint16 sk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSize</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>ad7fef1a95ecaf3285d742615ff96554d</anchor>
      <arglist>(igtlUint16 size[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LabelMetaElement</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a5876ed40cad2e159a89434571279113f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~LabelMetaElement</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a1fbad1254df68462da1f0e7277912aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>aa24c2ef01aeb7a91d26d34d6e08b1560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_Label</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>abba2346ea138a554030557a16d3f036c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Name</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a5a3baab4d5f8b712094c6a05a7978ff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Owner</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a4ebced97ce486562cd2a729e20ae3d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_RGBA</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>afc966e2797e60cd11302f43d05972693</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint16</type>
      <name>m_Size</name>
      <anchorfile>classigtl_1_1LabelMetaElement.html</anchorfile>
      <anchor>a76b469e4ee7a4354a4fdd77169f2399d</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::LabelMetaMessage</name>
    <filename>classigtl_1_1LabelMetaMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddLabelMetaElement</name>
      <anchorfile>classigtl_1_1LabelMetaMessage.html</anchorfile>
      <anchor>ad0bc9275e8456565bffc3c4fa5561c21</anchor>
      <arglist>(LabelMetaElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearLabelMetaElement</name>
      <anchorfile>classigtl_1_1LabelMetaMessage.html</anchorfile>
      <anchor>a77083db8e1cde1b8a1fb980fd41991f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetLabelMetaElement</name>
      <anchorfile>classigtl_1_1LabelMetaMessage.html</anchorfile>
      <anchor>a3fad76553f7ab60daaeed024f9ebdd07</anchor>
      <arglist>(int index, LabelMetaElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfLabelMetaElement</name>
      <anchorfile>classigtl_1_1LabelMetaMessage.html</anchorfile>
      <anchor>a3101e78cd60fe5a79b1a56aecef62742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1LabelMetaMessage.html</anchorfile>
      <anchor>a0a975a3d828ed3c0bd8e3eec95bdbd04</anchor>
      <arglist>(igtl::LabelMetaMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1LabelMetaMessage.html</anchorfile>
      <anchor>a8462f016555b8156992b78b77ea82991</anchor>
      <arglist>(igtl::LabelMetaMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1LabelMetaMessage.html</anchorfile>
      <anchor>afb2b721e7e940eff54cfb03111d0518e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LabelMetaMessage</name>
      <anchorfile>classigtl_1_1LabelMetaMessage.html</anchorfile>
      <anchor>a991626099ceaba16612152cd296330b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1LabelMetaMessage.html</anchorfile>
      <anchor>aa250fc1d7c79d9c1022496141530dd02</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1LabelMetaMessage.html</anchorfile>
      <anchor>af17e573587f95fd29ffde85138ebb52e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~LabelMetaMessage</name>
      <anchorfile>classigtl_1_1LabelMetaMessage.html</anchorfile>
      <anchor>a32a6c6894cb2e214ad7266e9099b0a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; LabelMetaElement::Pointer &gt;</type>
      <name>m_LabelMetaList</name>
      <anchorfile>classigtl_1_1LabelMetaMessage.html</anchorfile>
      <anchor>aa20f95490366b01b65e721808db0a930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl::LayerpEncCtx_s</name>
    <filename>structigtl_1_1LayerpEncCtx__s.html</filename>
    <member kind="variable">
      <type>int32_t</type>
      <name>iDLayerQp</name>
      <anchorfile>structigtl_1_1LayerpEncCtx__s.html</anchorfile>
      <anchor>a84e9a4ffebe5439a70ce735735d3507c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SSliceArgument</type>
      <name>sSliceArgument</name>
      <anchorfile>structigtl_1_1LayerpEncCtx__s.html</anchorfile>
      <anchor>a47511855eaea50cd50a31febd471a170</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::LightObject</name>
    <filename>classigtl_1_1LightObject.html</filename>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad9eb7a0daeedece415de23d8fe7fb2f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a3d6cb85cb76122f9face9416dc53d766</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a625027225e277ccfe4c57e97c950f36a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a78e0b6f41ea3835d000a794008ce80b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a0945ed18193abdae32a0498dae0104bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LightObject</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad5a1f7324f511af994af6b6e4d23e482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6302016f8a7f5b7736e2c96d5be26fad</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LightObject</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a81aeb499f6f8d6628ef81b26982b8ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::MessageBase</name>
    <filename>classigtl_1_1MessageBase.html</filename>
    <base>igtl::Object</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aed868c4613b81bafcca995b70a498897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MessageBase</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a996fa6b77d4394cd4302e2557add9198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a676a1e762a1075bbc79885da102fde3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abc10ae9c58764bfaebe9e73297deb0a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~MessageBase</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3f676d27a6c138a68a98fc0ce1607670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::MessageFactory</name>
    <filename>classigtl_1_1MessageFactory.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>igtl::MessageBase::Pointer(*</type>
      <name>PointerToMessageBaseNew</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>a36af0125143181f5c6900cb332864bfc</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>AddMessageType</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>a1331555d33a7e8967af9f96db3294f7b</anchor>
      <arglist>(const std::string &amp;messageTypeName, MessageFactory::PointerToMessageBaseNew messageTypeNewPointer)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>igtl::MessageHeader::Pointer</type>
      <name>CreateHeaderMessage</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>a3cdf3e24c4c2d850a544d5185bf34a73</anchor>
      <arglist>(int headerVersion) const</arglist>
    </member>
    <member kind="function">
      <type>igtl::MessageBase::Pointer</type>
      <name>CreateReceiveMessage</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>abb92729838f598f9b5766b91e95fe6b6</anchor>
      <arglist>(igtl::MessageHeader::Pointer headerMsg) const</arglist>
    </member>
    <member kind="function">
      <type>igtl::MessageBase::Pointer</type>
      <name>CreateSendMessage</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>a7c802dbe80978127b96d5e0daecee56c</anchor>
      <arglist>(const std::string &amp;messageType, int headerVersion) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAvailableMessageTypes</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>aa1fab2851730317f6d71a28b48f9b489</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;types) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtl::MessageBase::Pointer</type>
      <name>GetMessage</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>a3cc31817dac4c8d131792df6d1dc3ec2</anchor>
      <arglist>(igtl::MessageHeader::Pointer headerMsg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageFactory::PointerToMessageBaseNew</type>
      <name>GetMessageTypeNewPointer</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>a6865a73b7bde16e2f1ebccb36d2c85c8</anchor>
      <arglist>(const std::string &amp;messageTypeName) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>a8592553ac56dd8d173b37da7f7cb77df</anchor>
      <arglist>(MessageFactory, Object) igtlNewMacro(MessageFactory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsValid</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>a6fc83163d5e56ce090c144078fdf73cd</anchor>
      <arglist>(igtl::MessageHeader::Pointer headerMsg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsValid</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>a902e0296485b9640f79c1e9d40604569</anchor>
      <arglist>(igtl::MessageHeader::Pointer headerMsg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MessageFactory</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>a3f70323bac7674c1463c057874dcf33a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~MessageFactory</name>
      <anchorfile>classigtl_1_1MessageFactory.html</anchorfile>
      <anchor>adbb75108c6ba953eeb2c42d8ce08ab31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::MessageHandler</name>
    <filename>classigtl_1_1MessageHandler.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MessageBase *</type>
      <name>GetMessageBuffer</name>
      <anchorfile>classigtl_1_1MessageHandler.html</anchorfile>
      <anchor>a72cbcd640ee6a871c4ffb67703a88690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageHandler.html</anchorfile>
      <anchor>a81a508c9bd90b4c0e20f51904e360bc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl_uint64</type>
      <name>ReceiveMessage</name>
      <anchorfile>classigtl_1_1MessageHandler.html</anchorfile>
      <anchor>a98934797f8bcdc31719f62b1ae5d2049</anchor>
      <arglist>(Socket *, MessageBase *, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMessageBuffer</name>
      <anchorfile>classigtl_1_1MessageHandler.html</anchorfile>
      <anchor>a1c9bc5eb3dd369f5c47110ebf0259896</anchor>
      <arglist>(MessageBase *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MessageHandler</name>
      <anchorfile>classigtl_1_1MessageHandler.html</anchorfile>
      <anchor>a2c6d58b7e72002bb0ab155742f772135</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~MessageHandler</name>
      <anchorfile>classigtl_1_1MessageHandler.html</anchorfile>
      <anchor>a2d29e03d71494cbbc0daf1a7b6df27a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MessageBase *</type>
      <name>m_Buffer</name>
      <anchorfile>classigtl_1_1MessageHandler.html</anchorfile>
      <anchor>a9c82d007b621ef39ff0e0841db9c5ae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::MessageRTPWrapper</name>
    <filename>classigtl_1_1MessageRTPWrapper.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MessageReady</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0ab6c36dc897fcd6415c4a0c0f179d1fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PacketReady</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0aa2a4fc2b58e6febda281a5dd642b7600</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PacketStatus</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PacketReady</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0aa2a4fc2b58e6febda281a5dd642b7600</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WaitingForAnotherMSG</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0abbc06b4ef95be16253c4850b60be8146</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProcessFragment</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0a724ecc1dd33c3f88d11e68daaeb38a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MessageReady</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0ab6c36dc897fcd6415c4a0c0f179d1fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ToUnpackAnotherMSG</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0a058054bba1c78ac259e55e3db551afc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WaitingForAnotherPacket</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0a207c95e9e8185c49c4cfdea141213d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProcessFragment</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0a724ecc1dd33c3f88d11e68daaeb38a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ToUnpackAnotherMSG</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0a058054bba1c78ac259e55e3db551afc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WaitingForAnotherMSG</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0abbc06b4ef95be16253c4850b60be8146</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WaitingForAnotherPacket</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a766db13fc173ffe5dedc58cd46ca16f0a207c95e9e8185c49c4cfdea141213d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCurMSGLocation</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a911507c69dfc813264ed9d57cadd4a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PacketBuffer</type>
      <name>GetInCommingPackets</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a8a5539c51dddadd8f518259567797ca9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberODataFragments</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>adb36d00f2c9bf4b1fce3720e085026e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberODataFragToSent</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a78e5c592672c7c73b667cb7e37f0084a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PacketBuffer</type>
      <name>GetOutGoingPackets</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a4bd9a21f947de74e5ed9b87c7b180301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetPackedMSGLocation</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a21881eda413d1b6f45081db8c8cd0283</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetRTPPayloadLength</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a4d93ab6134952cd8914cbf73645c4bea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint8</type>
      <name>GetRTPPayLoadType</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a009f60db670974f1659a7db0856ecb1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetRTPWrapperStatus</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a12c607bc018fd66ae593de1ab6ce89e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PushDataIntoPacketBuffer</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>ac019386be990c879e6574e0895332974</anchor>
      <arglist>(igtlUint8 *UDPPacket, igtlUint16 PacketLen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SendBufferedDataWithInterval</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a7f2a56365d9da5f2c7a6cf7876e3dc0b</anchor>
      <arglist>(igtl::UDPServerSocket::Pointer &amp;socket, int interval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCSRC</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>af48dbfe7840056e5a22c3ea6e613c8a7</anchor>
      <arglist>(igtl_uint32 identifier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFCFS</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>af6335ce87e2e60ccd383f892682c7f08</anchor>
      <arglist>(bool isFCFS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMSGHeader</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>ac846f04b60cfc29f961a5630ab422ab5</anchor>
      <arglist>(igtl_uint8 *header)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRTPPayloadLength</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>aa9b2a444dca674e2a1ad6683bfc4330e</anchor>
      <arglist>(unsigned int payloadLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRTPPayloadType</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a7f9ce58ae2dc79ef2a5ab551a366f7c8</anchor>
      <arglist>(igtl_uint8 payLoadType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSeqNum</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>ab1375a8a8f1ef4d80eb1497cec7d2e49</anchor>
      <arglist>(igtl_uint16 num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSSRC</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>afcc283de229f2891cc710aa4d81bbc2e</anchor>
      <arglist>(igtl_uint32 identifier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>igtl::MessageBase::Pointer</type>
      <name>UnWrapMessage</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a3ecd9116230d4ad00e96c1ce66c37ff3</anchor>
      <arglist>(igtl_uint8 *messageContent, int totMsgLen)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnWrapPacketWithTypeAndName</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>aeb005992f8215b55188ce00eeaf9a976</anchor>
      <arglist>(const char *deviceType, const char *deviceName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WrapMessageAndPushToBuffer</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>aac4ad4e69f1a7c7c30278e092a2ffa82</anchor>
      <arglist>(igtl_uint8 *messagePackPointer, int msgtotalLen)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WrapMessageAndSend</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a364e8ba1225a8bc0425ebd133f9e0fb3</anchor>
      <arglist>(igtl::UDPServerSocket::Pointer &amp;socket, igtl_uint8 *messagePackPointer, int msgtotalLen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint16</type>
      <name>fragmentNumber</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a9b6500d196e6a5ec86eb233ac95a61a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; igtl_uint16 &gt;</type>
      <name>fragmentNumberList</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a95e76a8d1f45d14dfe8bcd54ce5e22ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl::SimpleMutexLock *</type>
      <name>glock</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a8427c428d2cb733095c797e4facad8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>messageID</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a4814f59db81d0151dc4103b5650859cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; igtl_uint64 &gt;</type>
      <name>PacketBeforeSendTimeStampList</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a7443814f6b5c3b14d6b0f8df8705648a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>packetIntervalTime</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a1cdb7b012fcde28f349bb1e0e2a06268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; igtl_uint64 &gt;</type>
      <name>PacketSendTimeStampList</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>acbb921db93cc74e8a45cf6a7ea6ea91f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; igtl_uint64 &gt;</type>
      <name>PacketTotalLengthList</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>ac126b5322275ae276148fb6174b6b1ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; igtl_uint32, igtl::UnWrappedMessage * &gt;</type>
      <name>unWrappedMessages</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>afc1f139244b3cbb40512ca6c4377759e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtl_uint8 *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>ab1001fade1c4d989f90b51a04cf7639f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MessageRTPWrapper</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>ad76fd7c7a0b2accde10bd2546f29f6ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>WrapMessage</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>abc292ed0ab12f249ae46866926edb5e6</anchor>
      <arglist>(igtl_uint8 *messageContent, int bodyMsgLen)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~MessageRTPWrapper</name>
      <anchorfile>classigtl_1_1MessageRTPWrapper.html</anchorfile>
      <anchor>a57f00e4d57a60d7f5987d291d14895e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::MultiThreader</name>
    <filename>classigtl_1_1MultiThreader.html</filename>
    <base>igtl::Object</base>
    <class kind="class">igtl::MultiThreader::ThreadInfo</class>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetNumberOfThreads</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a238a0c548842b1edfea2409b1d252cd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a954fe58d3863fa4c245c4a3ab05f38dd</anchor>
      <arglist>(Self)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlSetClampMacro</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a1060412f5c6b297c719203586cc902c3</anchor>
      <arglist>(NumberOfThreads, int, 1, IGTL_MAX_THREADS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>ac16ac2d210ee0110590739b3a266d748</anchor>
      <arglist>(MultiThreader, Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MultipleMethodExecute</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a430d87569bede6e088b530113a93c814</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMultipleMethod</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a2db4af459bdb4c15ab1250899a7f3fa9</anchor>
      <arglist>(int index, ThreadFunctionType, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSingleMethod</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a65a2e94a8ba8c76996e60519b2babd7a</anchor>
      <arglist>(ThreadFunctionType, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SingleMethodExecute</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>aa0184a232894b581ade9226e6a64f46a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SpawnThread</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a1399b9333ad49c21e0abaf3d2ee6ffed</anchor>
      <arglist>(ThreadFunctionType, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TerminateThread</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a0401f2d4f7197548cf14d7654ea296fa</anchor>
      <arglist>(int thread_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MultiThreaderIDType</type>
      <name>GetCurrentThreadID</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a0dce59094ec43f75166e0381de5baa33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetGlobalDefaultNumberOfThreads</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a5b7721de1038e679df332ab4d8f473b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetGlobalMaximumNumberOfThreads</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a53fb7c2cc88e8045427efc6d2c15503f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalDefaultNumberOfThreads</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a9d60d19fbae7cced82412328748de3b5</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalMaximumNumberOfThreads</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a0eb894b8a801e1b6b50d2942b2b7dd16</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ThreadsEqual</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a1d71a7d26c4aa562159f6228a36876f3</anchor>
      <arglist>(MultiThreaderIDType t1, MultiThreaderIDType t2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiThreader</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>aa0201fe9dc88370f772a50ec7f003d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>af8bcb61a2dabc06a0840ad24e435a260</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~MultiThreader</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a2d09213d75964f86d58d20d5e68fe6ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>m_MultipleData</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a35a8fc9de5ad99110f2c384646012a77</anchor>
      <arglist>[IGTL_MAX_THREADS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ThreadFunctionType</type>
      <name>m_MultipleMethod</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a5528c2aa263600f4436dbfa3078ac15c</anchor>
      <arglist>[IGTL_MAX_THREADS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_NumberOfThreads</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a378ad67fedd0d27458afc1178f82fb63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>m_SingleData</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a39932ceea1e568b1dd1ed823d981fc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ThreadFunctionType</type>
      <name>m_SingleMethod</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a985aeec15a726e2b2c920d1f2f5dbbb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_SpawnedThreadActiveFlag</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>afaa461de554d5aa6921d488aa6d42da1</anchor>
      <arglist>[IGTL_MAX_THREADS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MutexLock::Pointer</type>
      <name>m_SpawnedThreadActiveFlagLock</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a07ed81b512dd0966560cffb503b10034</anchor>
      <arglist>[IGTL_MAX_THREADS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ThreadInfo</type>
      <name>m_SpawnedThreadInfoArray</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a980cc01945e6b339a9bcb52e5cfd141d</anchor>
      <arglist>[IGTL_MAX_THREADS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ThreadProcessIDType</type>
      <name>m_SpawnedThreadProcessID</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>af62203388a69a757d043c7994f92d3c8</anchor>
      <arglist>[IGTL_MAX_THREADS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ThreadInfo</type>
      <name>m_ThreadInfoArray</name>
      <anchorfile>classigtl_1_1MultiThreader.html</anchorfile>
      <anchor>a52e3246b1f7b437d6b0d6b0473a4879d</anchor>
      <arglist>[IGTL_MAX_THREADS]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::MutexLock</name>
    <filename>classigtl_1_1MutexLock.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1MutexLock.html</anchorfile>
      <anchor>ac24cbeb4da9647940f034c0614947f40</anchor>
      <arglist>(Self)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1MutexLock.html</anchorfile>
      <anchor>adf891e42ede3820d45b4efab7415d1c9</anchor>
      <arglist>(MutexLock, Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Lock</name>
      <anchorfile>classigtl_1_1MutexLock.html</anchorfile>
      <anchor>a11e09c9ed45d336a180d16c8aee8bf25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Unlock</name>
      <anchorfile>classigtl_1_1MutexLock.html</anchorfile>
      <anchor>ad42de190488b53b337c95fa22b0478bb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MutexLock</name>
      <anchorfile>classigtl_1_1MutexLock.html</anchorfile>
      <anchor>a853c68c7f82f46c9d4390c8ab8b10cdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1MutexLock.html</anchorfile>
      <anchor>a151d1438b482b6e2ee449b10282c061e</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~MutexLock</name>
      <anchorfile>classigtl_1_1MutexLock.html</anchorfile>
      <anchor>ac085ac4e2964e886537cf6a5b0472404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleMutexLock</type>
      <name>m_SimpleMutexLock</name>
      <anchorfile>classigtl_1_1MutexLock.html</anchorfile>
      <anchor>af656d6e2aadc2a050fb365aab09035d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::NDArrayMessage</name>
    <filename>classigtl_1_1NDArrayMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT8</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08ab99a1e6a4be7ff7db9f384d76c1a33a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT8</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08a0242419d6e1fc8282fe22fc3f6533bf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT16</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08a16720ba2f81c6e88c90ece9d330c5c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT16</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08a22f74889a315c272208ac31641a5acbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT32</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08af201a8fefc387b331a402fb0d40a9eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT32</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08a4a1f69d0790109d171dbf17f759c61ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT32</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08ae5257c37fba635844e09ed81555c873d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT64</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08a1fbf42f28386a867ea690f49d6b8efd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_COMPLEX</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08a0becc7d2bf61fcc5319664ca7e396fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_COMPLEX</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08a0becc7d2bf61fcc5319664ca7e396fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT32</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08ae5257c37fba635844e09ed81555c873d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_FLOAT64</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08a1fbf42f28386a867ea690f49d6b8efd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT16</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08a16720ba2f81c6e88c90ece9d330c5c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT32</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08af201a8fefc387b331a402fb0d40a9eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT8</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08ab99a1e6a4be7ff7db9f384d76c1a33a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT16</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08a22f74889a315c272208ac31641a5acbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT32</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08a4a1f69d0790109d171dbf17f759c61ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT8</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a000f8c019a5fc8ae6120b8ef61421b08a0242419d6e1fc8282fe22fc3f6533bf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArrayBase *</type>
      <name>GetArray</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a833b3887b189b34243b02a173048c681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetType</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>ad1608aca61c8bfb2c115ae1b8f253477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>ad01b8abd397ff6764423ae3ba864b649</anchor>
      <arglist>(igtl::NDArrayMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>aec7e0d5dea76ea121d83ccff3451a884</anchor>
      <arglist>(igtl::NDArrayMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetArray</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a409aa47752b4c2c3e3dc7c05122468cf</anchor>
      <arglist>(int type, ArrayBase *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a8d2fd2b42d4ae5534549b03139e689ed</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NDArrayMessage</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a85bc0fc60ca0c113d257baad371fa15e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>aac8bbc64f0217613cd81ef11eac2b3b2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a26c316d4ba54e2886c2197618c330dfd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~NDArrayMessage</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>aba002a8b72c5d2fdcf8aebe2f15169b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayBase *</type>
      <name>m_Array</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>ab6ffba87c7a90ce674ec31eb2dc29d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_Type</name>
      <anchorfile>classigtl_1_1NDArrayMessage.html</anchorfile>
      <anchor>a7a0e23b994132f95665835f84ac680bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::Object</name>
    <filename>classigtl_1_1Object.html</filename>
    <base>igtl::LightObject</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a92cfd8d6fc3fb18de7cdcdfe281b9dcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Object</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a3b884a0e05fc21fb0b28cf2ee40042f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ObjectFactory</name>
    <filename>classigtl_1_1ObjectFactory.html</filename>
    <templarg>class T</templarg>
    <base>igtl::ObjectFactoryBase</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Disable</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a530927d8b3611553cb9685380109124d</anchor>
      <arglist>(const char *className)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>GetClassOverrideDescriptions</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>ad560c2478b255bcdcdeed56f04973f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>GetClassOverrideNames</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a7cd56bf44cc485a081e8c3c842da6b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>GetClassOverrideWithNames</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a0db2e272d719be32732edf980b1125c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>GetDescription</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a799116e22c8ad164821bc4199bffab2f</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetEnableFlag</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a82d9255d600a5061085eaf044ad45fb3</anchor>
      <arglist>(const char *className, const char *subclassName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; bool &gt;</type>
      <name>GetEnableFlags</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>ade2fbfdf1ce76ad3db86c7b749340aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>GetIGTLSourceVersion</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a1e82566cb43be310e2d54dbdf8a57055</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetLibraryPath</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>adbc896482d9a533e92dfd432c410cd9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>af1079b8be2213fb34ba1fc994394f778</anchor>
      <arglist>(ObjectFactoryBase, Object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetEnableFlag</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>aa9657a009db7bce479933ee42b1d9b1f</anchor>
      <arglist>(bool flag, const char *className, const char *subclassName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T::Pointer</type>
      <name>Create</name>
      <anchorfile>classigtl_1_1ObjectFactory.html</anchorfile>
      <anchor>a5489231aec324ae4c2b03aa3fb33ed44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::list&lt; LightObject::Pointer &gt;</type>
      <name>CreateAllInstance</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>ae26d1ec9e9d8f84848b2043ac86e3364</anchor>
      <arglist>(const char *igtlclassname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LightObject::Pointer</type>
      <name>CreateInstance</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a5f1043baa78027d127449fe7142921d0</anchor>
      <arglist>(const char *igtlclassname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::list&lt; ObjectFactoryBase * &gt;</type>
      <name>GetRegisteredFactories</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>af56708c872eb891b9901dfafc499a795</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegisterFactory</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a32fbee9cf684ef595054c42c1ed97b9f</anchor>
      <arglist>(ObjectFactoryBase *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ReHash</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>af2d3a223f767d1eeba793d9e8038294b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>UnRegisterAllFactories</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a43c89293f61b1e83e58b21231aa805b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>UnRegisterFactory</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a9d41ac51a354b916332acbe342bda7ab</anchor>
      <arglist>(ObjectFactoryBase *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual LightObject::Pointer</type>
      <name>CreateObject</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>ae7cf01313712817cf7d33aaf635dde7b</anchor>
      <arglist>(const char *igtlclassname)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>ad5da67f5a36ca8558a7d0b2e38e67e44</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>RegisterOverride</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a17ea478acf1a1a9e46b9e40cd7689760</anchor>
      <arglist>(const char *classOverride, const char *overrideClassName, const char *description, bool enableFlag, CreateObjectFunctionBase *createFunction)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ObjectFactoryBase</name>
    <filename>classigtl_1_1ObjectFactoryBase.html</filename>
    <base>igtl::Object</base>
    <class kind="class">igtl::ObjectFactoryBase::OverrideInformation</class>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Disable</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a530927d8b3611553cb9685380109124d</anchor>
      <arglist>(const char *className)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>GetClassOverrideDescriptions</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>ad560c2478b255bcdcdeed56f04973f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>GetClassOverrideNames</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a7cd56bf44cc485a081e8c3c842da6b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::string &gt;</type>
      <name>GetClassOverrideWithNames</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a0db2e272d719be32732edf980b1125c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>GetDescription</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a799116e22c8ad164821bc4199bffab2f</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetEnableFlag</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a82d9255d600a5061085eaf044ad45fb3</anchor>
      <arglist>(const char *className, const char *subclassName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; bool &gt;</type>
      <name>GetEnableFlags</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>ade2fbfdf1ce76ad3db86c7b749340aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>GetIGTLSourceVersion</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a1e82566cb43be310e2d54dbdf8a57055</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetLibraryPath</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>adbc896482d9a533e92dfd432c410cd9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>af1079b8be2213fb34ba1fc994394f778</anchor>
      <arglist>(ObjectFactoryBase, Object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetEnableFlag</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>aa9657a009db7bce479933ee42b1d9b1f</anchor>
      <arglist>(bool flag, const char *className, const char *subclassName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::list&lt; LightObject::Pointer &gt;</type>
      <name>CreateAllInstance</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>ae26d1ec9e9d8f84848b2043ac86e3364</anchor>
      <arglist>(const char *igtlclassname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LightObject::Pointer</type>
      <name>CreateInstance</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a5f1043baa78027d127449fe7142921d0</anchor>
      <arglist>(const char *igtlclassname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::list&lt; ObjectFactoryBase * &gt;</type>
      <name>GetRegisteredFactories</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>af56708c872eb891b9901dfafc499a795</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegisterFactory</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a32fbee9cf684ef595054c42c1ed97b9f</anchor>
      <arglist>(ObjectFactoryBase *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ReHash</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>af2d3a223f767d1eeba793d9e8038294b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>UnRegisterAllFactories</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a43c89293f61b1e83e58b21231aa805b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>UnRegisterFactory</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a9d41ac51a354b916332acbe342bda7ab</anchor>
      <arglist>(ObjectFactoryBase *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual LightObject::Pointer</type>
      <name>CreateObject</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>ae7cf01313712817cf7d33aaf635dde7b</anchor>
      <arglist>(const char *igtlclassname)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectFactoryBase</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a1a986505f21f4e376b57765560fa4d7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>ad5da67f5a36ca8558a7d0b2e38e67e44</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>RegisterOverride</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>a17ea478acf1a1a9e46b9e40cd7689760</anchor>
      <arglist>(const char *classOverride, const char *overrideClassName, const char *description, bool enableFlag, CreateObjectFunctionBase *createFunction)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectFactoryBase</name>
      <anchorfile>classigtl_1_1ObjectFactoryBase.html</anchorfile>
      <anchor>adf9ca29967f18cf1ebe04aa10bab536d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::OStringStream</name>
    <filename>classigtl_1_1OStringStream.html</filename>
    <member kind="function">
      <type></type>
      <name>OStringStream</name>
      <anchorfile>classigtl_1_1OStringStream.html</anchorfile>
      <anchor>af3da28a856fe736500461e22dd14b7fa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ObjectFactoryBase::OverrideInformation</name>
    <filename>structigtl_1_1ObjectFactoryBase_1_1OverrideInformation.html</filename>
    <member kind="variable">
      <type>CreateObjectFunctionBase::Pointer</type>
      <name>m_CreateObject</name>
      <anchorfile>structigtl_1_1ObjectFactoryBase_1_1OverrideInformation.html</anchorfile>
      <anchor>a7f5ebc2547ab74488566cd573b040a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_Description</name>
      <anchorfile>structigtl_1_1ObjectFactoryBase_1_1OverrideInformation.html</anchorfile>
      <anchor>ab66a5c1212a0736b4d49733df07c30ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_EnabledFlag</name>
      <anchorfile>structigtl_1_1ObjectFactoryBase_1_1OverrideInformation.html</anchorfile>
      <anchor>acd750f4460aa2dcd9d4b199e7cfcd4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_OverrideWithName</name>
      <anchorfile>structigtl_1_1ObjectFactoryBase_1_1OverrideInformation.html</anchorfile>
      <anchor>a8a6cfd4ff5d95b878e6fd3a6599de1f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::OverRideMap</name>
    <filename>classigtl_1_1OverRideMap.html</filename>
  </compound>
  <compound kind="class">
    <name>igtl::PacketBuffer</name>
    <filename>classigtl_1_1PacketBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>PacketBuffer</name>
      <anchorfile>classigtl_1_1PacketBuffer.html</anchorfile>
      <anchor>a8d002bd13ef9055ea5b179a88bee42fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PacketBuffer</name>
      <anchorfile>classigtl_1_1PacketBuffer.html</anchorfile>
      <anchor>ab706c2df0e0cdc930df816a065501c08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; unsigned char &gt;</type>
      <name>pBsBuf</name>
      <anchorfile>classigtl_1_1PacketBuffer.html</anchorfile>
      <anchor>a20760b9b36a234e56ff43cf5e990ae00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>pPacketLengthInByte</name>
      <anchorfile>classigtl_1_1PacketBuffer.html</anchorfile>
      <anchor>a9ea102f42f8e5de41b16518788b10d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>totalLength</name>
      <anchorfile>classigtl_1_1PacketBuffer.html</anchorfile>
      <anchor>a63fbe433139a8306aaf2926f7a14873e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::PointElement</name>
    <filename>classigtl_1_1PointElement.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetGroupName</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>aaa9cd6b7f354cf092640dceb17f660fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>ad66e0a64e432c2661f57bfa7148698ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetOwner</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>ac9b1a3f470121e64b7294913a65734f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPosition</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a0caa075b14f59da033b6a98d29b141bf</anchor>
      <arglist>(igtlFloat32 &amp;x, igtlFloat32 &amp;y, igtlFloat32 &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPosition</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a36508678f3f98ba2a08af8d7fedd87a2</anchor>
      <arglist>(igtlFloat32 *position)</arglist>
    </member>
    <member kind="function">
      <type>igtlFloat32</type>
      <name>GetRadius</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a1d4153edab4936b9b62490af9f311867</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRGBA</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a75ed1b371243fd976b9173959c576290</anchor>
      <arglist>(igtlUint8 &amp;r, igtlUint8 &amp;g, igtlUint8 &amp;b, igtlUint8 &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRGBA</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>aeaa0ca5095e010dd95e8f51f94514165</anchor>
      <arglist>(igtlUint8 *rgba)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>afeff63d9004f25aa873e3d415aa88a47</anchor>
      <arglist>(igtl::PointElement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a25b4e35079bffac5d8d0800ca7a80701</anchor>
      <arglist>(igtl::PointElement, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetGroupName</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a11f8883260d851b1c13afefab72e3b31</anchor>
      <arglist>(const char *grpname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetName</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a0d69f11f279df7057bf049d8acefd942</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetOwner</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a9430dacea3f6bf47c8ae8f9116ed8d76</anchor>
      <arglist>(const char *owner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a7e2941f4e88dc5cb5d18422a567de244</anchor>
      <arglist>(igtlFloat32 position[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a24c9c3896c72d9ec32a3bbe1cf1628c9</anchor>
      <arglist>(igtlFloat32 x, igtlFloat32 y, igtlFloat32 z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRadius</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>af326f4e06fbeed76e7133317cb3ba2f1</anchor>
      <arglist>(igtlFloat32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRGBA</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a28134466f98167a81cb04c667121832c</anchor>
      <arglist>(igtlUint8 r, igtlUint8 g, igtlUint8 b, igtlUint8 a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRGBA</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>abf1c341bf0f79d87a8e9df77bbe4ba82</anchor>
      <arglist>(igtlUint8 rgba[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointElement</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a0d6cc830b60a75728ca46898562c4321</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~PointElement</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>aabbef735ab222532652ead6b9f983f19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_GroupName</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a527539ae99d150605c121f12fb148215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Name</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>aed76e8e9911f9f66d82a272e4a8687fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Owner</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a41730fef4fad98c0fd388f2fab51eb64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlFloat32</type>
      <name>m_Position</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>af49bddb83d65dd39e04edd1633b6628d</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlFloat32</type>
      <name>m_Radius</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>a1663333f56b2543bba4286d7b6b72941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_RGBA</name>
      <anchorfile>classigtl_1_1PointElement.html</anchorfile>
      <anchor>ae92dd2a8505d09949ccb3d52f611a8ca</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::PointMessage</name>
    <filename>classigtl_1_1PointMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddPointElement</name>
      <anchorfile>classigtl_1_1PointMessage.html</anchorfile>
      <anchor>a349bc3ae0b814570ae670be29e4d6092</anchor>
      <arglist>(PointElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearPointElement</name>
      <anchorfile>classigtl_1_1PointMessage.html</anchorfile>
      <anchor>a63e1a690ea08792dba2030250dddc53c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfPointElement</name>
      <anchorfile>classigtl_1_1PointMessage.html</anchorfile>
      <anchor>af5ec08b011690204424fd0f092ce31a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPointElement</name>
      <anchorfile>classigtl_1_1PointMessage.html</anchorfile>
      <anchor>a61b6127bbafec2891a22ab42e9d20faa</anchor>
      <arglist>(int index, PointElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1PointMessage.html</anchorfile>
      <anchor>aae0e6f5c1e18c0a6db876af244733cf4</anchor>
      <arglist>(igtl::PointMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1PointMessage.html</anchorfile>
      <anchor>a1b932c74915449615456bbaf37e164af</anchor>
      <arglist>(igtl::PointMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1PointMessage.html</anchorfile>
      <anchor>a2bae0b8267133c2e2f899227e8728a2a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1PointMessage.html</anchorfile>
      <anchor>a9ecdda766b0d89aada31fda801bfaa3d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointMessage</name>
      <anchorfile>classigtl_1_1PointMessage.html</anchorfile>
      <anchor>aca1615cfb8cd160f7889e6395026dbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1PointMessage.html</anchorfile>
      <anchor>aaff8921646b0deac281b8363c0cd362b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~PointMessage</name>
      <anchorfile>classigtl_1_1PointMessage.html</anchorfile>
      <anchor>aa2cd4a113dbcdf5d807fb2049215792d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PointElement::Pointer &gt;</type>
      <name>m_PointList</name>
      <anchorfile>classigtl_1_1PointMessage.html</anchorfile>
      <anchor>a21d33e9c489533552d68a37da6164874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::PolyDataAttribute</name>
    <filename>classigtl_1_1PolyDataAttribute.html</filename>
    <base>igtl::Object</base>
    <member kind="enumvalue">
      <name>POINT_SCALAR</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada8da7f3894504557aaf43c0bf00cf22ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_VECTOR</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada0840f4c6b71aeeaa4a3c4e38cd40839d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_NORMAL</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cadad0c87bbd1bbc8c1b91752c9e307632bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_TENSOR</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cadaed4a28b39846dd2f827750fafd0fe66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_RGBA</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cadac73f8869d7e8a768cfc1e372719de198</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_TCOORDS</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada639ecaa8630b438d755794f683557eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CELL_SCALAR</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada1230d705ebb3b009b4086a501223ecc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CELL_VECTOR</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cadaa7bf98ef0a19581b152ccec64ddd9151</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CELL_NORMAL</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada356443ef86e40d0bb5152651100c590c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CELL_TENSOR</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cadaa36fe661da1f7027239523cd2813c26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CELL_RGBA</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada0a2e608825a9594f7e01ce2b23354298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CELL_TCOORDS</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada2f0705bdb8e27817f3dd0208626c1e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CELL_NORMAL</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada356443ef86e40d0bb5152651100c590c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CELL_RGBA</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada0a2e608825a9594f7e01ce2b23354298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CELL_SCALAR</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada1230d705ebb3b009b4086a501223ecc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CELL_TCOORDS</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada2f0705bdb8e27817f3dd0208626c1e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CELL_TENSOR</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cadaa36fe661da1f7027239523cd2813c26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CELL_VECTOR</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cadaa7bf98ef0a19581b152ccec64ddd9151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_NORMAL</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cadad0c87bbd1bbc8c1b91752c9e307632bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_RGBA</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cadac73f8869d7e8a768cfc1e372719de198</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_SCALAR</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada8da7f3894504557aaf43c0bf00cf22ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_TCOORDS</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada639ecaa8630b438d755794f683557eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_TENSOR</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cadaed4a28b39846dd2f827750fafd0fe66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_VECTOR</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae5e054dfe24e9801a665a06954f45cada0840f4c6b71aeeaa4a3c4e38cd40839d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a62760a9af915998fd940010cfe5a21df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a45202a0164262d14139494b082941059</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a0e40cb682052c52d8b10b086d8cb837c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a0737bd92bbf7282463a38afed005289e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ad4635500294256c6242c3d8c8c118a26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetData</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a9616c83fbbbd18620e1a6e36e1cbf735</anchor>
      <arglist>(igtlFloat32 *data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a40c64e63e4bbd5787d764d9ede127e3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNthData</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a053710cec85745cbcd2b504a764c62b1</anchor>
      <arglist>(unsigned int n, igtlFloat32 *data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNthData</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a75d13c7072083f19cdb4c190fb6b00aa</anchor>
      <arglist>(unsigned int n, std::vector&lt; igtlFloat32 &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>igtlUint32</type>
      <name>GetNumberOfComponents</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>aad39778f603fcd2e0739caf20b3829a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint32</type>
      <name>GetSize</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a779622f0124f35613aa552ea65c62fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtlUint8</type>
      <name>GetType</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>adae80836e332e64af73ed90e49cc9627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a45fe16f9e32a9f0a301f457e65f2157d</anchor>
      <arglist>(igtl::PolyDataAttribute)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>abff55c2f9a82b8ff3fa16edd377510b7</anchor>
      <arglist>(igtl::PolyDataAttribute, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a48e6829b6dcc852d3130d3e95bd5d567</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a0b664aa8475acaa92239adcce5784642</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a146981c81e4a4be21628100b877df346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>adfde939f2a69ed9bbcbf3aa256d82479</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetData</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a37357e33d3f2650373a7a671eb54832e</anchor>
      <arglist>(igtlFloat32 *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetName</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>aa8743fc7aa13c997d56b39a98df36b43</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetNthData</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a4448e12de9d07806f02c1124b59396f9</anchor>
      <arglist>(unsigned int n, igtlFloat32 *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>igtlUint32</type>
      <name>SetSize</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae22a5a17f65799dd4131895b58987752</anchor>
      <arglist>(igtlUint32 size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetType</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>ae6ec1e0b761cac8112fc594c974d1e3c</anchor>
      <arglist>(int t, int n=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolyDataAttribute</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a497e887fed4976f91b5abeb953f27a66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~PolyDataAttribute</name>
      <anchorfile>classigtl_1_1PolyDataAttribute.html</anchorfile>
      <anchor>a74887017969091b1d46c66f69d3568d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::PolyDataCellArray</name>
    <filename>classigtl_1_1PolyDataCellArray.html</filename>
    <base>igtl::Object</base>
    <member kind="enumvalue">
      <name>NULL_POINT</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>a5f313279d3b9aace61248194596b8702a56bc35716524b22a62d9135e226e2dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; igtlUint32 &gt;</type>
      <name>Cell</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>a42df1e533051ad00c04e3196cf4e3ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NULL_POINT</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>a5f313279d3b9aace61248194596b8702a56bc35716524b22a62d9135e226e2dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddCell</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>aebd1af9e9584dbe26cbcb2a1f6bbbd5b</anchor>
      <arglist>(const Cell &amp;cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddCell</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>a4a73b9259d23741158afab43b72f9611</anchor>
      <arglist>(int n, igtlUint32 *cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>aafbd46e21a39a9687641454b490790c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCell</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>a64fbca019a3ad9d83401d583508eb106</anchor>
      <arglist>(unsigned int id, Cell &amp;cell)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCell</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>ab95131449acdacaf357e496dc79c262a</anchor>
      <arglist>(unsigned int id, igtlUint32 *cell)</arglist>
    </member>
    <member kind="function">
      <type>igtlUint32</type>
      <name>GetCellSize</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>a89dc86bef999c6c9d02f92e1051c48b2</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint32</type>
      <name>GetNumberOfCells</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>ab547bfe024b700d087e26311d02983ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint32</type>
      <name>GetTotalSize</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>a5799c77a0836b41090076a8d654552cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>adc16e10dbfef341eb5b1ffd87d73fdad</anchor>
      <arglist>(igtl::PolyDataCellArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlRangeBasedForHeaderMemberMacro</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>a940c778eb89f1effbde0ee6bcce0f7f4</anchor>
      <arglist>(std::vector&lt; Cell &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>a955aa0c2ad0fb8fd00db7d7cd697e392</anchor>
      <arglist>(igtl::PolyDataCellArray, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolyDataCellArray</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>a4d5711c761b304e8ffffebb663837e7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~PolyDataCellArray</name>
      <anchorfile>classigtl_1_1PolyDataCellArray.html</anchorfile>
      <anchor>aefc1af90257a225bfe34f4bb5ee3114a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::PolyDataMessage</name>
    <filename>classigtl_1_1PolyDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PolyDataAttribute::Pointer &gt;</type>
      <name>AttributeList</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a57cc895880710052d4d735c376615a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAttribute</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a5f162b9726a999558dfbb7e2223bb054</anchor>
      <arglist>(PolyDataAttribute *att)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>ab57d0e9376c17b79afe81fbd52a5de96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearAttributes</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a7105537f5a493f7908d779354a6c3915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PolyDataAttribute *</type>
      <name>GetAttribute</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a5ca56d60001b8f48e2eac753feebd2ba</anchor>
      <arglist>(AttributeList::size_type id)</arglist>
    </member>
    <member kind="function">
      <type>PolyDataAttribute *</type>
      <name>GetAttribute</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a80b766ad7bfc6e07452d5c1e7404a9d7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>PolyDataAttribute *</type>
      <name>GetAttribute</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a7acfcd9cda2c4ae2d0a7a5f4370eb5cf</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfAttributes</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>acafe0062b15277078973ca14fc0900f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlGetObjectMacro</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a99060416c90265094609d960bb77309c</anchor>
      <arglist>(Lines, PolyDataCellArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlGetObjectMacro</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a1a510ab29729371065aef3317e607029</anchor>
      <arglist>(Points, PolyDataPointArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlGetObjectMacro</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a5544c04c75ea39f43eb0ea576b6b230d</anchor>
      <arglist>(Polygons, PolyDataCellArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlGetObjectMacro</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>acfcd511987b140371c3bdda37fea5062</anchor>
      <arglist>(TriangleStrips, PolyDataCellArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlGetObjectMacro</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>aa3c1c37e1dd7053e486a23efb5c13259</anchor>
      <arglist>(Vertices, PolyDataCellArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>ac0b4a4a1f0f34854b947228b0709ce85</anchor>
      <arglist>(igtl::PolyDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlSetObjectMacro</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a548ef4ccb6bb8bdb04da576588a5bee8</anchor>
      <arglist>(Lines, PolyDataCellArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlSetObjectMacro</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a0a477d6fddb24660356ebd51a02648f5</anchor>
      <arglist>(Points, PolyDataPointArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlSetObjectMacro</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>ac3c718e982bd5401f8a375cac18fe4c3</anchor>
      <arglist>(Polygons, PolyDataCellArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlSetObjectMacro</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>ab49897d4447231d65b8a24403a0e141b</anchor>
      <arglist>(TriangleStrips, PolyDataCellArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlSetObjectMacro</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a472edf0f05f7ec1a738d3472744398b9</anchor>
      <arglist>(Vertices, PolyDataCellArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a1422feed720106274a178080ecf4d744</anchor>
      <arglist>(igtl::PolyDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>adcd50e81b4c7644775e8ddebb3f67ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a9f68a74cd9e63f0eacc57c7cb7b5dad9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolyDataMessage</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a60c9bfd9a8c3d515123ff65b3a4aeae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a26377984013756ac71a7d0b58d96b8c9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~PolyDataMessage</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a38e52b3c99d04de5ca9fbc757b1c1635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AttributeList</type>
      <name>m_Attributes</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a3f04436e0bd6d07267a74b486ffb21e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PolyDataCellArray::Pointer</type>
      <name>m_Lines</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>ab37378dc9c2210d7354649fcfbb7d9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PolyDataPointArray::Pointer</type>
      <name>m_Points</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a77821910acda4fc4f305f6357c7f4f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PolyDataCellArray::Pointer</type>
      <name>m_Polygons</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a6ce95b0f9d38cde405937906c1424d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PolyDataCellArray::Pointer</type>
      <name>m_TriangleStrips</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a0ac32926849b87848acf991ef0dd95b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PolyDataCellArray::Pointer</type>
      <name>m_Vertices</name>
      <anchorfile>classigtl_1_1PolyDataMessage.html</anchorfile>
      <anchor>a8c0708bdaf8894e1db2cd098463c5b58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::PolyDataPointArray</name>
    <filename>classigtl_1_1PolyDataPointArray.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; igtlFloat32 &gt;</type>
      <name>Point</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>a226fe740981af534bbe69765ae410f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddPoint</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>ae02a98737e422d357349965117619cb1</anchor>
      <arglist>(igtlFloat32 *point)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddPoint</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>a9a5e070e875c91108a3f3272ff85e505</anchor>
      <arglist>(igtlFloat32 x, igtlFloat32 y, igtlFloat32 z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>a0605762194d11aac006110daa772a307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfPoints</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>abf10f9a7c8ea42223aca9c0f2a1d7d18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetPoint</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>a04841ce65ce524c188164f5d09a49d71</anchor>
      <arglist>(unsigned int id, igtlFloat32 &amp;x, igtlFloat32 &amp;y, igtlFloat32 &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetPoint</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>ad2547a81f94a174a1a71228b5ad6ab96</anchor>
      <arglist>(unsigned int id, igtlFloat32 *point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>aa1fc324b97053ea6feb76dc012c79ebf</anchor>
      <arglist>(igtl::PolyDataPointArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlRangeBasedForHeaderMemberMacro</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>addebde2d661d61b3ee3d5f04c465e0fd</anchor>
      <arglist>(std::vector&lt; Point &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>a6eb86baf8c5640313cfa18748a9f8493</anchor>
      <arglist>(igtl::PolyDataPointArray, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNumberOfPoints</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>a8429f7bb7654baf42b05fbb714d8010f</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPoint</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>add543bf72d49d22d49fa615c144f89a2</anchor>
      <arglist>(unsigned int id, igtlFloat32 *point)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPoint</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>a86da5e201c02eb71f55e33bb182fa1ba</anchor>
      <arglist>(unsigned int id, igtlFloat32 x, igtlFloat32 y, igtlFloat32 z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolyDataPointArray</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>aadf1c79a3b4fb407bfadbf2de8e536b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~PolyDataPointArray</name>
      <anchorfile>classigtl_1_1PolyDataPointArray.html</anchorfile>
      <anchor>abb468742a4f82b546856bf90736899c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::PositionMessage</name>
    <filename>classigtl_1_1PositionMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITION_ONLY</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>ac2135a7ba2796d6f8a408fab512c0e61a3e6e5714cd9dd262e8923ca435237d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WITH_QUATERNION3</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>ac2135a7ba2796d6f8a408fab512c0e61ada99005945ea61b9d9cb41d11695b005</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>ac2135a7ba2796d6f8a408fab512c0e61a4b386f797d696a9ea478f7f320d09131</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>ac2135a7ba2796d6f8a408fab512c0e61a4b386f797d696a9ea478f7f320d09131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITION_ONLY</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>ac2135a7ba2796d6f8a408fab512c0e61a3e6e5714cd9dd262e8923ca435237d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WITH_QUATERNION3</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>ac2135a7ba2796d6f8a408fab512c0e61ada99005945ea61b9d9cb41d11695b005</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetPackType</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>a165c69c8d9275ce6ec6e13e3b96be583</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPosition</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>ad76b9ae32e6d913dc5c6921a4e935a4b</anchor>
      <arglist>(float *pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPosition</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>af7c6ae33f255bbda3254d3f0f4210d9d</anchor>
      <arglist>(float *x, float *y, float *z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetQuaternion</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>a35ec51c782c8df685ae74795b4d6e950</anchor>
      <arglist>(float *ox, float *oy, float *oz, float *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetQuaternion</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>a5f8994fcd220d07029d7fa6d30e51fc5</anchor>
      <arglist>(float *quat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>a2909b78839c34633284c9be5d7e1ea59</anchor>
      <arglist>(igtl::PositionMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>a5ef5dee9e2135f7c15cfef615fc52362</anchor>
      <arglist>(igtl::PositionMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>ab00b1fb1a416463f7b73b67edaa8307d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPackType</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>ac41317351c08eb314886734bb1b57672</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPackTypeByContentSize</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>a4244b8c4f31399ff02354e87b1b5494f</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>a3c197e05589ef791679c61f6c95df6af</anchor>
      <arglist>(const float *pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>af36b2f29d077649e157dc37fede5a438</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetQuaternion</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>a57fd8ba6ed889e934c8ee5ef75636f04</anchor>
      <arglist>(const float *quat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetQuaternion</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>aaf7c03f1473be5ce293c86da2cd74df3</anchor>
      <arglist>(float ox, float oy, float oz, float w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>ac873008123ac85c2a8b2bad29900922e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>aaaabcf20539865127e50766258cef311</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PositionMessage</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>aa4a29ec1938170052e8fdc4903aa9dea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>af5b371e9064d69fab88028a5533d33c0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~PositionMessage</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>a392734503d5d1f24539c08d8b2a31e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlInt32</type>
      <name>m_PackType</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>aeec4867871a73f38ea76cf1b89f96286</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlFloat32</type>
      <name>m_Position</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>a88bf02026330d7d78d5e5b1e99228b28</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlFloat32</type>
      <name>m_Quaternion</name>
      <anchorfile>classigtl_1_1PositionMessage.html</anchorfile>
      <anchor>a0d6badd0ddde5a4e0915dfa658d86200</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::QuaternionTrackingDataElement</name>
    <filename>classigtl_1_1QuaternionTrackingDataElement.html</filename>
    <base>igtl::Object</base>
    <member kind="enumvalue">
      <name>TYPE_TRACKER</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a73aab946a3a6e8bb352631340b0cad1aaf3d4838ca3847a83f0b070ea8c6d357a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_6D</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a73aab946a3a6e8bb352631340b0cad1aaed89c27ee68629f35b5ed4981a95edaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_3D</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a73aab946a3a6e8bb352631340b0cad1aad1cf9d577179c0bbfdf700f1f12169c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_5D</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a73aab946a3a6e8bb352631340b0cad1aabdb5cf2593cf1f439b4aa1aa547c2512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_3D</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a73aab946a3a6e8bb352631340b0cad1aad1cf9d577179c0bbfdf700f1f12169c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_5D</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a73aab946a3a6e8bb352631340b0cad1aabdb5cf2593cf1f439b4aa1aa547c2512</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_6D</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a73aab946a3a6e8bb352631340b0cad1aaed89c27ee68629f35b5ed4981a95edaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_TRACKER</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a73aab946a3a6e8bb352631340b0cad1aaf3d4838ca3847a83f0b070ea8c6d357a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a3bbc6c971e402f3073a1e0f39250e0f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPosition</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>ac4cae12bc3dd0fd412f6772c693124dd</anchor>
      <arglist>(float *px, float *py, float *pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPosition</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>ad2645bb2868d9bcc0b6ea4566054ffca</anchor>
      <arglist>(float p[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetQuaternion</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a6fc1d1c4dbdc39180a789c34e27d1b3a</anchor>
      <arglist>(float *qx, float *qy, float *qz, float *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetQuaternion</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a335bdc5474604ef43e5871f3df28070f</anchor>
      <arglist>(float q[4])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint8</type>
      <name>GetType</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a52cec0294487d45c8fe1bf332566780f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a4ec8ffe558e7c2ac549d4c207d9bf216</anchor>
      <arglist>(igtl::QuaternionTrackingDataElement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a091ec8e88e1ae5b3c33cb2df9a607b2b</anchor>
      <arglist>(igtl::QuaternionTrackingDataElement, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetName</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a09e037ac366a919ab00067a0890428bb</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>afd14c7e10c0e905fe1f5a11dfa60ecac</anchor>
      <arglist>(float p[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a92b1353f9d945b132a74dc19df68ad20</anchor>
      <arglist>(float px, float py, float pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetQuaternion</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>af8048c1e40211515690abc53f022ce05</anchor>
      <arglist>(float q[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetQuaternion</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a509a4c377a9247d6315a411ccde9c544</anchor>
      <arglist>(float qx, float qy, float qz, float w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetType</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a3d29b3e2094eddc8a4f2418a490e98d5</anchor>
      <arglist>(igtlUint8 type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>QuaternionTrackingDataElement</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a13e91b2f07cc76eb5ba1e4f9d8fca324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~QuaternionTrackingDataElement</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>ae14ea418fdb4a7c06c4933758678e9a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Name</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>aeab5a61f3afc4868800e2775203dba38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlFloat32</type>
      <name>m_position</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a86fb1daa31a03d0408be501eab327b60</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlFloat32</type>
      <name>m_quaternion</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>af0a18c18f44e2f017b06ef7aec889e12</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_Type</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataElement.html</anchorfile>
      <anchor>a48ace05fb0d3ff0b3db931e85200f0e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::QuaternionTrackingDataMessage</name>
    <filename>classigtl_1_1QuaternionTrackingDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddQuaternionTrackingDataElement</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a1d481e0b7109e1236d176efd76e70b77</anchor>
      <arglist>(QuaternionTrackingDataElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearQuaternionTrackingDataElements</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataMessage.html</anchorfile>
      <anchor>af17beb1d08b73634d9bbe8417b99ae42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfQuaternionTrackingDataElements</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a3f32b44ed4be092d17693d4555e22dcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetQuaternionTrackingDataElement</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a3528b9526e4ef14e7dbdd79391621fa9</anchor>
      <arglist>(int index, QuaternionTrackingDataElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataMessage.html</anchorfile>
      <anchor>aa0210fad911c78e5b0cd8a51fc93c0ff</anchor>
      <arglist>(igtl::QuaternionTrackingDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a72011f244da8135f78374aa21b664302</anchor>
      <arglist>(igtl::QuaternionTrackingDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataMessage.html</anchorfile>
      <anchor>ab56760da3e0f909928b2ba1a68cb1f4a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataMessage.html</anchorfile>
      <anchor>af87d51c6e89ef7245b909fde20ba298b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>QuaternionTrackingDataMessage</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a89cb52a423898790d72b258fc7f7d509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a1e6ab3bfe30eb0515cb3acbd572bcc66</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~QuaternionTrackingDataMessage</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a506818a6079f09d1cc0400d519028924</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; QuaternionTrackingDataElement::Pointer &gt;</type>
      <name>m_QuaternionTrackingDataList</name>
      <anchorfile>classigtl_1_1QuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a3f5c26753615f6cca098a8fb33a2901f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::QueryMessage</name>
    <filename>classigtl_1_1QueryMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDataType</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>ac8c1c42c4ebcad67945ff7b48803447b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceUID</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>a56087c0c824dc01516321c5f6a3bb6ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>a1af58ffec278f2064d63d0c3e23a1e9f</anchor>
      <arglist>(igtl::QueryMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>ad3a32514b0b728096216fc9ee4955bdd</anchor>
      <arglist>(igtl::QueryMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetDataType</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>ab16c4be3f0221f38f1a86639ca8df0e3</anchor>
      <arglist>(const char *string)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetDataType</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>ad28d9645bff31aeb112943e6c1eac8f3</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetDeviceUID</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>a085ae248f00ffebf0d8bd8c63ec48648</anchor>
      <arglist>(const char *string)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetDeviceUID</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>ac60e402a46fe3ee26895db6700082524</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>ad4be6a84b8c4064efaccc9d24fbe6eee</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>a78283b319ba1e57d070c58dd19566dca</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>QueryMessage</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>a9342a9a63f347b20cd370eada3d9f402</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>ab58cb4ec0dbafeb2afec5d730ba63d07</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~QueryMessage</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>a284ae46931b3499e76373df051131886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_DataType</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>ae3833fd8a2b15d2cb9b0d61394f5eb96</anchor>
      <arglist>[IGTL_QUERY_DATE_TYPE_SIZE]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceUID</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>a0fd4965d49f10648e03e8064023af01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint32</type>
      <name>m_QueryID</name>
      <anchorfile>classigtl_1_1QueryMessage.html</anchorfile>
      <anchor>ad07a2784b8a20f91a948a0c3a387a84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ReadConfigFile</name>
    <filename>classigtl_1_1ReadConfigFile.html</filename>
    <member kind="function">
      <type>const bool</type>
      <name>EndOfFile</name>
      <anchorfile>classigtl_1_1ReadConfigFile.html</anchorfile>
      <anchor>a10c6a0eefbb201208ceef9e2036df903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const bool</type>
      <name>ExistFile</name>
      <anchorfile>classigtl_1_1ReadConfigFile.html</anchorfile>
      <anchor>a712fa2dc1ab74f35ed1bdef137265e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetFileName</name>
      <anchorfile>classigtl_1_1ReadConfigFile.html</anchorfile>
      <anchor>a9c68457febb64f9ee9b077633b8ee3ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int</type>
      <name>GetLines</name>
      <anchorfile>classigtl_1_1ReadConfigFile.html</anchorfile>
      <anchor>a8070e11bfaa7604a6d585ef3c07ae0c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OpenFile</name>
      <anchorfile>classigtl_1_1ReadConfigFile.html</anchorfile>
      <anchor>a9e114a1ff84ae4ced664b0958e4b7c80</anchor>
      <arglist>(const char *strFile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReadConfigFile</name>
      <anchorfile>classigtl_1_1ReadConfigFile.html</anchorfile>
      <anchor>a01bf8bc2e2aa00d949cd4dfc8a9ef83e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReadConfigFile</name>
      <anchorfile>classigtl_1_1ReadConfigFile.html</anchorfile>
      <anchor>a0b5bf9a494afbdfc38a582fc9209af1d</anchor>
      <arglist>(const char *pConfigFileName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReadConfigFile</name>
      <anchorfile>classigtl_1_1ReadConfigFile.html</anchorfile>
      <anchor>abaad8357643eea1da038f8829820eef4</anchor>
      <arglist>(const std::string &amp;pConfigFileName)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>ReadLine</name>
      <anchorfile>classigtl_1_1ReadConfigFile.html</anchorfile>
      <anchor>ac643621d7ca826bf579cd984df02880d</anchor>
      <arglist>(std::string *strVal, const int iValSize=4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReadConfigFile</name>
      <anchorfile>classigtl_1_1ReadConfigFile.html</anchorfile>
      <anchor>ab636095a920b1d77e96b8c9a05142cc5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl::ReadSocketAndPush</name>
    <filename>structigtl_1_1ReadSocketAndPush.html</filename>
    <member kind="variable">
      <type>igtl::UDPClientSocket::Pointer</type>
      <name>clientSocket</name>
      <anchorfile>structigtl_1_1ReadSocketAndPush.html</anchorfile>
      <anchor>aac7cc6b28f6038a9d9c4310c081d2d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VideoStreamIGTLinkReceiver *</type>
      <name>receiver</name>
      <anchorfile>structigtl_1_1ReadSocketAndPush.html</anchorfile>
      <anchor>a7545fff62e364b97d1862595d81c255f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl::MessageRTPWrapper::Pointer</type>
      <name>wrapper</name>
      <anchorfile>structigtl_1_1ReadSocketAndPush.html</anchorfile>
      <anchor>a806f70e77b41ffe2a1fec473f18be1ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ReorderBuffer</name>
    <filename>classigtl_1_1ReorderBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>ReorderBuffer</name>
      <anchorfile>classigtl_1_1ReorderBuffer.html</anchorfile>
      <anchor>add3a7712dfa7b7c59ccb5c8fca19a819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReorderBuffer</name>
      <anchorfile>classigtl_1_1ReorderBuffer.html</anchorfile>
      <anchor>ad94c835e625e88d23c4fd31172d33169</anchor>
      <arglist>(ReorderBuffer const &amp;anotherBuffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReorderBuffer</name>
      <anchorfile>classigtl_1_1ReorderBuffer.html</anchorfile>
      <anchor>a478d83f1661f241fc5edfe9522f328a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>buffer</name>
      <anchorfile>classigtl_1_1ReorderBuffer.html</anchorfile>
      <anchor>ad452bb87376cefaf1a27f79a0b1e2e56</anchor>
      <arglist>[RTP_PAYLOAD_LENGTH *(16384-2)]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>filledPacketNum</name>
      <anchorfile>classigtl_1_1ReorderBuffer.html</anchorfile>
      <anchor>a5839d571ce65cbd7aeeb71642210e8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>firstFragBuffer</name>
      <anchorfile>classigtl_1_1ReorderBuffer.html</anchorfile>
      <anchor>a5ed9f528685ae3c3a31d8b4aba2c417f</anchor>
      <arglist>[RTP_PAYLOAD_LENGTH]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>firstPacketLen</name>
      <anchorfile>classigtl_1_1ReorderBuffer.html</anchorfile>
      <anchor>a91d4248343a40d285ad108c89f4944ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>lastFragBuffer</name>
      <anchorfile>classigtl_1_1ReorderBuffer.html</anchorfile>
      <anchor>a8546d696dd4476aa691a2b9eeafaf783</anchor>
      <arglist>[RTP_PAYLOAD_LENGTH]</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>lastPacketLen</name>
      <anchorfile>classigtl_1_1ReorderBuffer.html</anchorfile>
      <anchor>a989d36a883ebffdb3083a463f012e610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>receivedFirstFrag</name>
      <anchorfile>classigtl_1_1ReorderBuffer.html</anchorfile>
      <anchor>aec60548eb237843a101b606ecb737cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>receivedLastFrag</name>
      <anchorfile>classigtl_1_1ReorderBuffer.html</anchorfile>
      <anchor>a890d5182976072f3576593131ee9ce0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>totFragNumber</name>
      <anchorfile>classigtl_1_1ReorderBuffer.html</anchorfile>
      <anchor>a5b305245d2044814c09fb4d20e32d5c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::RTSBindMessage</name>
    <filename>classigtl_1_1RTSBindMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_SUCCESS</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>a3b1110b6c95bdba73fbd9ca9d89fb96caef736e51486b84b37c934b779bc23154</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_ERROR</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>a3b1110b6c95bdba73fbd9ca9d89fb96ca718a0d087025a79d0b69034f62b0fc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_ERROR</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>a3b1110b6c95bdba73fbd9ca9d89fb96ca718a0d087025a79d0b69034f62b0fc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_SUCCESS</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>a3b1110b6c95bdba73fbd9ca9d89fb96caef736e51486b84b37c934b779bc23154</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint8</type>
      <name>GetStatus</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>ac388c01b06640748e372ac89aac6a6fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>a66a8cc3ce3c14e08d0f12f4ca18eda87</anchor>
      <arglist>(igtl::RTSBindMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>a75845e26521d6b8851fb9a9a0083b146</anchor>
      <arglist>(igtl::RTSBindMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStatus</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>aa0e64aa309590211c2b1878bb2f85b80</anchor>
      <arglist>(igtlUint8 status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>aa318d669281f978793d396421de8e573</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>a3ab4b8904d07c9ba7347164d7a7ccbc9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RTSBindMessage</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>a317f996dcd0d7538e227fa1cda818d1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>a2f08fcff03adf0b1201ec0a730391427</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~RTSBindMessage</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>a9a1325d2651b5520fa32f8a6b2541e1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_Status</name>
      <anchorfile>classigtl_1_1RTSBindMessage.html</anchorfile>
      <anchor>a91ba84cb123ee92f86a2d459fb8a2b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::RTSCommandMessage</name>
    <filename>classigtl_1_1RTSCommandMessage.html</filename>
    <base>igtl::CommandMessage</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetCommandContent</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a59a97a8048d72f80e8cc7dbe2ae431e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint32</type>
      <name>GetCommandContentLength</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a4c609f1888ad04dd8dbf7caad98b2f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetCommandErrorString</name>
      <anchorfile>classigtl_1_1RTSCommandMessage.html</anchorfile>
      <anchor>aba6bd53e6b8d737cbbced9f47890be5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint32</type>
      <name>GetCommandId</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>abf766ca78dea065e8cf507becf31363b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetCommandName</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a6a34fa92c1bd06073f9ef26382604fca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint16</type>
      <name>GetContentEncoding</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a290c4ccb48e273b89f4ea33c93f615d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCommandContent</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a1f02dbc3e1cc7285645d82d1f37d23ad</anchor>
      <arglist>(const char *string)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCommandContent</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>ac39ddf6b03f93ecc7a8a45f396b10331</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCommandErrorString</name>
      <anchorfile>classigtl_1_1RTSCommandMessage.html</anchorfile>
      <anchor>aa4b83788b534287ce3bbb3bf3c9071ed</anchor>
      <arglist>(const char *aCommandName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCommandErrorString</name>
      <anchorfile>classigtl_1_1RTSCommandMessage.html</anchorfile>
      <anchor>ab852afef02e59b95511f2f3497b9438a</anchor>
      <arglist>(const std::string &amp;aCommandName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCommandId</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a9e6167ac9b53e5332bc1fa1bcfcb120b</anchor>
      <arglist>(igtlUint32 aId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCommandName</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>ac4fbe34b2a05c705b2845a8afc0c37a2</anchor>
      <arglist>(const char *aCommandName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCommandName</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a7d1ee75d57a89296f4f16da7c4bffdcc</anchor>
      <arglist>(const std::string &amp;aCommandName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetContentEncoding</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a62feb989a4b585818a6d9a41b36fce09</anchor>
      <arglist>(igtlUint16 enc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>validEncodings</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>aea22cc8358bf3529404ccd64c1687dfc</anchor>
      <arglist>[257]</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>ab10945132792ecafc743f647f24722ea</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a0494c2a3ad3430e45cd94b34af483745</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RTSCommandMessage</name>
      <anchorfile>classigtl_1_1RTSCommandMessage.html</anchorfile>
      <anchor>a596e960eadad3d517350a39d7cb1d137</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>aaef5e1b5fc3c38a8721bc8e0c4ce0033</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~RTSCommandMessage</name>
      <anchorfile>classigtl_1_1RTSCommandMessage.html</anchorfile>
      <anchor>a2a4f29545086b889e6d8511c7927fac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Command</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a2754da60750c752eeef9c074e13930b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint32</type>
      <name>m_CommandId</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a7984025aaa66e008b1d97a951bb31f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_CommandName</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>afa68f8c55412eef313b4096b1ebbd3f8</anchor>
      <arglist>[IGTL_COMMAND_NAME_SIZE]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint16</type>
      <name>m_Encoding</name>
      <anchorfile>classigtl_1_1CommandMessage.html</anchorfile>
      <anchor>a8b98317ec6e58f76aa64182b94b3e76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::RTSPolyDataMessage</name>
    <filename>classigtl_1_1RTSPolyDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetStatus</name>
      <anchorfile>classigtl_1_1RTSPolyDataMessage.html</anchorfile>
      <anchor>a2ebd5c0d0a440be807effa79c544b1f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1RTSPolyDataMessage.html</anchorfile>
      <anchor>a5880bcb1316e9899913f338e40564bda</anchor>
      <arglist>(igtl::RTSPolyDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1RTSPolyDataMessage.html</anchorfile>
      <anchor>a5ded7830a96b41c6c68e397fef55d0db</anchor>
      <arglist>(igtl::RTSPolyDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStatus</name>
      <anchorfile>classigtl_1_1RTSPolyDataMessage.html</anchorfile>
      <anchor>a60119c19c43305a7b84d6259dc1834d6</anchor>
      <arglist>(bool status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1RTSPolyDataMessage.html</anchorfile>
      <anchor>a1c3d61a867eb9f0c4a513cbffd491cc6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1RTSPolyDataMessage.html</anchorfile>
      <anchor>a00212cc53b90f29767630634045d5ea1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RTSPolyDataMessage</name>
      <anchorfile>classigtl_1_1RTSPolyDataMessage.html</anchorfile>
      <anchor>a9902f741d562021cb0a3ebe5aa41f3e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1RTSPolyDataMessage.html</anchorfile>
      <anchor>a7213d26f040426a76b0c536597bfbf21</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~RTSPolyDataMessage</name>
      <anchorfile>classigtl_1_1RTSPolyDataMessage.html</anchorfile>
      <anchor>a8587a064642708bf911ad65c349be775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint8</type>
      <name>m_Status</name>
      <anchorfile>classigtl_1_1RTSPolyDataMessage.html</anchorfile>
      <anchor>abcaf977e54ee445f504db4fe47320655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::RTSQuaternionTrackingDataMessage</name>
    <filename>classigtl_1_1RTSQuaternionTrackingDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>STATUS_SUCCESS</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a88e5b8b544627ebc9caed61d0b3e8535a387eb1f3b02c4dde36447f7efd670d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_ERROR</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a88e5b8b544627ebc9caed61d0b3e8535a23b859ecf30bc864ec613eb3c9c2dd49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_ERROR</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a88e5b8b544627ebc9caed61d0b3e8535a23b859ecf30bc864ec613eb3c9c2dd49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_SUCCESS</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a88e5b8b544627ebc9caed61d0b3e8535a387eb1f3b02c4dde36447f7efd670d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint8</type>
      <name>GetStatus</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>afbc59a381a296411b2d90ab499af1fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a8ddcc0f21ecee418bdf3b2d72910c92c</anchor>
      <arglist>(igtl::RTSQuaternionTrackingDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>ace5a67f672f5bf13f960c16c9bde8bfe</anchor>
      <arglist>(igtl::RTSQuaternionTrackingDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStatus</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a3a87cc643e0b2f4723ab0c090de23a4e</anchor>
      <arglist>(igtlUint8 status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a2c7bbc5951c9bcaa9e99624d15ee1ea8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a2950874aea204d5246c2ff9dbd1124b7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RTSQuaternionTrackingDataMessage</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>aecaeec0a8b54eb374926f0a86ea652a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>abc6accb4fb73443b2a5bf165c1933dab</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~RTSQuaternionTrackingDataMessage</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>ab044e3598587922a7606bfab0f88d421</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_Status</name>
      <anchorfile>classigtl_1_1RTSQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a4e50449ef8f7e974451aa28e21c0686c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::RTSTrackingDataMessage</name>
    <filename>classigtl_1_1RTSTrackingDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_SUCCESS</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>a87c8f737d705ed0c9e7fcc6c3e9e949ca76d41f5e5d31d82d364f03c98ac6d5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_ERROR</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>a87c8f737d705ed0c9e7fcc6c3e9e949ca4cac917dd56245135b4e5b7ce284d08a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_ERROR</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>a87c8f737d705ed0c9e7fcc6c3e9e949ca4cac917dd56245135b4e5b7ce284d08a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_SUCCESS</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>a87c8f737d705ed0c9e7fcc6c3e9e949ca76d41f5e5d31d82d364f03c98ac6d5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint8</type>
      <name>GetStatus</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>a858bf534ec12da3827f1c4049415d5ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>a64e8499c41d671e1e239b5c629a7470e</anchor>
      <arglist>(igtl::RTSTrackingDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>a1a8f1483baa831b434bc7c8f4316ab6e</anchor>
      <arglist>(igtl::RTSTrackingDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStatus</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>aeca819d1f7d2f329c21c59d96b40feed</anchor>
      <arglist>(igtlUint8 status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>a070ae3e804c88c9c4d932b86fd574719</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>a537c7809ddfe02763e7a8a6b62c70908</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RTSTrackingDataMessage</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>ae1172088692baa033fc2f25198651bf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>a6eee650fe6d28e93b48537265e08fdbe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~RTSTrackingDataMessage</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>aaeebfea4652e4462634efe42f32f399d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_Status</name>
      <anchorfile>classigtl_1_1RTSTrackingDataMessage.html</anchorfile>
      <anchor>aa845669c95424868b73783062d6ff0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::SensorMessage</name>
    <filename>classigtl_1_1SensorMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetLength</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>aa7a7aa9e47c896c74ba60002e5f825ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type>igtlUnit</type>
      <name>GetUnit</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>ab5c38850614e957c04fcb69572a1e5f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetUnit</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>ad435ab9a03aa9eab54daaffceca07146</anchor>
      <arglist>(igtl::Unit *unit)</arglist>
    </member>
    <member kind="function">
      <type>igtlFloat64</type>
      <name>GetValue</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>a2193d21399aa3346692a252d5ab66184</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>ac68cf44a6e5e9a05a4adf42f88752d5f</anchor>
      <arglist>(igtl::SensorMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>a875831165c7650ff9bad5e9a680ecd9d</anchor>
      <arglist>(igtl::SensorMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetLength</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>af14dfc3d9ee154ba679a21e5ecc67db3</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUnit</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>a0e2e4704e9f99ea42feaf72576a0a071</anchor>
      <arglist>(igtl::Unit *unit)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUnit</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>a80c5776dba91b4a6f976ca2c98c4b015</anchor>
      <arglist>(igtlUnit unit)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetValue</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>a208eaf7a8c629e9329ff3e2c0e68fc81</anchor>
      <arglist>(igtlFloat64 *data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetValue</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>ab7e539c121c98ce49649d41f3729cdcd</anchor>
      <arglist>(unsigned int i, igtlFloat64 value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>a0a489c7b27619369e6b105f49015300d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>a616c3e07cfb73fcc94776111e75ea8b6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SensorMessage</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>ab058140b101edd358666880993b20387</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>ae66913ccb40637d7478c40799bea4d20</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~SensorMessage</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>a8439ad8839d2673bd5dc6174b2b47c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; igtlFloat64 &gt;</type>
      <name>m_Array</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>ab6ce7816a591571e59c4e9a11a91c461</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_Length</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>abc9ce6c19cd46c16df1b5e8b12231754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_Status</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>a9510e0794d12d634052364a730d33642</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUnit</type>
      <name>m_Unit</name>
      <anchorfile>classigtl_1_1SensorMessage.html</anchorfile>
      <anchor>a51912188afa98d436687aad9e7bd29ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl::serverPointer</name>
    <filename>structigtl_1_1serverPointer.html</filename>
    <member kind="variable">
      <type>VideoStreamIGTLinkServer *</type>
      <name>server</name>
      <anchorfile>structigtl_1_1serverPointer.html</anchorfile>
      <anchor>a909c9d44aa9361ef5ec4b70079d2daa5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::ServerSocket</name>
    <filename>classigtl_1_1ServerSocket.html</filename>
    <base>igtl::Socket</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aa36b49668d96c4e0a31bef60d1338697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateServer</name>
      <anchorfile>classigtl_1_1ServerSocket.html</anchorfile>
      <anchor>a1cea0be90fab16987da3e2b44d995bcd</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetConnected</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>abb9b6a706b03cf3a7678c193cf66e0c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetServerPort</name>
      <anchorfile>classigtl_1_1ServerSocket.html</anchorfile>
      <anchor>a85c544946304d3de54bb66452c5e7d3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSocketAddressAndPort</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>ab5f6e8238c65f47b28858888d49f6fa7</anchor>
      <arglist>(std::string &amp;address, int &amp;port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1ServerSocket.html</anchorfile>
      <anchor>a06064c4ceb231c7b4dd0c7c8343f975b</anchor>
      <arglist>(igtl::ServerSocket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1ServerSocket.html</anchorfile>
      <anchor>a230fa47f9ca7f241d07be4f41e17ce6f</anchor>
      <arglist>(igtl::ServerSocket, igtl::Socket)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint64</type>
      <name>Receive</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a92d9fad46d78bf4144eb26ef3c824785</anchor>
      <arglist>(void *data, igtlUint64 length, bool &amp;timeout, int readFully=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Send</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a963124bab8d7a96c1ab6a21e09811273</anchor>
      <arglist>(const void *data, igtlUint64 length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetReceiveBlocking</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>acc83d42a5d3d2e92e4c5eeff34e2fae2</anchor>
      <arglist>(int sw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetReceiveTimeout</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a5545d2c2b479bc53fc1e61826bd7d1fb</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSendBlocking</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>af76c90b7dab7cfb5c0466712990d7934</anchor>
      <arglist>(int sw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSendTimeout</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>abca1c843ff2fa427981b32f3461c632a</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeout</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a2a7e1892a9aaece95facc30236e03ba8</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Skip</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a6d6e61d7d25c019630c1dc5ef7a50511</anchor>
      <arglist>(igtlUint64 length, int skipFully=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ClientSocket::Pointer</type>
      <name>WaitForConnection</name>
      <anchorfile>classigtl_1_1ServerSocket.html</anchorfile>
      <anchor>a787426e08152eaa4496943b76b90f6fd</anchor>
      <arglist>(unsigned long msec=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Accept</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aedb40f1ac7fb0646f769e12d65dd5c93</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BindSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aa72c6517455de67590e313a0088ca9e6</anchor>
      <arglist>(int socketdescriptor, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CloseSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a337248fd9c6cf4c92f24a1f081e552a0</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Connect</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a012c002e9204e7aaa880466abc4977b6</anchor>
      <arglist>(int socketdescriptor, const char *hostname, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreateSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a024f603e293f57f5eabcd5eb08f35363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetPort</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aff88760cd0c238eeb077e901deb7848e</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>igtlGetMacro</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>ad6ec7041f1169f1a106c0b57631f5922</anchor>
      <arglist>(SocketDescriptor, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Listen</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a658847fd28275fec1d29d12ad1d52d7e</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1ServerSocket.html</anchorfile>
      <anchor>a9deaa8fb898ec1dfd76c1e5d8bac5958</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SelectSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>ac0c19c70fa5478612883947ee2d182d2</anchor>
      <arglist>(int socketdescriptor, unsigned long msec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ServerSocket</name>
      <anchorfile>classigtl_1_1ServerSocket.html</anchorfile>
      <anchor>afc83d1bcadfb9fd2e5ada8d157517e23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ServerSocket</name>
      <anchorfile>classigtl_1_1ServerSocket.html</anchorfile>
      <anchor>a1e3877d214067444cfb067e4c4a6a9e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>SelectSockets</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>afde6fab802405106ea100d565e4700bb</anchor>
      <arglist>(const int *sockets_to_select, int size, unsigned long msec, int *selected_index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_SocketDescriptor</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a101b564ff0ec89fa3f287da2ef373e49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::SessionManager</name>
    <filename>classigtl_1_1SessionManager.html</filename>
    <base>igtl::Object</base>
    <member kind="enumvalue">
      <name>MODE_SERVER</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a70312b7022faefa91482ae479625b330a40c7b4b4dd049c689fe702629b464ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODE_CLIENT</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a70312b7022faefa91482ae479625b330a60ce11a982932dd659eab1d0a836250a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODE_CLIENT</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a70312b7022faefa91482ae479625b330a60ce11a982932dd659eab1d0a836250a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODE_SERVER</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a70312b7022faefa91482ae479625b330a40c7b4b4dd049c689fe702629b464ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddMessageHandler</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>ab58cfe93c90f6e69aff720e8eca80e35</anchor>
      <arglist>(MessageHandler *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Connect</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a40403d72751bd1b700503c5dd0cd7551</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Disconnect</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a2f9f712f702d82f29c6cdd83b441a157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetHostname</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>ab99d5c50f7035886015f9e031f38b877</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetMode</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a19ca0f85e51f04f19b9e906bea3dd68c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetPort</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a70df3abeb1450413b5ac098486cc2940</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a392d5b64e6056d3e6642c22fb22dc3f5</anchor>
      <arglist>(SessionManager, Object) igtlNewMacro(SessionManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ProcessMessage</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a0f40fd6993157035c0fd3a9a48acd2ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PushMessage</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>ac93a92ca8f6e648f0da043429d7bf34c</anchor>
      <arglist>(MessageBase *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemoveMessageHandler</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>adbf2d1935a9ffb6be75e8ebba8eab72c</anchor>
      <arglist>(MessageHandler *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHostname</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a0dad72a611ee8168471bc32725b61dd7</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMode</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a4d8935e4c576455f46d21b8f18573f22</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPort</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>ab14efec14d07746da6e1b0417ddfcd29</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SessionManager</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a1a173a709aa1418681acebac3634e3f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~SessionManager</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a42ec743951bda4c3a1cc88d3b151198b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_ConfigurationUpdated</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>ac015bcdec5bf67b6d99a8f7976ab6a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MessageHandler *</type>
      <name>m_CurrentMessageHandler</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a686333cf41e8a7064195e0ab3728e3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_CurrentReadIndex</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a50890b5ba28884ac5f1616c4616f8f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl::MessageHeader::Pointer</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a69bc7b1d2019614baf4a1f3bc59baa8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_HeaderDeserialized</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>ac0513cabce98d2fb25efe7b49f2f9ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Hostname</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>ae26f17ceb34139a1ef893fe33e47ab8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; MessageHandler * &gt;</type>
      <name>m_MessageHandlerList</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>aa08ca9b4a7f9c149ca5d17a719ee5294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_Mode</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a2bbabc7269d1e3f1705587e7be77954c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_Port</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>ac5589ecb4c2293f90e890ad4ffaf7a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Socket::Pointer</type>
      <name>m_Socket</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a23bc3a604bfed926e97376a101389976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl::TimeStamp::Pointer</type>
      <name>m_TimeStamp</name>
      <anchorfile>classigtl_1_1SessionManager.html</anchorfile>
      <anchor>a963a0b7726868f0849b6fe6df3f0402f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::SimpleFastMutexLock</name>
    <filename>classigtl_1_1SimpleFastMutexLock.html</filename>
    <member kind="typedef">
      <type>SimpleFastMutexLock</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1SimpleFastMutexLock.html</anchorfile>
      <anchor>a6efa4ebf96c273af74efda4d578f257f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Lock</name>
      <anchorfile>classigtl_1_1SimpleFastMutexLock.html</anchorfile>
      <anchor>acb395a49d983b74905ee95de5e0eac28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFastMutexLock</name>
      <anchorfile>classigtl_1_1SimpleFastMutexLock.html</anchorfile>
      <anchor>a628bb894f23e9223dc443ecaaecc8149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Unlock</name>
      <anchorfile>classigtl_1_1SimpleFastMutexLock.html</anchorfile>
      <anchor>a7dc014706eec860ad77f507bee989fbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleFastMutexLock</name>
      <anchorfile>classigtl_1_1SimpleFastMutexLock.html</anchorfile>
      <anchor>aa1460addb58b2c76d3bbfe9aa316e307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastMutexType</type>
      <name>m_FastMutexLock</name>
      <anchorfile>classigtl_1_1SimpleFastMutexLock.html</anchorfile>
      <anchor>aed3595fa3626ca0b20fa3770bb5ef70f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::SimpleMutexLock</name>
    <filename>classigtl_1_1SimpleMutexLock.html</filename>
    <member kind="typedef">
      <type>SimpleMutexLock</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1SimpleMutexLock.html</anchorfile>
      <anchor>ad87471ba5531ba1574b4c2ca79389a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MutexType &amp;</type>
      <name>GetMutexLock</name>
      <anchorfile>classigtl_1_1SimpleMutexLock.html</anchorfile>
      <anchor>a972044cd4a1f6fcdd1afc1b205279df2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MutexType</type>
      <name>GetMutexLock</name>
      <anchorfile>classigtl_1_1SimpleMutexLock.html</anchorfile>
      <anchor>ad05b3a9d1228b1311bddbb03fdbb4d20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1SimpleMutexLock.html</anchorfile>
      <anchor>a05733ca72acf8cd155f293459a782d4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Lock</name>
      <anchorfile>classigtl_1_1SimpleMutexLock.html</anchorfile>
      <anchor>ab33d30895798e43b4d7d121af2895aa1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleMutexLock</name>
      <anchorfile>classigtl_1_1SimpleMutexLock.html</anchorfile>
      <anchor>a5ba52301d857e72abdc0f74923694636</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Unlock</name>
      <anchorfile>classigtl_1_1SimpleMutexLock.html</anchorfile>
      <anchor>a36307dc2072aca428e4b4251f6569a83</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleMutexLock</name>
      <anchorfile>classigtl_1_1SimpleMutexLock.html</anchorfile>
      <anchor>a21d0de903f50ebbe9b59fe60e7bf3e48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SimpleMutexLock *</type>
      <name>New</name>
      <anchorfile>classigtl_1_1SimpleMutexLock.html</anchorfile>
      <anchor>a05ce3e699cd0994b3908ec494d83d636</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MutexType</type>
      <name>m_MutexLock</name>
      <anchorfile>classigtl_1_1SimpleMutexLock.html</anchorfile>
      <anchor>af23ca1afc7bf2cfcebce6063ea6446e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::SmartPointer</name>
    <filename>classigtl_1_1SmartPointer.html</filename>
    <templarg>class TObjectType</templarg>
    <member kind="typedef">
      <type>TObjectType</type>
      <name>ObjectType</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a9c844d4eb93b62e4eaac8c183872c374</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>GetPointer</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a2b1dc7ccedb35bbe1d2747253bfc3685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNotNull</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>ae09c966cffa633b620d2358053099f8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNull</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a24d94d1e3c4fddf5ef184546c42047ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ObjectType *</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a598178778dfc8b9e8491701ebf83037c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a2edf80e5f4f35d3cb4d2c0111ee23dec</anchor>
      <arglist>(R r) const</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>af2dd58c29a90f8068b9e93f34f88e8c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>ac8526ea42a8568f7ba38c7af6882f729</anchor>
      <arglist>(const SmartPointer &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a1560a6e5d6d6a9369cb6d4dbffb135bd</anchor>
      <arglist>(const SmartPointer &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>SmartPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a90cf1ea19b4c89343acb0ac82c634ee3</anchor>
      <arglist>(const SmartPointer &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SmartPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>af9fabd84f46781b32ba0931fb4f844ea</anchor>
      <arglist>(ObjectType *r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a3bef2c91d81874fead3c8ccbcfbc375e</anchor>
      <arglist>(R r) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a22dc47d26076542d5553b040b13bea09</anchor>
      <arglist>(const SmartPointer &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a5ef6222e426034dab921e7def3bff41d</anchor>
      <arglist>(const SmartPointer &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a56b19754f05cf64b758575ef741893c8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartPointer</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>aeb22ef10f3bf4998c7248dec54131c6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartPointer</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>aa9a2c696b43d75ff366b3caae73b8a1b</anchor>
      <arglist>(const SmartPointer&lt; ObjectType &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartPointer</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a37edeb70d2aa5f10ded71c858c8b416a</anchor>
      <arglist>(ObjectType *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SmartPointer</name>
      <anchorfile>classigtl_1_1SmartPointer.html</anchorfile>
      <anchor>a04dad82730b305f6a60ea85c0d9e58a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SmartPointer</name>
    <filename>classSmartPointer.html</filename>
    <templarg>class TObjectType</templarg>
    <member kind="typedef">
      <type>TObjectType</type>
      <name>ObjectType</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a9c844d4eb93b62e4eaac8c183872c374</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>GetPointer</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a2b1dc7ccedb35bbe1d2747253bfc3685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNotNull</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>ae09c966cffa633b620d2358053099f8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNull</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a24d94d1e3c4fddf5ef184546c42047ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ObjectType *</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a598178778dfc8b9e8491701ebf83037c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a2edf80e5f4f35d3cb4d2c0111ee23dec</anchor>
      <arglist>(R r) const</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>af2dd58c29a90f8068b9e93f34f88e8c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>ac8526ea42a8568f7ba38c7af6882f729</anchor>
      <arglist>(const SmartPointer &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a1560a6e5d6d6a9369cb6d4dbffb135bd</anchor>
      <arglist>(const SmartPointer &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>SmartPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a90cf1ea19b4c89343acb0ac82c634ee3</anchor>
      <arglist>(const SmartPointer &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SmartPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>af9fabd84f46781b32ba0931fb4f844ea</anchor>
      <arglist>(ObjectType *r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a3bef2c91d81874fead3c8ccbcfbc375e</anchor>
      <arglist>(R r) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a22dc47d26076542d5553b040b13bea09</anchor>
      <arglist>(const SmartPointer &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a5ef6222e426034dab921e7def3bff41d</anchor>
      <arglist>(const SmartPointer &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>Print</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a56b19754f05cf64b758575ef741893c8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartPointer</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>aeb22ef10f3bf4998c7248dec54131c6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartPointer</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>aa9a2c696b43d75ff366b3caae73b8a1b</anchor>
      <arglist>(const SmartPointer&lt; ObjectType &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartPointer</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a37edeb70d2aa5f10ded71c858c8b416a</anchor>
      <arglist>(ObjectType *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SmartPointer</name>
      <anchorfile>classSmartPointer.html</anchorfile>
      <anchor>a04dad82730b305f6a60ea85c0d9e58a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::Socket</name>
    <filename>classigtl_1_1Socket.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aa36b49668d96c4e0a31bef60d1338697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetConnected</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>abb9b6a706b03cf3a7678c193cf66e0c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSocketAddressAndPort</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>ab5f6e8238c65f47b28858888d49f6fa7</anchor>
      <arglist>(std::string &amp;address, int &amp;port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint64</type>
      <name>Receive</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a92d9fad46d78bf4144eb26ef3c824785</anchor>
      <arglist>(void *data, igtlUint64 length, bool &amp;timeout, int readFully=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Send</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a963124bab8d7a96c1ab6a21e09811273</anchor>
      <arglist>(const void *data, igtlUint64 length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetReceiveBlocking</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>acc83d42a5d3d2e92e4c5eeff34e2fae2</anchor>
      <arglist>(int sw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetReceiveTimeout</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a5545d2c2b479bc53fc1e61826bd7d1fb</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSendBlocking</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>af76c90b7dab7cfb5c0466712990d7934</anchor>
      <arglist>(int sw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSendTimeout</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>abca1c843ff2fa427981b32f3461c632a</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeout</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a2a7e1892a9aaece95facc30236e03ba8</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Skip</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a6d6e61d7d25c019630c1dc5ef7a50511</anchor>
      <arglist>(igtlUint64 length, int skipFully=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Accept</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aedb40f1ac7fb0646f769e12d65dd5c93</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BindSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aa72c6517455de67590e313a0088ca9e6</anchor>
      <arglist>(int socketdescriptor, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CloseSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a337248fd9c6cf4c92f24a1f081e552a0</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Connect</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a012c002e9204e7aaa880466abc4977b6</anchor>
      <arglist>(int socketdescriptor, const char *hostname, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreateSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a024f603e293f57f5eabcd5eb08f35363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetPort</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aff88760cd0c238eeb077e901deb7848e</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>igtlGetMacro</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>ad6ec7041f1169f1a106c0b57631f5922</anchor>
      <arglist>(SocketDescriptor, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Listen</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a658847fd28275fec1d29d12ad1d52d7e</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a497ac56c47d4c003ca458722af7a7c71</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SelectSocket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>ac0c19c70fa5478612883947ee2d182d2</anchor>
      <arglist>(int socketdescriptor, unsigned long msec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Socket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a7c3256c4fc6e2c603df73201049fae5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~Socket</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>aeac4eb6379a543d38ed88977d3b6630a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>SelectSockets</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>afde6fab802405106ea100d565e4700bb</anchor>
      <arglist>(const int *sockets_to_select, int size, unsigned long msec, int *selected_index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_SocketDescriptor</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a101b564ff0ec89fa3f287da2ef373e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>vtkSocketCollection</name>
      <anchorfile>classigtl_1_1Socket.html</anchorfile>
      <anchor>a4e3b82b42752248c8d22cf7842f683bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Socket</name>
    <filename>classSocket.html</filename>
  </compound>
  <compound kind="struct">
    <name>igtl::SourcePicture</name>
    <filename>structigtl_1_1SourcePicture.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>colorFormat</name>
      <anchorfile>structigtl_1_1SourcePicture.html</anchorfile>
      <anchor>a91ec9f8f220b4139fa6cb97a42aa377c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char *</type>
      <name>data</name>
      <anchorfile>structigtl_1_1SourcePicture.html</anchorfile>
      <anchor>a81fa57083a8b4acc44b911a32bf646f1</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>picHeight</name>
      <anchorfile>structigtl_1_1SourcePicture.html</anchorfile>
      <anchor>ac163d783f4e7ef76b2ed17fd667cd7d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>picWidth</name>
      <anchorfile>structigtl_1_1SourcePicture.html</anchorfile>
      <anchor>aac68fecc9bc16752888ef3155856700e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stride</name>
      <anchorfile>structigtl_1_1SourcePicture.html</anchorfile>
      <anchor>a7b68bc229f415cc630c4401f6abf0f48</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>long long</type>
      <name>timeStamp</name>
      <anchorfile>structigtl_1_1SourcePicture.html</anchorfile>
      <anchor>a6dc6c3db7e404233382af42c58a22bb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StartBindMessage</name>
    <filename>classigtl_1_1StartBindMessage.html</filename>
    <base>igtl::GetBindMessage</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AppendChildMessage</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a09fddb3bd507e57f066c3d052b33b7ba</anchor>
      <arglist>(igtl::MessageBase *child)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AppendChildMessage</name>
      <anchorfile>classigtl_1_1GetBindMessage.html</anchorfile>
      <anchor>ac9c2bd939c5d84f6d662c3bdd4b96a9a</anchor>
      <arglist>(const char *type, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetChildMessageType</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>aa14b9383a1e5a910d5f67f3727314dfe</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfChildMessages</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>ae7c45fec0b6e013bb81f8167787e7497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint64</type>
      <name>GetResolution</name>
      <anchorfile>classigtl_1_1StartBindMessage.html</anchorfile>
      <anchor>afe58c0e943b50b1a2795f9d00d7d0890</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a892394538bad3f1c914d16737eec6488</anchor>
      <arglist>(igtl::BindMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1GetBindMessage.html</anchorfile>
      <anchor>a6cb669b6cbedcda0c0c05e015d00fceb</anchor>
      <arglist>(igtl::GetBindMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StartBindMessage.html</anchorfile>
      <anchor>a609faacbab5e10742f26835c48830e37</anchor>
      <arglist>(igtl::StartBindMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>aac1819abaadd1809e108929523847dc0</anchor>
      <arglist>(igtl::BindMessageBase, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GetBindMessage.html</anchorfile>
      <anchor>ac2d53fa1d1b1d4469d485277fe6ce572</anchor>
      <arglist>(igtl::GetBindMessage, igtl::BindMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StartBindMessage.html</anchorfile>
      <anchor>ab009ecda69f62e132bf7e12885cf666b</anchor>
      <arglist>(igtl::StartBindMessage, igtl::GetBindMessage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a9129b88d8f7dc941a1e6b968cb81b0fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetChildMessage</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a9e7ed2a23e8ab38bf5aa68162f4ba507</anchor>
      <arglist>(unsigned int i, igtl::MessageBase *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetNumberOfChildMessages</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>a25e8fbe421e7f0b07aab20538247e557</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetResolution</name>
      <anchorfile>classigtl_1_1StartBindMessage.html</anchorfile>
      <anchor>a80c284e35562b9430de39f1508b39def</anchor>
      <arglist>(igtlUint64 res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>struct igtl::BindMessageBase::_ChildMessageInfo</type>
      <name>ChildMessageInfo</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>ab0d07d1f00e1c74df204594866b559c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1StartBindMessage.html</anchorfile>
      <anchor>a5b439ba2ffa93cfdde9b11109ca299e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1StartBindMessage.html</anchorfile>
      <anchor>a9663a492f243a287b1acf70671eff456</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StartBindMessage</name>
      <anchorfile>classigtl_1_1StartBindMessage.html</anchorfile>
      <anchor>a14b431c4c6466460a9b16b0bedc61629</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1StartBindMessage.html</anchorfile>
      <anchor>aa6615cada45c3a6547376f18a51d3c6e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StartBindMessage</name>
      <anchorfile>classigtl_1_1StartBindMessage.html</anchorfile>
      <anchor>a94fe8b71ef6a9cb8175c749139de1399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ChildMessageInfo &gt;</type>
      <name>m_ChildMessages</name>
      <anchorfile>classigtl_1_1BindMessageBase.html</anchorfile>
      <anchor>abc885fa399cdee5db15927db0d5a7a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint64</type>
      <name>m_Resolution</name>
      <anchorfile>classigtl_1_1StartBindMessage.html</anchorfile>
      <anchor>a8a152279454d06a44f98c8c2ddf8c65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StartPolyDataMessage</name>
    <filename>classigtl_1_1StartPolyDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StartPolyDataMessage.html</anchorfile>
      <anchor>aa795f33a0ba2cfebbdf4599be05504ad</anchor>
      <arglist>(igtl::StartPolyDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StartPolyDataMessage.html</anchorfile>
      <anchor>a2ac728c2eda737cffefe2927b5e5cded</anchor>
      <arglist>(igtl::StartPolyDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aed868c4613b81bafcca995b70a498897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>GetBodyPackSize</name>
      <anchorfile>classigtl_1_1StartPolyDataMessage.html</anchorfile>
      <anchor>a55c68924ed621eab6ca3ed6dfcc3f5d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>PackBody</name>
      <anchorfile>classigtl_1_1StartPolyDataMessage.html</anchorfile>
      <anchor>a1f62f870c1e3f563eea14fa29c16a549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a676a1e762a1075bbc79885da102fde3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StartPolyDataMessage</name>
      <anchorfile>classigtl_1_1StartPolyDataMessage.html</anchorfile>
      <anchor>a15e92125c13893c2d908ff337b863300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1StartPolyDataMessage.html</anchorfile>
      <anchor>a613d19c6659e3bb1338d149695d56f72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abc10ae9c58764bfaebe9e73297deb0a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StartPolyDataMessage</name>
      <anchorfile>classigtl_1_1StartPolyDataMessage.html</anchorfile>
      <anchor>a246f9b7f17e683af683a4078df09964f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StartQuaternionTrackingDataMessage</name>
    <filename>classigtl_1_1StartQuaternionTrackingDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetCoordinateName</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a5849e08145e3be21b8d1550558b8560f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlInt32</type>
      <name>GetResolution</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>afe611ea580c348b50193f279ac94eb9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a03e14eeca7d3dde689ca1c43173f4180</anchor>
      <arglist>(igtl::StartQuaternionTrackingDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a898e19ff7d209c953e6671a942bf35e8</anchor>
      <arglist>(igtl::StartQuaternionTrackingDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCoordinateName</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>aad26051a12376d6df669133c0f653583</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetResolution</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a6bf2c5fdeae449e459f09dcff134c328</anchor>
      <arglist>(igtlInt32 res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a22a1d24d444089f3da31666fe4179606</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>ad51b75bb21f3cc82578b4c401110e568</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StartQuaternionTrackingDataMessage</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a5b8cfe87a93ee7f052ce66ac04c652c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>ae6c37f3d1e1c3faf2813f658a462da2e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StartQuaternionTrackingDataMessage</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>ab7de3473d6b600c5c5c9e569a72a43fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_CoordinateName</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>acb9c9b0ce499dbd66bd32b32d4fac9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlInt32</type>
      <name>m_Resolution</name>
      <anchorfile>classigtl_1_1StartQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>aed11272e7375aacf7c013dc7ae52faf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StartTrackingDataMessage</name>
    <filename>classigtl_1_1StartTrackingDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetCoordinateName</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>a45c461940e87e88327605452f143f6ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlInt32</type>
      <name>GetResolution</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>ad48bf548f4bd81e03d40c63d2a50f081</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>aefac3848675438159280a034a4d293d2</anchor>
      <arglist>(igtl::StartTrackingDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>a801cceba0f2b3198a9590cfd097feb5f</anchor>
      <arglist>(igtl::StartTrackingDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCoordinateName</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>afd835797e0587fd193a011e0d24bbe3f</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetResolution</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>a55fbafffac5ca1a2dbc90a9a5ea03bfd</anchor>
      <arglist>(igtlInt32 res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>a3d38900a5103500d4b83adfc93b14a65</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>a9595b846334144b3f1699ba8973b66cb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StartTrackingDataMessage</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>a8d473d3f5ff175b9790206d5ede82dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>a0206a5a720f236f302b36a359a95da0e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StartTrackingDataMessage</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>ab4959e8a743d5090f9b70efbf7738bbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_CoordinateName</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>adb085a66bb0579445ee018d21f79467a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlInt32</type>
      <name>m_Resolution</name>
      <anchorfile>classigtl_1_1StartTrackingDataMessage.html</anchorfile>
      <anchor>a6f59110cc4d740572c17012718723f24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StartVideoMessage</name>
    <filename>classigtl_1_1StartVideoMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetCodecType</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>a695e26ad0de0ab7d7703ebdac9cc3368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlInt32</type>
      <name>GetTimeInterval</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>a540bc670d37270532918d8c350a829d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>a05fe9901e423617b3e9542fa53cb5310</anchor>
      <arglist>(igtl::StartVideoMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>ad666a68d83bc16710f727e1ffa48a19a</anchor>
      <arglist>(igtl::StartVideoMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCodecType</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>adb7cdb84d9d626416539a704bb8f54cb</anchor>
      <arglist>(const char codecType[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeInterval</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>a78fe8547fc20036f831354679035f54d</anchor>
      <arglist>(igtlInt32 interval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>ab36dc9ddfbf9faa32bd55fb1c98b7466</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>GetBodyPackSize</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>a0e6a18f50a21a156c9f02f21698bdd86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>aaa96aa7c05e4d556cf23f391ea5e75bb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StartVideoMessage</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>ada4cc80e8239cc255860f1fabc02a60c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>a2ec4182dd44077e21d091de1fc2776cd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StartVideoMessage</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>afc71132dd9f9e69f63111a44710f7790</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_CodecType</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>aad56e3922cb2e366b1c9fe527f18b34c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlInt32</type>
      <name>m_TimeInterval</name>
      <anchorfile>classigtl_1_1StartVideoMessage.html</anchorfile>
      <anchor>af58fea76682ec5ae13bd78c9ab450337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StatusMessage</name>
    <filename>classigtl_1_1StatusMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_INVALID</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaad42024080fbbe9a6659502e0c46e5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_OK</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaa1ecc76c165d151c9b6f5ae56bcf2ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_UNKNOWN_ERROR</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca40c685ec7d01708fae1eb4c319c417bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_PANICK_MODE</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecacf905e86fc20f32ea0ccbb1df692fdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_NOT_FOUND</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca2e117350938d65f771452aa29feb7968</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_ACCESS_DENIED</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaebacb9d44273312f68f979f84999a230</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_BUSY</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca7101c724b918bd9d06ab9b6cf40cfcd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_TIME_OUT</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaf2278c8608dcc1ab598865bc0a40cab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_OVERFLOW</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecab7a0f1518de19905be9dbb4de3373811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_CHECKSUM_ERROR</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaf9b54a20ce6c2a83d318e6a436c18315</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_CONFIG_ERROR</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecadf4a4281d32cb137579a17d40e14f6cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_RESOURCE_ERROR</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca027ffc1dc710e94cf85084ce26b7cd1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_UNKNOWN_INSTRUCTION</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca5202be67a9864558584757a54144a740</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_NOT_READY</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecae0c2acd92e90f78da8537a1bb7f13f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_MANUAL_MODE</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaa845851e9ae01602091b44a25f4ae5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_DISABLED</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca44831705067ae6bec47fce7eac55e20f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_NOT_PRESENT</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca9aba81b55bc8eeb4c0764e6e440648e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_UNKNOWN_VERSION</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca73b2cc882ae75f8f3823bcf8f6d0e09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_HARDWARE_FAILURE</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca0e2256407b6ae4d2186c349d1698d93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_SHUT_DOWN</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca0a46db4a7dd9f00ae92be4be1557e760</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_NUM_TYPES</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaaf2bb06070773cef0b34fe42e3b6ee1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_ACCESS_DENIED</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaebacb9d44273312f68f979f84999a230</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_BUSY</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca7101c724b918bd9d06ab9b6cf40cfcd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_CHECKSUM_ERROR</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaf9b54a20ce6c2a83d318e6a436c18315</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_CONFIG_ERROR</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecadf4a4281d32cb137579a17d40e14f6cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_DISABLED</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca44831705067ae6bec47fce7eac55e20f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_HARDWARE_FAILURE</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca0e2256407b6ae4d2186c349d1698d93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_INVALID</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaad42024080fbbe9a6659502e0c46e5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_MANUAL_MODE</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaa845851e9ae01602091b44a25f4ae5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_NOT_FOUND</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca2e117350938d65f771452aa29feb7968</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_NOT_PRESENT</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca9aba81b55bc8eeb4c0764e6e440648e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_NOT_READY</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecae0c2acd92e90f78da8537a1bb7f13f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_NUM_TYPES</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaaf2bb06070773cef0b34fe42e3b6ee1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_OK</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaa1ecc76c165d151c9b6f5ae56bcf2ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_OVERFLOW</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecab7a0f1518de19905be9dbb4de3373811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_PANICK_MODE</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecacf905e86fc20f32ea0ccbb1df692fdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_RESOURCE_ERROR</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca027ffc1dc710e94cf85084ce26b7cd1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_SHUT_DOWN</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca0a46db4a7dd9f00ae92be4be1557e760</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_TIME_OUT</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeecaf2278c8608dcc1ab598865bc0a40cab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_UNKNOWN_ERROR</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca40c685ec7d01708fae1eb4c319c417bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_UNKNOWN_INSTRUCTION</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca5202be67a9864558584757a54144a740</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATUS_UNKNOWN_VERSION</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ab03520ef39dfea439158c042d53bfeeca73b2cc882ae75f8f3823bcf8f6d0e09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCode</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a57085c17b6b2bdc03fdcccd32c40e43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetErrorName</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a185c2921fa5063bcbcbc26ad5c1795fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetStatusString</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ae5103827c2344b35f86fcc15e40de55f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtlInt64</type>
      <name>GetSubCode</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>aafb265a3b6b8aa94025f2feb7c0a7d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a3d3f9511f1303c8501a38c6f04a27b7b</anchor>
      <arglist>(igtl::StatusMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a1f627f78d5b83fdebca8deaa2d007d09</anchor>
      <arglist>(igtl::StatusMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCode</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>ae13f62789e8c9449c0f468ce0aba89b5</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetErrorName</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a1e4548232625dbea0a74fb24f17c023b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStatusString</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a263a4712c5a6581d1e21792d5a8ef622</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubCode</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a2b678c148b132d661f6ddfc743bddbec</anchor>
      <arglist>(igtlInt64 subcode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>aa02bc0eaec4ca1dd92753b6a8a8f3829</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a9f081bba177766dfc3baafafc01f87d6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StatusMessage</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a09f75f1fcf400affb27a7dc8f10c2b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>aa4bcc6b46a0513ec7984b326144aa8af</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StatusMessage</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a3a7a2bcfeeaef742a34474bd1000186b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint16</type>
      <name>m_Code</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a927b8c8d4f4ccf1a91d22125bd430058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>m_ErrorName</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a00117994e51a246d010da32fac1269f4</anchor>
      <arglist>[20]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_StatusHeader</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a634033dde3fbbe4d251c9a74754be76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>m_StatusMessage</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>a5a083d4c34bb97dcb67dc490c67cc65b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_StatusMessageString</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>aeac6bec925af3c87e93382c9ad673063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlInt64</type>
      <name>m_SubCode</name>
      <anchorfile>classigtl_1_1StatusMessage.html</anchorfile>
      <anchor>af0375f31060b73507f28b4470d311baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StopBindMessage</name>
    <filename>classigtl_1_1StopBindMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StopBindMessage.html</anchorfile>
      <anchor>a3a8ca21c801ff43fabd7649d8f38ba8d</anchor>
      <arglist>(igtl::StopBindMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StopBindMessage.html</anchorfile>
      <anchor>a9346ea8cb825908b9fcbcfdf551fccc9</anchor>
      <arglist>(igtl::StopBindMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1StopBindMessage.html</anchorfile>
      <anchor>ad4126a5000440f333d2da69a5d62dc54</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1StopBindMessage.html</anchorfile>
      <anchor>af2f09511f6c738ffa30a3afbc2844966</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopBindMessage</name>
      <anchorfile>classigtl_1_1StopBindMessage.html</anchorfile>
      <anchor>a0aea0325d9f7eb1d1ed88625b103fec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1StopBindMessage.html</anchorfile>
      <anchor>a466fdc7af116f8cf9a525b8fc6a46e22</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StopBindMessage</name>
      <anchorfile>classigtl_1_1StopBindMessage.html</anchorfile>
      <anchor>a39ca8f39bcec563774bbb1b9cf59b0d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StopImageMessage</name>
    <filename>classigtl_1_1StopImageMessage.html</filename>
    <base>igtl::HeaderOnlyMessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a2490de099ea3804d81264174e8ade61a</anchor>
      <arglist>(igtl::HeaderOnlyMessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StopImageMessage.html</anchorfile>
      <anchor>a894fccb5c3dae83dc0f77df99c369b39</anchor>
      <arglist>(igtl::StopImageMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a4ea157687cffa9ddcc8336cc52fde7be</anchor>
      <arglist>(igtl::HeaderOnlyMessageBase, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StopImageMessage.html</anchorfile>
      <anchor>ad8689670c69244ea262e1db46b10e6c6</anchor>
      <arglist>(igtl::StopImageMessage, igtl::HeaderOnlyMessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>ac5a60869cd7888329b8211b35e10f3e0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a062c3f706b51d5b68295d188c1946022</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopImageMessage</name>
      <anchorfile>classigtl_1_1StopImageMessage.html</anchorfile>
      <anchor>a91c09b9f9385be3cb522c2602d201aca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1HeaderOnlyMessageBase.html</anchorfile>
      <anchor>a1cbb666248fc4bd80244952225e04a6d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StopImageMessage</name>
      <anchorfile>classigtl_1_1StopImageMessage.html</anchorfile>
      <anchor>ae482f79a3251d64369f4100f9481d857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StopPolyDataMessage</name>
    <filename>classigtl_1_1StopPolyDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StopPolyDataMessage.html</anchorfile>
      <anchor>a5892f68cb9b1856ad826c0aebedd9a88</anchor>
      <arglist>(igtl::StopPolyDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StopPolyDataMessage.html</anchorfile>
      <anchor>a70c2beda994326f5d7664a4f9189ef71</anchor>
      <arglist>(igtl::StopPolyDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aed868c4613b81bafcca995b70a498897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>GetBodyPackSize</name>
      <anchorfile>classigtl_1_1StopPolyDataMessage.html</anchorfile>
      <anchor>ae06c6e8edeebed8c583471d248c600b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>PackBody</name>
      <anchorfile>classigtl_1_1StopPolyDataMessage.html</anchorfile>
      <anchor>a34657c4bf02074c5d9f6e5243bf8f82e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a676a1e762a1075bbc79885da102fde3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopPolyDataMessage</name>
      <anchorfile>classigtl_1_1StopPolyDataMessage.html</anchorfile>
      <anchor>aaf16d1ec6c7ade3a021e0a24496b6b66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1StopPolyDataMessage.html</anchorfile>
      <anchor>a27669fafc5c015c042ab98075da7ace3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abc10ae9c58764bfaebe9e73297deb0a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StopPolyDataMessage</name>
      <anchorfile>classigtl_1_1StopPolyDataMessage.html</anchorfile>
      <anchor>a2cbaaf7cf7c2cdd8dc3f7659950508c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StopQuaternionTrackingDataMessage</name>
    <filename>classigtl_1_1StopQuaternionTrackingDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StopQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>adf961e934f66d0e0789c4cd764d9faf3</anchor>
      <arglist>(igtl::StopQuaternionTrackingDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StopQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a6884a0b3f3fbd23927ae3b26f23d7fa8</anchor>
      <arglist>(igtl::StopQuaternionTrackingDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1StopQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>aae8e94655d21c736e33cd37d95c4a286</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1StopQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a391a96554e28e38f1914839a3dcede19</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopQuaternionTrackingDataMessage</name>
      <anchorfile>classigtl_1_1StopQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>ae25e026915bdfbcad65e182511625d10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1StopQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a059ea24c0d68036bf8b55d26fa97ab55</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StopQuaternionTrackingDataMessage</name>
      <anchorfile>classigtl_1_1StopQuaternionTrackingDataMessage.html</anchorfile>
      <anchor>a045a434d45203f95c0c317460fe4e4da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StopTrackingDataMessage</name>
    <filename>classigtl_1_1StopTrackingDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StopTrackingDataMessage.html</anchorfile>
      <anchor>a737060d938b25dacfc0eb82b68be3c34</anchor>
      <arglist>(igtl::StopTrackingDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StopTrackingDataMessage.html</anchorfile>
      <anchor>add29c50876279c20268a39d3ae449dae</anchor>
      <arglist>(igtl::StopTrackingDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1StopTrackingDataMessage.html</anchorfile>
      <anchor>a829975377bd6978b269d7cb07623d936</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1StopTrackingDataMessage.html</anchorfile>
      <anchor>a246a5047e0ccdbe0afa30d29c5568f1d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopTrackingDataMessage</name>
      <anchorfile>classigtl_1_1StopTrackingDataMessage.html</anchorfile>
      <anchor>ac42ef985d353d842ccf0de25e27d4cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1StopTrackingDataMessage.html</anchorfile>
      <anchor>ad2f0a74ff9dacb76ffad9df002299110</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StopTrackingDataMessage</name>
      <anchorfile>classigtl_1_1StopTrackingDataMessage.html</anchorfile>
      <anchor>aeee9aa05187b409199ee90e452185d8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StopVideoMessage</name>
    <filename>classigtl_1_1StopVideoMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StopVideoMessage.html</anchorfile>
      <anchor>a6f5b26cbbde4c02e2b1b370061ecf023</anchor>
      <arglist>(igtl::StopVideoMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StopVideoMessage.html</anchorfile>
      <anchor>ac36c40ed8762c2bf7406574750811138</anchor>
      <arglist>(igtl::StopVideoMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1StopVideoMessage.html</anchorfile>
      <anchor>a516397ba6e9a23e2d5477a972010cd61</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1StopVideoMessage.html</anchorfile>
      <anchor>ad63bad1879d79f61ba522362f0fdf261</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopVideoMessage</name>
      <anchorfile>classigtl_1_1StopVideoMessage.html</anchorfile>
      <anchor>ac599e411c2d125b4c938b75cab9c42d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1StopVideoMessage.html</anchorfile>
      <anchor>a76ee847853daf40037b94cfdf959c542</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StopVideoMessage</name>
      <anchorfile>classigtl_1_1StopVideoMessage.html</anchorfile>
      <anchor>ad0d11fd4a58d62221364227f2eaffef4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::StringMessage</name>
    <filename>classigtl_1_1StringMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtlUint16</type>
      <name>GetEncoding</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>a5665ef28156047d0a2429e3fcbe86489</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetString</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>ae97dadf4f8e9b4574b0e19306756328f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>ae2e826420fab74bae008af10c105ad9b</anchor>
      <arglist>(igtl::StringMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>ab18197935a6ac87fa07c12e8ddb46fc5</anchor>
      <arglist>(igtl::StringMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetEncoding</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>acba465c00b723632c0beadf6ec9ca1a8</anchor>
      <arglist>(igtlUint16 enc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetString</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>a30d12d16d79c8c415e20466837fe92aa</anchor>
      <arglist>(const char *string)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetString</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>a30ddd44a5a673c1a2a4b86736873e164</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>a767339ed66d516c72846226ec44966db</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>aeeff9588d454a3e692516d5e573ae5e5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StringMessage</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>a67582df2b6b27b4b32a65521300eca71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>aacd33733ae63141c4434b3469eb586d4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~StringMessage</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>a72d28a5ced1478264043a22751201ac0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint16</type>
      <name>m_Encoding</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>ac2e76c90a61dec465b9ed3cd5b7c5611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_String</name>
      <anchorfile>classigtl_1_1StringMessage.html</anchorfile>
      <anchor>a5fb7168f6bef526756c17cd7f6f2f796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringOverMap</name>
    <filename>classStringOverMap.html</filename>
  </compound>
  <compound kind="class">
    <name>igtl::MultiThreader::ThreadInfo</name>
    <filename>classigtl_1_1MultiThreader_1_1ThreadInfo.html</filename>
    <member kind="variable">
      <type>int *</type>
      <name>ActiveFlag</name>
      <anchorfile>classigtl_1_1MultiThreader_1_1ThreadInfo.html</anchorfile>
      <anchor>aa8fadcf7f1c8b30210f851e72dd42f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MutexLock::Pointer</type>
      <name>ActiveFlagLock</name>
      <anchorfile>classigtl_1_1MultiThreader_1_1ThreadInfo.html</anchorfile>
      <anchor>a615f5591f341cf59196ef2b6945cdc0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfThreads</name>
      <anchorfile>classigtl_1_1MultiThreader_1_1ThreadInfo.html</anchorfile>
      <anchor>a4b977859beb66d1b64fccf4f9f197274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ThreadID</name>
      <anchorfile>classigtl_1_1MultiThreader_1_1ThreadInfo.html</anchorfile>
      <anchor>aee092ad29d3452d75c48b340293cf3af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>UserData</name>
      <anchorfile>classigtl_1_1MultiThreader_1_1ThreadInfo.html</anchorfile>
      <anchor>ad2462c97f1ebfc3d78f3b9d500d16652</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::TimeStamp</name>
    <filename>classigtl_1_1TimeStamp.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTime</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>a492d8e8199aa57875c1589cd50eeffb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>a5b4608e09eb0f5149d99a9871048e3ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>a49ad52dc95b3ecc2ae0d2d215e50783c</anchor>
      <arglist>(igtlUint32 *second, igtlUint32 *nanosecond)</arglist>
    </member>
    <member kind="function">
      <type>igtlUint64</type>
      <name>GetTimeStampInNanoseconds</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>a3b9cf9876d5198938554fc4b071ddfa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint64</type>
      <name>GetTimeStampUint64</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>afcdfcb900cb2c7be90ade2f305840971</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlGetConstMacro</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>a671c9b98743fbff7931018ea12d0acc3</anchor>
      <arglist>(Frequency, igtlUint32)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlGetConstMacro</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>a70ece20ecc3c0d2a16cb8a619d9c6abe</anchor>
      <arglist>(Nanosecond, igtlUint32)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlGetConstMacro</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>a5ece562b41e7166b8c55a24a85d6d1aa</anchor>
      <arglist>(Second, igtlUint32)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>a31b0cd2ec5e241a926689f66f2767224</anchor>
      <arglist>(Self)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>a0213a64977d4ec8566983f027c949322</anchor>
      <arglist>(TimeStamp, Object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTime</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>acf0a04f99e8f1b73fdaddbd261ed7715</anchor>
      <arglist>(double tm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTime</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>a9607f716aad8aa3db0b46166f3eeab4f</anchor>
      <arglist>(igtlUint32 second, igtlUint32 nanosecond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTime</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>a8fc1f6a8a6a90ceda732136e0c8e30d3</anchor>
      <arglist>(igtlUint64 tm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeInNanoseconds</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>acc798257ff78c8b0df680401893fd026</anchor>
      <arglist>(igtlUint64 tm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>ab80b81d74f12719132940f2054a1bfb2</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimeStamp</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>acaac6907ac832306390019d677f2a573</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeStamp</name>
      <anchorfile>classigtl_1_1TimeStamp.html</anchorfile>
      <anchor>afe7785a51aa71c95dfc3ac425f28ec2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::TrackingDataElement</name>
    <filename>classigtl_1_1TrackingDataElement.html</filename>
    <base>igtl::Object</base>
    <member kind="enumvalue">
      <name>TYPE_TRACKER</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a2637f5bea1a2ebe8205472246ef2bae7ad77f2f525fce6e09ac384977d9ef7def</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_6D</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a2637f5bea1a2ebe8205472246ef2bae7a3866e6d901e31b6f4442190529b8801b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_3D</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a2637f5bea1a2ebe8205472246ef2bae7a36b27ea81cafed1250ba8ce15f093662</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_5D</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a2637f5bea1a2ebe8205472246ef2bae7a44ff5455d97fccea38e006539388fbd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_3D</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a2637f5bea1a2ebe8205472246ef2bae7a36b27ea81cafed1250ba8ce15f093662</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_5D</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a2637f5bea1a2ebe8205472246ef2bae7a44ff5455d97fccea38e006539388fbd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_6D</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a2637f5bea1a2ebe8205472246ef2bae7a3866e6d901e31b6f4442190529b8801b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_TRACKER</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a2637f5bea1a2ebe8205472246ef2bae7ad77f2f525fce6e09ac384977d9ef7def</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMatrix</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a9d5c1c97a00ca1c96315af5b80d12e39</anchor>
      <arglist>(Matrix4x4 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a659398c4ad2f157bca1a577761cf5b0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPosition</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>aaa0c9b19441199593da01d04f63c1590</anchor>
      <arglist>(float *px, float *py, float *pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPosition</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a97edadaabfc09a7079e79802f08ddc8e</anchor>
      <arglist>(float p[3])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint8</type>
      <name>GetType</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a96bd2f4a88e1711adb5232df4ba4e299</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a2c0e16181f89d7573f6066a961091066</anchor>
      <arglist>(igtl::TrackingDataElement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a46a53622c629b3fbef54838b22f52e97</anchor>
      <arglist>(igtl::TrackingDataElement, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMatrix</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a0cbda7d4baab8084fb240f6a13b3acb9</anchor>
      <arglist>(Matrix4x4 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetName</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a43e5b7e175e7c86d141e0d9414d5d513</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>aafae0de24b4a1de530a59e369758f0bb</anchor>
      <arglist>(float p[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>aa818107be3831c5b7c20d40cd90f3d8e</anchor>
      <arglist>(float px, float py, float pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetType</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a3418a8f0d656375fafa12c3c086190cd</anchor>
      <arglist>(igtlUint8 type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TrackingDataElement</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a2fc6a8b3c483fa8c2de31279cf6b35cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TrackingDataElement</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>aab95e3d0e7b29582d1752a4bf75e99e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix4x4</type>
      <name>m_Matrix</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a3c0cec1b1389cbd160da63f1f23cd9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Name</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a5cb18fbf675557715d7fdf1f7c407d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_Type</name>
      <anchorfile>classigtl_1_1TrackingDataElement.html</anchorfile>
      <anchor>a5ffe332f03f9ac42ca99cc4d6a019c3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::TrackingDataMessage</name>
    <filename>classigtl_1_1TrackingDataMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddTrackingDataElement</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>a0839b7a871244710fc5a964c2d9be415</anchor>
      <arglist>(TrackingDataElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearTrackingDataElements</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>aba7bd45aa1e95bcaed3205d053282f2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfTrackingDataElement</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>ab6decd1c9128905fd15c5ad56e1e353f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfTrackingDataElements</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>ae75b820d0ccc2abedea667847f3d2fa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTrackingDataElement</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>ab01a5b704da5578918234b2afc7f56c2</anchor>
      <arglist>(int index, TrackingDataElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>a77ba63cb06aa54c5d9c80c85199e45d5</anchor>
      <arglist>(igtl::TrackingDataMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>a106e60270016816f0514adcaa5120a61</anchor>
      <arglist>(igtl::TrackingDataMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>a7efd2b9f82b60a5047d1122fa9ba0f0f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>aa2c21a7406691fae8ecd8cb1c196af4a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TrackingDataMessage</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>a065a6cbcd8b4a3cfdc88b9434328454b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>a0ff0d5b5cbe406ae47c654031ca94830</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TrackingDataMessage</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>ab6fbd3f1b49bc75141593f49b7424936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; TrackingDataElement::Pointer &gt;</type>
      <name>m_TrackingDataList</name>
      <anchorfile>classigtl_1_1TrackingDataMessage.html</anchorfile>
      <anchor>a38b34a7a6483384dc278e1450fce5af2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::TrajectoryElement</name>
    <filename>classigtl_1_1TrajectoryElement.html</filename>
    <base>igtl::Object</base>
    <member kind="enumvalue">
      <name>TYPE_ENTRY_ONLY</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a57cd61fbac7bd4e618540e013e542751a0dd5ebe4f29b5d05a2af6fed6faaf664</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_TARGET_ONLY</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a57cd61fbac7bd4e618540e013e542751a0d707bc5a22fa07fbcf28fab5d8ed357</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_ENTRY_TARGET</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a57cd61fbac7bd4e618540e013e542751a2cf4e53b67deae5f9057d974fcda485b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_ENTRY_ONLY</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a57cd61fbac7bd4e618540e013e542751a0dd5ebe4f29b5d05a2af6fed6faaf664</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_ENTRY_TARGET</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a57cd61fbac7bd4e618540e013e542751a2cf4e53b67deae5f9057d974fcda485b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_TARGET_ONLY</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a57cd61fbac7bd4e618540e013e542751a0d707bc5a22fa07fbcf28fab5d8ed357</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetEntryPosition</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a88f264350151c2827679d5c98f17c58e</anchor>
      <arglist>(igtlFloat32 &amp;x, igtlFloat32 &amp;y, igtlFloat32 &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetEntryPosition</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a298ecc4af3e53d177ba1cabef5f44dc1</anchor>
      <arglist>(igtlFloat32 *position)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetGroupName</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a008cb9ff8181a1c83c65bb6bc530568b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a6a5c4c8ce1cdd64436161e6b48ede912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetOwner</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a3c877926e48190094ab5d2d659206205</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtlFloat32</type>
      <name>GetRadius</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>ad83b46caa2dc71ffd266a9462be48131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRGBA</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a308560bcc7e43a936568d5a47044c065</anchor>
      <arglist>(igtlUint8 &amp;r, igtlUint8 &amp;g, igtlUint8 &amp;b, igtlUint8 &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRGBA</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a361a70c8bf011eb10a69d115c97f19d8</anchor>
      <arglist>(igtlUint8 *rgba)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTargetPosition</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>ab3de33140f7c9ff2b432b8e5e1247048</anchor>
      <arglist>(igtlFloat32 &amp;x, igtlFloat32 &amp;y, igtlFloat32 &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTargetPosition</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a62485ece10a4fffbf2e2e5955785d942</anchor>
      <arglist>(igtlFloat32 *position)</arglist>
    </member>
    <member kind="function">
      <type>igtlUint8</type>
      <name>GetType</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>ad06ad0616e17b0876d3510ce9d81df25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a6726dfde23816f54dafb32b0bf69e469</anchor>
      <arglist>(igtl::TrajectoryElement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>aa8b97d9325c28631e568a7cafcb22ea9</anchor>
      <arglist>(igtl::TrajectoryElement, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEntryPosition</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>ab72ac43d5ce816e0facff212268d9809</anchor>
      <arglist>(igtlFloat32 position[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEntryPosition</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a87450c02bcb5ac10b638b60c2946b7be</anchor>
      <arglist>(igtlFloat32 x, igtlFloat32 y, igtlFloat32 z)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetGroupName</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>ac928e47898f0d1727a4a6dd1588360a2</anchor>
      <arglist>(const char *grpname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetName</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>aaa7c79a15eae1b448f6cabec56621689</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetOwner</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>accd2622a6523c1336d5d44bd26b2bebc</anchor>
      <arglist>(const char *owner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRadius</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a437f661b055eff468fb31dd616e517a3</anchor>
      <arglist>(igtlFloat32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRGBA</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a4c347f39fe6f88c3d548f3df99df36fb</anchor>
      <arglist>(igtlUint8 r, igtlUint8 g, igtlUint8 b, igtlUint8 a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRGBA</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a4ba2b3867315a383abe73c9c038139ce</anchor>
      <arglist>(igtlUint8 rgba[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTargetPosition</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a7dedb181171e98c91fb9b31341d0122a</anchor>
      <arglist>(igtlFloat32 position[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTargetPosition</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a74aec3324707a842a757648a38c93a96</anchor>
      <arglist>(igtlFloat32 x, igtlFloat32 y, igtlFloat32 z)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetType</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a1d595045669378b107c358fc96bb0145</anchor>
      <arglist>(igtlUint8 type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TrajectoryElement</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a425e47f606bbeb4464219d5d6edd2432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TrajectoryElement</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a5d6a4c0b42ea342172909caa29d6a2a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlFloat32</type>
      <name>m_EntryPosition</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a29eaa68ba14ce8bc85fc1a6de8aa4008</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_GroupName</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a1587b24783cf8930e7d92118c01f59db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Name</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>aa654b6401c31fa23996ef549a40d6100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Owner</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a506cc4a1bcb8b1c7ba7ea7302fb28cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlFloat32</type>
      <name>m_Radius</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>aba6e390ef06337ae96812ccac738b9de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_RGBA</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a434de0178f165ff8456a7c744c5e984e</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlFloat32</type>
      <name>m_TargetPosition</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>a885cb01dd2bd09c23a9f171ebd8e5ebf</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_Type</name>
      <anchorfile>classigtl_1_1TrajectoryElement.html</anchorfile>
      <anchor>ac29c7778b87921b0bf09aac37ba34c30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::TrajectoryMessage</name>
    <filename>classigtl_1_1TrajectoryMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddTrajectoryElement</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>a04bb345986bfa5cf9c47a14e5dd7169c</anchor>
      <arglist>(TrajectoryElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearAllTrajectoryElements</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>abcae520b268785c247371f8f9e8a177b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfTrajectoryElement</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>aa2a39986cd81ae6dec9123e2d8e4abb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTrajectoryElement</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>aca50c79fd868f246ffdc01ced80443c7</anchor>
      <arglist>(int index, TrajectoryElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlLegacyMacro</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>aa7b25d6266945466bd54a7effb75da95</anchor>
      <arglist>(void ClearTrajectoryElement(TrajectoryElement::Pointer &amp;elem))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>a67f7b734559193fa17daa056713b0ed9</anchor>
      <arglist>(igtl::TrajectoryMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>a475f69b8b0fa36adbca0c3a5dc26456a</anchor>
      <arglist>(igtl::TrajectoryMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>a6bf059c0af46e27e28d28c8acc47d60a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>ac279aa4cb1b35c49c1403a0ca2302c2d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TrajectoryMessage</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>aa6316a71203cd52f336755055ae0a987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>a1206bcec9b01da21fdb4ad56e5abd91c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TrajectoryMessage</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>ac17e7ec2b5a210e4912132f3763aebe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; TrajectoryElement::Pointer &gt;</type>
      <name>m_TrajectoryList</name>
      <anchorfile>classigtl_1_1TrajectoryMessage.html</anchorfile>
      <anchor>af1581e50176af7ddcd84280f110b1cb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::TransformMessage</name>
    <filename>classigtl_1_1TransformMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMatrix</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a22b836f013d92d0dfa3fcd057aa96ad7</anchor>
      <arglist>(Matrix4x4 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNormals</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a777a6ad6f4c63d5fb7f95951422ee14a</anchor>
      <arglist>(float o[3][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNormals</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a39aec4b1ba858ea7adeed2cb806dfaa9</anchor>
      <arglist>(float t[3], float s[3], float n[3])</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPosition</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>ae6bd7614cd000de9d71f3357398482f3</anchor>
      <arglist>(float *px, float *py, float *pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPosition</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a2aae6a5ba72d8e4a4f5e70b2d104474b</anchor>
      <arglist>(float p[3])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>af253d8bd31c06b90725d1e5712fef1a4</anchor>
      <arglist>(igtl::TransformMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>af5360e69fd2fcfcee861cfd003567195</anchor>
      <arglist>(igtl::TransformMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMatrix</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a5183f7b403c087d8aac41d11fd4eb664</anchor>
      <arglist>(Matrix4x4 &amp;mat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormals</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a5f247b55338265d25471cc37d5d7cdba</anchor>
      <arglist>(float o[3][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormals</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a6dbadf7106b587415babe23580b68b18</anchor>
      <arglist>(float t[3], float s[3], float n[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a22166300e6cb6f1018fb80ec8d3e65ed</anchor>
      <arglist>(float p[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a03b7441c570fab20aa87e9d599c729f7</anchor>
      <arglist>(float px, float py, float pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>af1f3c70a44cc8534e14683d1c9f1058d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>ab9729731cf501a477f396196c2087846</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TransformMessage</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a60249fee34b43a80e970ddefaaabbe82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a7cbc8c114ed4c7cc4c1239b6e3e52fde</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TransformMessage</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a14d4f0839b6938eae5fbbac09dc2619b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Transform</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>a63efe52b491b1960f44cd0eb34c4870b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix4x4</type>
      <name>matrix</name>
      <anchorfile>classigtl_1_1TransformMessage.html</anchorfile>
      <anchor>af272eb9540cec2860d6d6101cb923385</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::UDPClientSocket</name>
    <filename>classigtl_1_1UDPClientSocket.html</filename>
    <base>igtl::GeneralSocket</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a76192880d0fcf1f00e5300ae4973520f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetConnected</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a7ea24199d8dde270ac1810276cd960f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSocketAddressAndPort</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ab0bd35bd2d94b1c316deb1d2e4c88458</anchor>
      <arglist>(std::string &amp;address, int &amp;port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>igtlTypeMacro(igtl::UDPClientSocket, igtl::GeneralSocket) igtlNewMacro(igtl int</type>
      <name>JoinNetwork</name>
      <anchorfile>classigtl_1_1UDPClientSocket.html</anchorfile>
      <anchor>ac78c88b7d0acdb76df9f7597529bc147</anchor>
      <arglist>(const char *groupIPAddr, int portNum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReadSocket</name>
      <anchorfile>classigtl_1_1UDPClientSocket.html</anchorfile>
      <anchor>a1a3267c020151d7eaf805f195ef6fb5f</anchor>
      <arglist>(unsigned char *buffer, unsigned bufferSize)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Receive</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>abf19c4f08cdf1426fc34e7c5bedd5e42</anchor>
      <arglist>(void *data, int length, int readFully=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReceiveUDP</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aba5a7815b3cede7888ba73a7aa314e90</anchor>
      <arglist>(void *data, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Send</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a307e4a7fd7058882d7611aeac485b045</anchor>
      <arglist>(const void *data, int length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SendUDP</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a5438fa6d22b62a874cb70b23fc1f14e9</anchor>
      <arglist>(const void *data, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetIPAddress</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aae8d394c4082f6fd6e4877a686c3bc89</anchor>
      <arglist>(const char *ip)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPortNumber</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a34fc4e38c183332d9dccf8f55ccb7b6b</anchor>
      <arglist>(igtl_uint16 port)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetReceiveBlocking</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a7d2f8d80eb0aed992af7665fab9424a2</anchor>
      <arglist>(int sw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetReceiveTimeout</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a2815bc6c9ce43b1792663985dc0a17b4</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSendBlocking</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a2907603a6cec25943e595ed965aad1fc</anchor>
      <arglist>(int sw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSendTimeout</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a1c035254827b6af356768c2b93f06a4e</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeout</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ad3417ec04636aa9b38eb8894a021e7ed</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Skip</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>afb08857670b95eb79d03723e552920e5</anchor>
      <arglist>(int length, int skipFully=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Accept</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ae2b3217b066a294b85e2fb946b4438af</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BindSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a953a569f2cd5353e25e9fa28ef4d12b4</anchor>
      <arglist>(int socketdescriptor, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CloseSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ac4b2edd5181186efc7b373f26d721f77</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Connect</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a47b87d8a5e8b68caba0eb8c87ef254b9</anchor>
      <arglist>(int socketdescriptor, const char *hostname, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreateSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>afde9b835d7bc35cdde98b97c8ed412cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreateUDPClientSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a1217093e8dbcef0b41bd156d7205afb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreateUDPServerSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a486fd9b8c5b5a0f88f50f011e541d15c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetPort</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aa261747bb936a1d20849df580fd53a23</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>igtlGetMacro</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aa1019fbbfc4ec54ce2fa83283382cdbf</anchor>
      <arglist>(SocketDescriptor, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Listen</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a42d2588cdd7be34419767476e1ae0f21</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1UDPClientSocket.html</anchorfile>
      <anchor>adbbaa1064d7e61bfd1fc8ace0cc2467a</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SelectSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a8b29a16f5c7b590fa302064908791f4c</anchor>
      <arglist>(int socketdescriptor, unsigned long msec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UDPClientSocket</name>
      <anchorfile>classigtl_1_1UDPClientSocket.html</anchorfile>
      <anchor>a05b0311577c5c0a1b8d2f42e47e96010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~UDPClientSocket</name>
      <anchorfile>classigtl_1_1UDPClientSocket.html</anchorfile>
      <anchor>a5eb417662cfe760f8b0591da035e1b10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>SelectSockets</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a43217e7cc3ca9ae1b36033030a6c0e71</anchor>
      <arglist>(const int *sockets_to_select, int size, unsigned long msec, int *selected_index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_SocketDescriptor</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>af7a18e868afb012030db49ae21738796</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>UDPServerSocket</name>
      <anchorfile>classigtl_1_1UDPClientSocket.html</anchorfile>
      <anchor>af3b4341fdd268c7fbe358572b043ad11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::UDPServerSocket</name>
    <filename>classigtl_1_1UDPServerSocket.html</filename>
    <base>igtl::GeneralSocket</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddClient</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>a0a2fd9d10b6a1828dd01fc113a044960</anchor>
      <arglist>(const char *add, igtl_uint16 port, unsigned int clientID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddGroup</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>a53c2fdcd83c5e1338af0607a709cc0c2</anchor>
      <arglist>(const char *add, igtl_uint16 port, unsigned int clientID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a76192880d0fcf1f00e5300ae4973520f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateUDPServer</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>ac63b76751cc3a975e5076130970d47af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DeleteClient</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>add4f5df932235940ef1a97b699b702a6</anchor>
      <arglist>(unsigned int groupID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetConnected</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a7ea24199d8dde270ac1810276cd960f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSocketAddressAndPort</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ab0bd35bd2d94b1c316deb1d2e4c88458</anchor>
      <arglist>(std::string &amp;address, int &amp;port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>a24da83e68b23310489a84a4f9405dd78</anchor>
      <arglist>(igtl::UDPServerSocket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>a84d11d40015a08cb9c9e5e0b2d0d5794</anchor>
      <arglist>(igtl::UDPServerSocket, igtl::GeneralSocket)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMulticastAddreesValid</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>a3e26e77fde945526d58f1a01f03d3254</anchor>
      <arglist>(const char *add)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Receive</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>abf19c4f08cdf1426fc34e7c5bedd5e42</anchor>
      <arglist>(void *data, int length, int readFully=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReceiveUDP</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aba5a7815b3cede7888ba73a7aa314e90</anchor>
      <arglist>(void *data, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Send</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a307e4a7fd7058882d7611aeac485b045</anchor>
      <arglist>(const void *data, int length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SendUDP</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a5438fa6d22b62a874cb70b23fc1f14e9</anchor>
      <arglist>(const void *data, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetIPAddress</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aae8d394c4082f6fd6e4877a686c3bc89</anchor>
      <arglist>(const char *ip)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPortNumber</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a34fc4e38c183332d9dccf8f55ccb7b6b</anchor>
      <arglist>(igtl_uint16 port)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetReceiveBlocking</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a7d2f8d80eb0aed992af7665fab9424a2</anchor>
      <arglist>(int sw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetReceiveTimeout</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a2815bc6c9ce43b1792663985dc0a17b4</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSendBlocking</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a2907603a6cec25943e595ed965aad1fc</anchor>
      <arglist>(int sw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSendTimeout</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a1c035254827b6af356768c2b93f06a4e</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeout</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ad3417ec04636aa9b38eb8894a021e7ed</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Skip</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>afb08857670b95eb79d03723e552920e5</anchor>
      <arglist>(int length, int skipFully=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WriteSocket</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>a2d00825fc67530d4134d7fb52667521a</anchor>
      <arglist>(unsigned char *buffer, unsigned bufferSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Accept</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ae2b3217b066a294b85e2fb946b4438af</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BindSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a953a569f2cd5353e25e9fa28ef4d12b4</anchor>
      <arglist>(int socketdescriptor, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CloseSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>ac4b2edd5181186efc7b373f26d721f77</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Connect</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a47b87d8a5e8b68caba0eb8c87ef254b9</anchor>
      <arglist>(int socketdescriptor, const char *hostname, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreateSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>afde9b835d7bc35cdde98b97c8ed412cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreateUDPClientSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a1217093e8dbcef0b41bd156d7205afb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreateUDPServerSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a486fd9b8c5b5a0f88f50f011e541d15c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetPort</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aa261747bb936a1d20849df580fd53a23</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>igtlGetMacro</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>aa1019fbbfc4ec54ce2fa83283382cdbf</anchor>
      <arglist>(SocketDescriptor, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Listen</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a42d2588cdd7be34419767476e1ae0f21</anchor>
      <arglist>(int socketdescriptor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>aff437f53e48f1542f1c0953f606f85a3</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SelectSocket</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a8b29a16f5c7b590fa302064908791f4c</anchor>
      <arglist>(int socketdescriptor, unsigned long msec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UDPServerSocket</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>a20e752b9d42a5ef0c66806bec7e847ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~UDPServerSocket</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>ac0d91e47e7a81e106af8095cdae80041</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>SelectSockets</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>a43217e7cc3ca9ae1b36033030a6c0e71</anchor>
      <arglist>(const int *sockets_to_select, int size, unsigned long msec, int *selected_index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ClientDest &gt;</type>
      <name>clients</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>a95a902d24a1af13e66f811fff63d8ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; GroupDest &gt;</type>
      <name>groups</name>
      <anchorfile>classigtl_1_1UDPServerSocket.html</anchorfile>
      <anchor>af0062f55d5d4898aaa7f71a4dbff5402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_SocketDescriptor</name>
      <anchorfile>classigtl_1_1GeneralSocket.html</anchorfile>
      <anchor>af7a18e868afb012030db49ae21738796</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::Unit</name>
    <filename>classigtl_1_1Unit.html</filename>
    <base>igtl::Object</base>
    <member kind="enumvalue">
      <name>SI_BASE_NONE</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59aa55a0ce74b7c1dc102217adbcbccf9ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_METER</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a1204d9f5044927b2d26d593ce207ba94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_GRAM</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a4c459c1048f86fd6afff94ec2d062342</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_SECOND</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a59eab72495fc0cb2305ea9d9c3009261</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_AMPERE</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a3dfa543a659673db60cc5145c02c5756</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_KELVIN</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a15489c54020117e842b3f2e6f0d9215d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_MOLE</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59ab08dd20c5c4696123ec59e19aee9a266</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_CANDELA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59ac6f1de19323fb4b862ed1b86f7c33a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_RADIAN</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a35bcbaa7589e54677cb92973b7e830cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_STERADIAN</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a1dcf246409d1f9e153811bc708459bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_HERTZ</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a0b1b0243dc18368665e52eea21319b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_NEWTON</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a88a15250dab42435f516b3c4e21e1a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_PASCAL</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a002164f91243944bbb3c478fe1f4d843</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_JOULE</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a42a7fa098227fbe01e34e986c5c58b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_WATT</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a7f62c15c83a3cf2bebe4ec5a66226e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_COULOMB</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a88ac1f72a5ce44f405451a0a853bed6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_VOLT</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59aec827991365a623a50a9f22dd0209df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_FARAD</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59af6fda7ce64c9bafd37efa9341bea10a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_OHM</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a58b3bb7f2b1a895d11006ab4ab101aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_SIEMENS</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59aaf60a195d76edd288dfdb56b81f30bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_WEBER</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a9a1e20816f56371cbce65db01925e3a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_TESLA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59aa959d528cd2251ab0633422fa4dfa1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_HENRY</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a98103891fe5cfcd20a4896f51104cbcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_LUMEN</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59abfd262198469b3f326099f5b3b2218c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_LUX</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59aee9e80897432980852373ce08d71b548</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_BECQUEREL</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a6ca7b552756fc9646168ae888934e178</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_GRAY</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a5d96ac4d9290d40d6a8baef69389a6f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_SIEVERT</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a745b5c47354bfab22d5117f0f09d7b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_NUM_UNIT_TYPES</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a8a753e048b4f66e771e160b6a0303f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_NONE</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61ae7ef0f72ffecb188c2cfd051333b74eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_DEKA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61abacb7f109f1b68956a56624d0f4ae7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_HECTO</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a5a9c4c2a59de5b3635bc5bdd8fe77c64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_KILO</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a114aba389dd1f2e8c012db0aa07f65a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_MEGA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a48a6514ea914a16c77f525530248a4e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_GIGA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a4cb471e63844ba756189bea154a61896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_TERA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61ab018dc60ad94676b2a238751fb156b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_PETA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61afbbb7b53d28b44632192384650bdf675</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_DECI</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a1ed6f2ab12b188a729efa0f330775198</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_CENTI</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61aaf80a3540d9c638c3721d9538b17251c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_MILLI</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61aa1f2c5aa91ec1863fdde8b42ab209f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_MICRO</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a1b4be0280d95516d4e5ff597234cf6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_NANO</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a94ad1f92da89534d16ca194dfd7a7e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_PICO</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a7d28f7b6e9a4c27e88411d419ebc5da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_FEMTO</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a004ba05e4596e5ed96886ddc926ef9e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_AMPERE</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a3dfa543a659673db60cc5145c02c5756</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_CANDELA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59ac6f1de19323fb4b862ed1b86f7c33a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_GRAM</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a4c459c1048f86fd6afff94ec2d062342</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_KELVIN</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a15489c54020117e842b3f2e6f0d9215d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_METER</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a1204d9f5044927b2d26d593ce207ba94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_MOLE</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59ab08dd20c5c4696123ec59e19aee9a266</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_NONE</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59aa55a0ce74b7c1dc102217adbcbccf9ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_BASE_SECOND</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a59eab72495fc0cb2305ea9d9c3009261</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_BECQUEREL</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a6ca7b552756fc9646168ae888934e178</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_COULOMB</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a88ac1f72a5ce44f405451a0a853bed6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_FARAD</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59af6fda7ce64c9bafd37efa9341bea10a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_GRAY</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a5d96ac4d9290d40d6a8baef69389a6f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_HENRY</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a98103891fe5cfcd20a4896f51104cbcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_HERTZ</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a0b1b0243dc18368665e52eea21319b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_JOULE</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a42a7fa098227fbe01e34e986c5c58b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_LUMEN</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59abfd262198469b3f326099f5b3b2218c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_LUX</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59aee9e80897432980852373ce08d71b548</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_NEWTON</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a88a15250dab42435f516b3c4e21e1a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_OHM</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a58b3bb7f2b1a895d11006ab4ab101aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_PASCAL</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a002164f91243944bbb3c478fe1f4d843</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_RADIAN</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a35bcbaa7589e54677cb92973b7e830cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_SIEMENS</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59aaf60a195d76edd288dfdb56b81f30bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_SIEVERT</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a745b5c47354bfab22d5117f0f09d7b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_STERADIAN</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a1dcf246409d1f9e153811bc708459bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_TESLA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59aa959d528cd2251ab0633422fa4dfa1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_VOLT</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59aec827991365a623a50a9f22dd0209df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_WATT</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a7f62c15c83a3cf2bebe4ec5a66226e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_DERIVED_WEBER</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a9a1e20816f56371cbce65db01925e3a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_NUM_UNIT_TYPES</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a58bb229adf44a4bda03e17f7ca9d2d59a8a753e048b4f66e771e160b6a0303f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_CENTI</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61aaf80a3540d9c638c3721d9538b17251c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_DECI</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a1ed6f2ab12b188a729efa0f330775198</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_DEKA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61abacb7f109f1b68956a56624d0f4ae7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_FEMTO</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a004ba05e4596e5ed96886ddc926ef9e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_GIGA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a4cb471e63844ba756189bea154a61896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_HECTO</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a5a9c4c2a59de5b3635bc5bdd8fe77c64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_KILO</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a114aba389dd1f2e8c012db0aa07f65a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_MEGA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a48a6514ea914a16c77f525530248a4e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_MICRO</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a1b4be0280d95516d4e5ff597234cf6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_MILLI</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61aa1f2c5aa91ec1863fdde8b42ab209f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_NANO</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a94ad1f92da89534d16ca194dfd7a7e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_NONE</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61ae7ef0f72ffecb188c2cfd051333b74eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_PETA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61afbbb7b53d28b44632192384650bdf675</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_PICO</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61a7d28f7b6e9a4c27e88411d419ebc5da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SI_PREFIX_TERA</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>adcd9cba6dcbedc15912a28006ed9bb61ab018dc60ad94676b2a238751fb156b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Append</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a4a9be0e280a96c7836f0dfb4d2c421a8</anchor>
      <arglist>(int unit, int exp)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>ad3debbb451c8d8df1e274d0265503696</anchor>
      <arglist>(Self)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>ab7fafee254fa761774c58d334fc7b609</anchor>
      <arglist>(Unit, Object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a1f808f8529bc4394e52429f3bdb44deb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtlUnit</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a2b0d083253ffcf1c7974acdd819ead1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPrefix</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>ab60c32029729ce4137a84ca5689c89ea</anchor>
      <arglist>(int prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>aef8ba98efaf7c8ce6f33a0d46892075f</anchor>
      <arglist>(igtlUnit unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Unit</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a22587b7911e4b3af352491572872f90a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Unit</name>
      <anchorfile>classigtl_1_1Unit.html</anchorfile>
      <anchor>a77db0cb6d25ec1c5a3366f970fe1379f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::UnWrappedMessage</name>
    <filename>classigtl_1_1UnWrappedMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>UnWrappedMessage</name>
      <anchorfile>classigtl_1_1UnWrappedMessage.html</anchorfile>
      <anchor>a1e3ad0392b37f60dc384bf05d7645e37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnWrappedMessage</name>
      <anchorfile>classigtl_1_1UnWrappedMessage.html</anchorfile>
      <anchor>acaf1bc26f19adef59cdc9758d968ae05</anchor>
      <arglist>(UnWrappedMessage const &amp;anotherMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnWrappedMessage</name>
      <anchorfile>classigtl_1_1UnWrappedMessage.html</anchorfile>
      <anchor>a14f88e4a8f17281bb13e990dea5cfb37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>igtl_uint32</type>
      <name>messageDataLength</name>
      <anchorfile>classigtl_1_1UnWrappedMessage.html</anchorfile>
      <anchor>a60e63d096cc45eec8db99f8f6e34bfd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char *</type>
      <name>messagePackPointer</name>
      <anchorfile>classigtl_1_1UnWrappedMessage.html</anchorfile>
      <anchor>a17c91d6ca943b1653d5586972f4404d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::VideoMessage</name>
    <filename>classigtl_1_1VideoMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>DTYPE_SCALAR</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ae4b0ecad3e17a38c7f22ae26f3e44c65a2bcd827904593a50ccf735c414603fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DTYPE_VECTOR</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ae4b0ecad3e17a38c7f22ae26f3e44c65aa375c20600597ce1fe9bbe585b653820</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATE_RAS</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>aa038a941489cbc3c2bdb8cfc2d242a92a9abe07e3783f30183e6abab2369c4e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATE_LPS</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>aa038a941489cbc3c2bdb8cfc2d242a92adb679621b48ef2cacda4e4b3af925ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDIAN_BIG</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2fcbf18c066e9709b6470f22adff7dbcabaae441bb86d3e64536c0e10f2b06af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDIAN_LITTLE</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2fcbf18c066e9709b6470f22adff7dbcab9ddb41813e40550ca3d52902ce2303d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT8</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2b7abc1779422877b634edb2d6f51faca6cc99b6908e17da5bf87094437ba981c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT8</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2b7abc1779422877b634edb2d6f51faca59bec693f4abeb3912cf96b4a4f05fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT16</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2b7abc1779422877b634edb2d6f51facae925b338956d8620df0eadcef0a6d083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT16</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2b7abc1779422877b634edb2d6f51faca751014011795dae4bb2acecb10aff63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT32</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2b7abc1779422877b634edb2d6f51faca67ed7a8714198c867bfa1bc5ca515843</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT32</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2b7abc1779422877b634edb2d6f51facabcea8deaf3abe5447eef75c3cdfb94c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATE_LPS</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>aa038a941489cbc3c2bdb8cfc2d242a92adb679621b48ef2cacda4e4b3af925ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATE_RAS</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>aa038a941489cbc3c2bdb8cfc2d242a92a9abe07e3783f30183e6abab2369c4e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DTYPE_SCALAR</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ae4b0ecad3e17a38c7f22ae26f3e44c65a2bcd827904593a50ccf735c414603fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DTYPE_VECTOR</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ae4b0ecad3e17a38c7f22ae26f3e44c65aa375c20600597ce1fe9bbe585b653820</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDIAN_BIG</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2fcbf18c066e9709b6470f22adff7dbcabaae441bb86d3e64536c0e10f2b06af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDIAN_LITTLE</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2fcbf18c066e9709b6470f22adff7dbcab9ddb41813e40550ca3d52902ce2303d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT16</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2b7abc1779422877b634edb2d6f51facae925b338956d8620df0eadcef0a6d083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT32</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2b7abc1779422877b634edb2d6f51faca67ed7a8714198c867bfa1bc5ca515843</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_INT8</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2b7abc1779422877b634edb2d6f51faca6cc99b6908e17da5bf87094437ba981c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT16</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2b7abc1779422877b634edb2d6f51faca751014011795dae4bb2acecb10aff63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT32</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2b7abc1779422877b634edb2d6f51facabcea8deaf3abe5447eef75c3cdfb94c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_UINT8</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2b7abc1779422877b634edb2d6f51faca59bec693f4abeb3912cf96b4a4f05fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateScalars</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a4e2df14e50ca3a5cb8c4282c6fa0f988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetAdditionalZDimension</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a9e1cd9d7a23d78a684ad1f1616be2e34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetBitStreamSize</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>aecdb65c9778122a4e15ae0626c8f908e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetCodecType</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a5a28a47455aeb6852b6b97aa69a17428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetDimensions</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ad8a5cca4070bc03734852314277e2821</anchor>
      <arglist>(int &amp;i, int &amp;j, int &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetDimensions</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a84a8a6e8b5f094b942b22a41080571b9</anchor>
      <arglist>(int s[3])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEndian</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a728d76397a58db64fd2ceaaaf065f77f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetFrameType</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a21ce97740fc5290b9f6b3c4a197e613c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetHeight</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a6929aa92a0a05948791d3334eebf5356</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMatrix</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2ec4d83c2c1692184e092b8d8789ec23</anchor>
      <arglist>(Matrix4x4 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNormals</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a172bd14deeedd0bed4d9ff612c8490c6</anchor>
      <arglist>(float o[3][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNormals</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a064d955e2ad0c4527806e3a71cbc6324</anchor>
      <arglist>(float t[3], float s[3], float n[3])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfPackFragments</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a00e964996ce13d3fd2b99bbbc9da6404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrigin</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a6c9ae4f68754b35b27eb5b41f3451dd5</anchor>
      <arglist>(float &amp;px, float &amp;py, float &amp;pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrigin</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a236200925b8fec16ac98494bceb74e12</anchor>
      <arglist>(float p[3])</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetPackedBitStreamSize</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a9cc0d9362001a91c75cad13c85142947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>GetPackFragmentPointer</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a4cc88869d46ef68635b2bb1cfa2283e5</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetPackFragmentSize</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a0256e2a82488da742a21505a6d9c376c</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a49d0b12c7c5cee58a6f22a2d2b8e960b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetScalarSize</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a7b14ce04eebccefa3730ab019263c6a1</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSpacing</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2ccd9b529c530420bab2b1ec56a437ee</anchor>
      <arglist>(float &amp;si, float &amp;sj, float &amp;sk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSpacing</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a185f53e613a36882f7ae4ff6a61adcfc</anchor>
      <arglist>(float s[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSubVolume</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>aa702baa5e9674e5be1c00a7556a9b65a</anchor>
      <arglist>(int &amp;dimi, int &amp;dimj, int &amp;dimk, int &amp;offi, int &amp;offj, int &amp;offk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSubVolume</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ab36bb7b02c71a0f395f42010cff83679</anchor>
      <arglist>(int dim[3], int off[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetWidth</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a445904c4c58f5a55ce0668b0df8c1192</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAdditionalZDimension</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ad1942c3acfdb8a4a769dc44a5460211b</anchor>
      <arglist>(int zDimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBitStreamSize</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ace7f14a9a6f4ea86b71f05b8f8cb066b</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetCodecType</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ad77430c68f1b5a263781252a6f1afe78</anchor>
      <arglist>(const char codecType[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDimensions</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a65aa9c67fa72cb36e19fd748ec890a9e</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDimensions</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a1c60344ff14855a704512a452b9a6afc</anchor>
      <arglist>(int s[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndian</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a419dfbcf5e7955f1f4a28220baa33b31</anchor>
      <arglist>(int e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrameType</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ae370e7e5ac2d9dc0afb6b467f7e79896</anchor>
      <arglist>(int e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeight</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a78b61e482e6d79a6d1a9886e4e59a5fb</anchor>
      <arglist>(int h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMatrix</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a5c1e5b7872149bb5c75d728608b4a691</anchor>
      <arglist>(Matrix4x4 &amp;mat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormals</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a6606c8981af3c1d1224ed5402f03e259</anchor>
      <arglist>(float o[3][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormals</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2873eb5e44db0a5f603454e390846058</anchor>
      <arglist>(float t[3], float s[3], float n[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>aa5599ec884fbe3fdf916cc17c4feb382</anchor>
      <arglist>(float p[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a07aa6e3ffc28eb1c1397716a72ca57a8</anchor>
      <arglist>(float px, float py, float pz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpacing</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a8fa1c5f6aab35831e854908ef67d6558</anchor>
      <arglist>(float s[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpacing</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ae65f1399c86141c21725c08ea5958810</anchor>
      <arglist>(float si, float sj, float sk)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSubVolume</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a2ee7b2d172b466eca8b14b2f430b250a</anchor>
      <arglist>(int dim[3], int off[3])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSubVolume</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a9c14da19ed62519f15b6d09e11fdcc9a</anchor>
      <arglist>(int dimi, int dimj, int dimk, int offi, int offj, int offk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetWidth</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a21a50eee69082b7c5f19f876cb35bb16</anchor>
      <arglist>(int w)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ac82a1efbd0b3ab9a4c07caf086282933</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>a824b4af0e5cd740296b9c9546362c62e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>adc8bf8e9b1e0120e18063e491d367265</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VideoMessage</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>aa9993760a4f3129517b2b91901090237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~VideoMessage</name>
      <anchorfile>classigtl_1_1VideoMessage.html</anchorfile>
      <anchor>ad3bec7be6aa4b5e262ab424bd4f902bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::VideoMessageHeader</name>
    <filename>classigtl_1_1VideoMessageHeader.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetBodyPackSize</name>
      <anchorfile>classigtl_1_1VideoMessageHeader.html</anchorfile>
      <anchor>a4ddf70e350b030a0208ab778b1cf9563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1VideoMessageHeader.html</anchorfile>
      <anchor>a16ff73f5f627f31da7338b9916c08a5f</anchor>
      <arglist>(igtl::VideoMessageHeader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1VideoMessageHeader.html</anchorfile>
      <anchor>a8e91c7ae7c953e19832989fe796fe062</anchor>
      <arglist>(igtl::VideoMessageHeader, igtl::MessageBase)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>PackBody</name>
      <anchorfile>classigtl_1_1VideoMessageHeader.html</anchorfile>
      <anchor>a66a9a31834357360ea91631507a2455c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1VideoMessageHeader.html</anchorfile>
      <anchor>a58cc3e034a5c72fa5f189e4df747ffd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VideoMessageHeader</name>
      <anchorfile>classigtl_1_1VideoMessageHeader.html</anchorfile>
      <anchor>a4c6ecd7708418e4bbfcbb24c7192b3b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~VideoMessageHeader</name>
      <anchorfile>classigtl_1_1VideoMessageHeader.html</anchorfile>
      <anchor>a06447258069d2305606f9cc732a1f013</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::VideoMetaElement</name>
    <filename>classigtl_1_1VideoMetaElement.html</filename>
    <base>igtl::Object</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a6a59754d90d3dc19e4a2a98634331cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtlFloat64</type>
      <name>GetFocalLength</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>ab1315a06462ed8cdab9e2b3b9c86422c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMatrix</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>ab55cef3a9250ceb1bb746d76eaf8b160</anchor>
      <arglist>(Matrix4x4 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>ac171af1e1350d4a8b418d39831c1cd91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNormals</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>aba089b5a426c6d9eabde435116de5dc5</anchor>
      <arglist>(float t[3], float s[3], float n[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrigin</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a502b15d1344a52b526f5479c1a53c0ba</anchor>
      <arglist>(float &amp;px, float &amp;py, float &amp;pz)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetPatientID</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a4eb744afd7fa73152dcaf97a29ff1e1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetPatientName</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a34ca1f69f56d6cfa49b6e3178c223ef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>igtlUint8</type>
      <name>GetScalarType</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a08ab75a53d44587ef740da048ebdaee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSize</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>af7aecbc112e66d59959769cd6ec90bd5</anchor>
      <arglist>(igtlUint16 &amp;si, igtlUint16 &amp;sj, igtlUint16 &amp;sk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSpacing</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a6181cb7c0e479669c71f598a83d59039</anchor>
      <arglist>(float &amp;si, float &amp;sj, float &amp;sk)</arglist>
    </member>
    <member kind="function">
      <type>igtlInt16</type>
      <name>GetZoomLevel</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a5730b8be0a7ce16d110f2e0bdb9b6324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a61d8cf71013a49710ef11b866919f0a6</anchor>
      <arglist>(igtl::VideoMetaElement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a451aadcc9ff6ea6c75eabf658b0b5237</anchor>
      <arglist>(igtl::VideoMetaElement, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a6d9fa1f89077b3f9c280b3af52c560b6</anchor>
      <arglist>(const char *devname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFocalLength</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a4f4544ad66f5de5c785c320ace2bbd48</anchor>
      <arglist>(igtlFloat64 length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMatrix</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a1d72a81520b4e2eb4aaa2eac3f42fb07</anchor>
      <arglist>(Matrix4x4 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetName</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a773ad8eef9b82e57d47f195e30c4b39f</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormals</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>aa9946f93793e0c49c7a4789219e02d1c</anchor>
      <arglist>(float t[3], float s[3], float n[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a007c9b2ef9c2f06ba1fd257d424acc0e</anchor>
      <arglist>(float px, float py, float pz)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPatientID</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a00ac54d826313f347711ba892639abf5</anchor>
      <arglist>(const char *patid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPatientName</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a9ca345c9e6f68414c1f45aac96c92c37</anchor>
      <arglist>(const char *patname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScalarType</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a9d3ca09932202a3ab5c4c12cf3489de7</anchor>
      <arglist>(igtlUint8 type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSize</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a4dda431e63b6e6dbcf26bedc6fc11d16</anchor>
      <arglist>(igtlUint16 si, igtlUint16 sj, igtlUint16 sk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpacing</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>abdbec4964867baeb322da6a430bcf22c</anchor>
      <arglist>(float si, float sj, float sk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetZoomLevel</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a0692f19996f23a1f5bc13dc6489584f6</anchor>
      <arglist>(igtlInt16 level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VideoMetaElement</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a7c3374bc9e314fe703f9630d221c06b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~VideoMetaElement</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>ab98c148cb88d191d948ed33af536f5e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>aa3661cfc9917a1cee7c7250961b22d13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlFloat64</type>
      <name>m_FocalLength</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a44b609fe058b10fe0673c29f1e0d6719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_Name</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>af570aefe046b659e4366d5d964f6c545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_PatientID</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a88f73e26cea2359c4bcc559d9b45415c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_PatientName</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>afff2e77d76e153d3cad2f6c32d7e36cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint8</type>
      <name>m_ScalarType</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>acbce46c60a6fd5130d8eabbae733c207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlUint16</type>
      <name>m_Size</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>adbd5b7575dcd6f73cf965c18ab7e979b</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtlInt16</type>
      <name>m_ZoomLevel</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a98b3788c8862c65f37038fa4575a0aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix4x4</type>
      <name>matrix</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>af6f7eb41d662d54c79aa1e7d0771618b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>spacing</name>
      <anchorfile>classigtl_1_1VideoMetaElement.html</anchorfile>
      <anchor>a335a71e89c58f250cf27087700d90d15</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::VideoMetaMessage</name>
    <filename>classigtl_1_1VideoMetaMessage.html</filename>
    <base>igtl::MessageBase</base>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_BODY</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa6ed1f0caa87b6fe696f5ce82db76878e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_HEADER</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa7b2a8c38b4128620f63cb8f5afe70626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNPACK_UNDEF</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae6fbc612db18e7d8f45bb424d5edb9faa31c26db2b4ff1c29d507b639fac88dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddVideoMetaElement</name>
      <anchorfile>classigtl_1_1VideoMetaMessage.html</anchorfile>
      <anchor>a8a08e4fcd75e25f1bf3c8972b04b8a5c</anchor>
      <arglist>(VideoMetaElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abf775bfea023530956cfa5a345cd274f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocatePack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8866e24ddb0f529e5984caa74e477f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>CalculateReceiveContentSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a4953e56ccd34c834e6466562aa675922</anchor>
      <arglist>(bool &amp;isUnpacked)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearVideoMetaElement</name>
      <anchorfile>classigtl_1_1VideoMetaMessage.html</anchorfile>
      <anchor>a277579eb0361b04b2037fab064461823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl::MessageBase::Pointer</type>
      <name>Clone</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>af4f1099e8561c8c6c5918e28893a0e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Copy</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a771cbe35a2896c0f01b7d7d01e6557f8</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae745e82859cc6a418bd42de097567e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetBodyType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5f99814e8713e90875213b405538406c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>adea66f0da269f837d9dbec6a29900089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a8a7e283f58d67c2a39626214e21f554d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetBufferPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a2caa58cd3519646c94a7b07757cbb1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetBufferSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a734f0d46fcaeeb804638d23eb8b30a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a909b1db45e06559a2e2551e16b40652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>acb357c5f312ffb2fa5951b18de8b6ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a773ed0491ce045433ee67db5a91f056f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1d4fc773564e1615ff9107cb5b36d9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ac30c9d99b7af1afd637aec1ff0da1697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfVideoMetaElement</name>
      <anchorfile>classigtl_1_1VideoMetaMessage.html</anchorfile>
      <anchor>af976f1bc837ed892f5e24c949d9d3c13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackBodyPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6b53d23ba1b21f48de2d6103b9bf12c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackBodySize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3c1f98cbed95c1bfa76a4f5139f9ad56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetPackPointer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ab6e3b6c8711897f29e50b18dfb3e01dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>igtl_uint64</type>
      <name>GetPackSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7eaaa26ed521f09c3aecdc3dec97b4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9bc839515938c13af31f4071f658d6b7</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa2791187555f5b6da56e092dee8afd9d</anchor>
      <arglist>(unsigned int *sec, unsigned int *frac)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetVideoMetaElement</name>
      <anchorfile>classigtl_1_1VideoMetaMessage.html</anchorfile>
      <anchor>a3a3c461e0441d47dede0057687cafd23</anchor>
      <arglist>(int index, VideoMetaElement::Pointer &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1VideoMetaMessage.html</anchorfile>
      <anchor>ad4cbbdb2965420ad42ad3ae52625fb4c</anchor>
      <arglist>(igtl::VideoMetaMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1VideoMetaMessage.html</anchorfile>
      <anchor>a2f31ee7df9a1363d86552d5a09b8b582</anchor>
      <arglist>(igtl::VideoMetaMessage, igtl::MessageBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b73e8308be11df13ee4d4f7bbc51e5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a65333f75199ffa39e4be80782afdafce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a222693fbb9bdc026d3dc6333eb7551f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3396474b30bda964f553c91649e6090e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d6cafce1d7ddb54a4cbaa944f0e1d87</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDeviceType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>ae9c452c9aca925bbca5b9b5c0b830120</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa3f649661fa6803860ac8779e7226066</anchor>
      <arglist>(unsigned short headerVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMessageHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a01a7777e06852c81a72dc33881a38915</anchor>
      <arglist>(const MessageHeader *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a474e274a54b576ec27616d0d9b8ceef8</anchor>
      <arglist>(igtl::TimeStamp::Pointer &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetTimeStamp</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a1f8fac8cabb876deea09e666382833d5</anchor>
      <arglist>(unsigned int sec, unsigned int frac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Unpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a29f7a91f355e9fb6851ae6c6fa57ed1e</anchor>
      <arglist>(int crccheck=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateBuffer</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a3bd6be9df11d13565cd0287df13d2ce3</anchor>
      <arglist>(igtlUint64 contentSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AllocateUnpack</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6d9aae2dabd676bae2a4043624191cc6</anchor>
      <arglist>(igtl_uint64 bodySizeToRead)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>igtlUint64</type>
      <name>CalculateContentBufferSize</name>
      <anchorfile>classigtl_1_1VideoMetaMessage.html</anchorfile>
      <anchor>a91383f297ea2fe96c6941ec8e4f1d020</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a007b6d284337757811330fb1f132e62e</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a271724574ebaabf504056654ac6a689f</anchor>
      <arglist>(const MessageBase *mb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackContent</name>
      <anchorfile>classigtl_1_1VideoMetaMessage.html</anchorfile>
      <anchor>ab6305a525d7b69eef1dfc5b5570dbba3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackBody</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa041a512cf95035379527ad5bb3a0fb3</anchor>
      <arglist>(int crccheck, int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackContent</name>
      <anchorfile>classigtl_1_1VideoMetaMessage.html</anchorfile>
      <anchor>a78df211422159eb5ba5a6c989e813152</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnpackHeader</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a42b9d19514d206da471ca9bd9ecf2c36</anchor>
      <arglist>(int &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VideoMetaMessage</name>
      <anchorfile>classigtl_1_1VideoMetaMessage.html</anchorfile>
      <anchor>aa8d7fbee3ab3daff4e0686d942a8400f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~VideoMetaMessage</name>
      <anchorfile>classigtl_1_1VideoMetaMessage.html</anchorfile>
      <anchor>acff171f1381ead567636031de12737b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Body</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5ad6cf8ca6f3c14d602874d393407a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_BodySizeToRead</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a9c3c5da9645bfc3454b2285fce8c3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Content</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a826b0b870a9f2332874d58475ae71816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a6a472ee2e0caa9f69fa6502d197d055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>m_Header</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a5945b3c9e5b4d5cd22201c744378d710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>m_HeaderVersion</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abbaca70290b5fb66265afbeb233b5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyPacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa69aadabaa34876ddb8ef18fc9b42125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsBodyUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a7d8cd803f7ec11ad5e00d57372089a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsHeaderUnpacked</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>abac53134b4f39b88fbbe000df26d5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>igtl_uint64</type>
      <name>m_MessageSize</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a590af11de422588fbdcf1330c83652fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_ReceiveMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a70066a0bc9f7fe4597e93d6584319ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_SendMessageType</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>aa60ff3c3e1f33592200f80185c3ac26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSec</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a371080a3f379e4b796e5bf595c66b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_TimeStampSecFraction</name>
      <anchorfile>classigtl_1_1MessageBase.html</anchorfile>
      <anchor>a0b31ba4bbf6184a5c1246eb046a33750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; VideoMetaElement::Pointer &gt;</type>
      <name>m_VideoMetaList</name>
      <anchorfile>classigtl_1_1VideoMetaMessage.html</anchorfile>
      <anchor>a287f9e8381e9667e2ee2f8fcc98836ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::VideoStreamIGTLinkReceiver</name>
    <filename>classigtl_1_1VideoStreamIGTLinkReceiver.html</filename>
    <member kind="enumvalue">
      <name>RunOnTCP</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a7e226204b022b7f8f734f4a771b335e4a3fb2cd3acf9c329487efb32a09b3fc63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RunOnUDP</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a7e226204b022b7f8f734f4a771b335e4ab70cf128e895ea02063a29e9842eacc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RunOnTCP</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a7e226204b022b7f8f734f4a771b335e4a3fb2cd3acf9c329487efb32a09b3fc63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RunOnUDP</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a7e226204b022b7f8f734f4a771b335e4ab70cf128e895ea02063a29e9842eacc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a23cffe0b56828f8eb8d039f47f5a671f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetHeight</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>ac313fa9ff9b069e774873613b2381fc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTransportMethod</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a217e2896acc1bd6e970e2acf41c2c397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetWidth</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a81bf65f3de0ae347faa5e3e21c494779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InitializeClient</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a152988fa6b1bf67f2f3456b8ef68b578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeDecodedFrame</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a8162283df8ea5679b2c0f925da77600a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ParseConfigForClient</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>ab563e89db464b03e2ceea5f1e5380047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ProcessVideoStream</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a3336bdfe108e054b751bc68b33fe88e2</anchor>
      <arglist>(igtl_uint8 *bitStream, int streamLength)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RunOnTCPSocket</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a94b2d5d1ce05280c98dce13b3c3012b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RunOnUDPSocket</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>abeba82538489e049b44c1c1e01963a4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendStopMessage</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a5eef16c7dcaf63e3c18739082d96c31e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDecoder</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a422c27cb07c4aeb63937f6f62e0ddada</anchor>
      <arglist>(GenericDecoder *decoder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHeight</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a6e24acc9dde0769969b2f415fa6beb0e</anchor>
      <arglist>(int iHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetWidth</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>ae6a7a47e7d4d9a4cc594ba2749307677</anchor>
      <arglist>(int iWidth)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VideoStreamIGTLinkReceiver</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a56ef9f5a849832c2110264029968d70b</anchor>
      <arglist>(char *fileName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VideoStreamIGTLinkReceiver</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkReceiver.html</anchorfile>
      <anchor>a621d174c1c119b635d4f8caf3bf538a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::VideoStreamIGTLinkServer</name>
    <filename>classigtl_1_1VideoStreamIGTLinkServer.html</filename>
    <class kind="class">igtl::VideoStreamIGTLinkServer::encodedFrame</class>
    <member kind="enumeration">
      <type></type>
      <name>TransportMethod</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a20a49fb72f513d8f955e351bf78e0bd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UseTCP</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a20a49fb72f513d8f955e351bf78e0bd8a3cce93c2261a2976fed05daa8d3515e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UseUDP</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a20a49fb72f513d8f955e351bf78e0bd8a17d29b496200a9f2d8655db550952bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UseTCP</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a20a49fb72f513d8f955e351bf78e0bd8a3cce93c2261a2976fed05daa8d3515e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UseUDP</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a20a49fb72f513d8f955e351bf78e0bd8a17d29b496200a9f2d8655db550952bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EncodeFile</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>aa6d765a6b8ec85ddbe052a75ded45f7d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EncodeSingleFrame</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>ac9e871efb4baa58f3f65faedc13322a9</anchor>
      <arglist>(igtl_uint8 *picPointer, bool isGrayImage=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetServerConnectStatus</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a05b9101a61899bce98d309f6b9a76a30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetServerSetStatus</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a78a19e054adf81014b548e03ea2c183d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetVideoFrameType</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a0d238423de85eb117c097304c92e12a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InitializeEncoder</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>aca94f80dab0daf75082cbd8796f25408</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ParseConfigForServer</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a346734d80f0539825fca5c1f04ce5e0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendCompressedData</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>af9835976746e58372aebecfde9ab0648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendOriginalData</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a5b64ecfc3bb4b3ba0efb581dba78ee92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetEncoder</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a21f5806d9efa069e1bd5f8b7e02e312a</anchor>
      <arglist>(GenericEncoder *encoder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSrcPicHeight</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a21ed04355157d3569b0fd7f78235e0ee</anchor>
      <arglist>(int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSrcPicWidth</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a1c3a5d1782eb3d543588cb7bdd203542</anchor>
      <arglist>(int width)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetupServer</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a394f9198427d3dea7a28133894093c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetWaitSTTCommand</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a88a0399dc789c9818cdc7628d3019e0d</anchor>
      <arglist>(bool needSTTCommand)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>StartReadFrameThread</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a27c166de9864dc5e38256b49b796651a</anchor>
      <arglist>(int frameRate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>StartSendPacketThread</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a3ed6e29a8a77cf82843d8739084dfd4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>StartTCPServer</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a832bed04cca5bf785c019cdc39364d8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>StartUDPServer</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a694253f541fc19139224c0552d1526f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Stop</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a843c859d9c37f6b482dad0cedbf8abcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VideoStreamIGTLinkServer</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>aecd4f52c013055614c427c3a74fb9c04</anchor>
      <arglist>(char *argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VideoStreamIGTLinkServer</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a08de878614b9d11f350a62965eb826b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>argc</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a9d3a8d33af350019e1a705e5902d6f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>augments</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>ac7f2f0a7ea43e19d90987cc4a76b633d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>clientIPAddress</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a473dd541ba449f63f62908f619a58986</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>clientPortNumber</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a04f1b8b6490b18ad152f3f2928820d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>codecName</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>af0d7cea45d46cb51f75356608da41cef</anchor>
      <arglist>[IGTL_VIDEO_CODEC_NAME_SIZE]</arglist>
    </member>
    <member kind="variable">
      <type>igtl::ConditionVariable::Pointer</type>
      <name>conditionVar</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a638c4b7b041fd576cb87048e8773aee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ReadConfigFile</type>
      <name>cRdCfg</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a5f0c8ffcbc058f9a32cb99baa03172e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>deviceName</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a69eb6c43efab87131bd55473c41e59b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; igtlUint32, encodedFrame * &gt;</type>
      <name>encodedFrames</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>ad84a0e015736eb95458d2fef28023ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtlUint64</type>
      <name>encodeEndTime</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>acbb6222bbcd47d192a9ca09aac3b0412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtlUint64</type>
      <name>encodeStartTime</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a12cc1b166bda0499021deb41e5e43d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl::SimpleMutexLock *</type>
      <name>glock</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>abf153b3a239fa32b03f2aa716ec6ae3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl::SimpleMutexLock *</type>
      <name>glockInFrame</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a20e8f34d3113fda377c68a4edb9bda14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; igtlUint32, igtl_uint8 * &gt;</type>
      <name>incommingFrames</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a36672a263820ca1d519f20c754e13ce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>interval</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a5edb4ee55a2b15922bab4cbea11bd23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iTotalFrameToEncode</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>aeeabc697e246c3fc754f1ec65876b4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>netWorkBandWidth</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a668b7dfa77e7afcf41e9734d52155bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SourcePicture *</type>
      <name>pSrcPic</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>ada60009d50a0a9caa738b7077e857eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl::MessageRTPWrapper::Pointer</type>
      <name>rtpWrapper</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a133b8818f2930fe65503ae5e287763e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>serverConnected</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a784870f30dbb25fc4bfd6d6fe14f50e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>serverIsSet</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>abc1aca6e0e6e7abea234bb4cbf01fb06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>serverPortNumber</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>ac8d305ae9298d8981a70b625a0bf137d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl::ServerSocket::Pointer</type>
      <name>serverSocket</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a11ae3eb4a5a61c245b6670954e751d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl::TimeStamp::Pointer</type>
      <name>ServerTimer</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>aa20ca9482310e95b52dc85af6e063b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl::UDPServerSocket::Pointer</type>
      <name>serverUDPSocket</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a166d3a2ea9aa301aca6602da0fb75b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl::Socket::Pointer</type>
      <name>socket</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a121f683eb297bb0d137a49b708093da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>strOutputFile</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a90c2f0b69b00a435188343f38ac55a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>strSeqFile</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>ad9108fe5428b3af75b52f482ba2f32e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl::MultiThreader::Pointer</type>
      <name>threader</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>ab8991406a090416e9d2361e71b43ec2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>transportMethod</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a8cf49cc566cc7b8ad9ec3151c5985c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GenericEncoder *</type>
      <name>videoEncoder</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a9c63338b7b1a50e2d69f5bdec8a90ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>videoFrameType</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a4e98e38d9cbc1a95234fe677e93e33f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>waitSTTCommand</name>
      <anchorfile>classigtl_1_1VideoStreamIGTLinkServer.html</anchorfile>
      <anchor>a59f65d70dc44fdd174e4a7ac961032ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::VP9Decoder</name>
    <filename>classigtl_1_1VP9Decoder.html</filename>
    <base>igtl::GenericDecoder</base>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DecodeBitStreamIntoFrame</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a0755e045fcb26bce381188dc9bf3a074</anchor>
      <arglist>(unsigned char *bitStream, igtl_uint8 *outputFrame, igtl_uint32 iDimensions[], igtl_uint64 &amp;iStreamSize)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DecodeBitStreamIntoFrame</name>
      <anchorfile>classigtl_1_1VP9Decoder.html</anchorfile>
      <anchor>a74bdbf243517bd45a72bf5d4343711fb</anchor>
      <arglist>(unsigned char *bitStream, igtl_uint8 *outputFrame, igtl_uint32 iDimensions[2], igtl_uint64 &amp;iStreamSize) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DecodeVideoMSGIntoSingleFrame</name>
      <anchorfile>classigtl_1_1VP9Decoder.html</anchorfile>
      <anchor>a048ef76326a4f7188292bbd485a4b496</anchor>
      <arglist>(igtl::VideoMessage *videoMessage, SourcePicture *pDecodedPic) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual igtl_int64</type>
      <name>getCurrentTime</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ae527f8cd6beedcd925c3507e106c05bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>GetDeviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a1af1d4990ac1b37480e303e06f02dfa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetIsGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a70337d5a712b95e02c20d27af27b1c83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1VP9Decoder.html</anchorfile>
      <anchor>a0f95cacdb46b6d2673d2392f32a37a78</anchor>
      <arglist>(VP9Decoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ad8370b82298fa02e836c3ca96a242855</anchor>
      <arglist>(igtl::GenericDecoder, igtl::Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1VP9Decoder.html</anchorfile>
      <anchor>a7c23fcf4aebc8bfca7b8c02dec480f6b</anchor>
      <arglist>(VP9Decoder, GenericDecoder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetDeviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ab8434315e149e2308ebf44923c0a801c</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetIsGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a5b0adc21d495e8b401b45eda0abba426</anchor>
      <arglist>(bool grayImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackUncompressedData</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a0cdd23e9a49e340341a4148c60703f16</anchor>
      <arglist>(igtl::VideoMessage *videoMessage, SourcePicture *decodedPic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VP9Decoder</name>
      <anchorfile>classigtl_1_1VP9Decoder.html</anchorfile>
      <anchor>a0bc91357e40124af346a6af8889cb495</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VP9Decoder</name>
      <anchorfile>classigtl_1_1VP9Decoder.html</anchorfile>
      <anchor>aaec75b2ed6b67ffdc2dd0de1e94c5c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ConvertYUVToGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a232a346fe06f6fd10507b88238fd7694</anchor>
      <arglist>(igtl_uint8 *YUV420Frame, igtl_uint8 *GrayFrame, int iHeight, int iWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ConvertYUVToRGB</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ae3fe0c17e14e40fecdd36075688b5c0a</anchor>
      <arglist>(igtl_uint8 *YUVFrame, igtl_uint8 *RGBFrame, int iHeight, int iWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Write2File</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a8e8c0f586c6e8713e6ef0898c1d93a11</anchor>
      <arglist>(FILE *pFp, unsigned char *pData[], igtl_uint32 iDimensions[], igtl_uint32 iStride[])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>deviceName</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>ab8f8222fe0f2b68f036aef9e3a5f96d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isGrayImage</name>
      <anchorfile>classigtl_1_1GenericDecoder.html</anchorfile>
      <anchor>a956de3fe095a963187f2f390e8a2988c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>igtl::VP9Encoder</name>
    <filename>classigtl_1_1VP9Encoder.html</filename>
    <base>igtl::GenericEncoder</base>
    <member kind="enumvalue">
      <name>SlowestSpeed</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a3022481bf889be1aebb77437360ba9a1acb2b90529372be9c77728780908ef16c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FastestSpeed</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a3022481bf889be1aebb77437360ba9a1a2adf9628bed340cdb0b36c98d5be4cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; const Self &gt;</type>
      <name>ConstPointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ae24c413e65c6384c9254cdbc49400860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FastestSpeed</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a3022481bf889be1aebb77437360ba9a1a2adf9628bed340cdb0b36c98d5be4cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartPointer&lt; Self &gt;</type>
      <name>Pointer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ab6886c1874f56f77229363f64a19ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightObject</type>
      <name>Self</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a6e39b9a387522af0fd9baf689b579f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SlowestSpeed</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a3022481bf889be1aebb77437360ba9a1acb2b90529372be9c77728780908ef16c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ConvertToLocalImageFormat</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a8f184b2c4534286f0a179a87d074512f</anchor>
      <arglist>(SourcePicture *pSrcPic) override</arglist>
    </member>
    <member kind="function">
      <type>LightObject::Pointer</type>
      <name>CreateAnother</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a1d398a84c8f3cc0bb1ec62a6970d9c76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a0c2dc04f98232bad461a2a12e001bfab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DebugOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ace3d87d675878dd10f0f3b1749e403dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Delete</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>ad755672dd95fb7b2899ac4ae19e8a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EncodeSingleFrameIntoVideoMSG</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>aeddee39e9dc5dcd19a67b6e1b673cd41</anchor>
      <arglist>(SourcePicture *pSrcPic, igtl::VideoMessage *videoMessage, bool isGrayImage=false) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FillSpecificParameters</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>ab70b51640350617965bd248f5e485c37</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>acee045a4d1d358185245de6a5c828a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInitializationStatus</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ad78caf307fd44c4654b9df04a7918585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetLosslessLink</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a5d938933566220c3d0e4ad80ad7725ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetNameOfClass</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>afc55a9375bb3a50b2e13011236e46a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetPicHeight</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a7384e90248c470f95b32ccf7a9852d9d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetPicWidth</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a51c48d11f6d49a266a380c606654b2cc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a29681a0eb8edf20488cdc1021fae2b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetVideoFrameType</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>afc09caed262be2ad951e32ebf24f43cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlNewMacro</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a1c092def4a43ba81845372d6956e50fc</anchor>
      <arglist>(VP9Encoder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ab008518cb4d43607db39821a3cac289f</anchor>
      <arglist>(GenericEncoder, Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8d372cf1eab32b708215f7812eda5b0c</anchor>
      <arglist>(Object, LightObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlTypeMacro</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a79de7b683502e29eb1b772db31828c4d</anchor>
      <arglist>(VP9Encoder, GenericEncoder)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InitializeEncoder</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>adbba5cda8e77ebc6b62c2ccecab2c592</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PackUncompressedData</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>ab17ef3b62aeaeaf26b5f47b1b7f8fad6</anchor>
      <arglist>(SourcePicture *pSrcPic, igtl::VideoMessage *videoMessage, bool isGrayImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a7e04b8812eec7c1a9a5bdce773addfc8</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Register</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7684a3a2fbe50b71575b544a22c02b72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetConfigurationFile</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a3062d79523e3fe4dfd59150413a525ee</anchor>
      <arglist>(std::string configFile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetDeadlineMode</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a1baf4e7e3798353782ea83a9736ee09a</anchor>
      <arglist>(unsigned long mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDebug</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a6f1cb375e562871b373f449eb22f131a</anchor>
      <arglist>(bool debugFlag) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetImageFormat</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a7478e4aa33b2502f0aff68cc174910de</anchor>
      <arglist>(VideoFormatType value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetKeyFrameDistance</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a1dee94f0b2a10539aa051e9d74bb1962</anchor>
      <arglist>(int frameNum) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetLosslessLink</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a588b47f14c08958b8f3fb4f48ee63fd0</anchor>
      <arglist>(bool linkMethod) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPicWidthAndHeight</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a3eac22dc8a3aa6f3a01364089d58fe2a</anchor>
      <arglist>(unsigned int width, unsigned int height) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetQP</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a0837bd0b57176502ed07cb55fd64d896</anchor>
      <arglist>(int maxQP, int minQP) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetRCMode</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>ab14a9d540caf0cead2b0be9ec5738f93</anchor>
      <arglist>(int value) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetRCTargetBitRate</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a0d085951c6e712adb764a4a68675d9ab</anchor>
      <arglist>(unsigned int bitRate) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReferenceCount</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ada3362bfaffabd5d22f9d07c895ee5b9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSpeed</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a1e9514696caccc5f2ed6a5b77f4f241c</anchor>
      <arglist>(int speed) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnRegister</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9b1615c387142c29159600ed18d865ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VP9Encoder</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>a45e2fa9fb2386d4dd4b3971e6f858331</anchor>
      <arglist>(char *configFile=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VP9Encoder</name>
      <anchorfile>classigtl_1_1VP9Encoder.html</anchorfile>
      <anchor>ab87c2d9920adc5e9934e36c39a1b1d7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BreakOnError</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a48dc98105408471e402ddc9906fa2204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ConvertRGBToYUV</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>aaf55abdb6605c665e43bf2c6c8a305ce</anchor>
      <arglist>(igtlUint8 *rgb, igtlUint8 *destination, unsigned int width, unsigned int height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a9d9f2f49bebb97e04d366ca57dde118c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOff</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a7b5b728ad1608a68f570f452fe9f7eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GlobalWarningDisplayOn</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>ae7b4650ce0e3dcaa2d8470d18b143ad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer</type>
      <name>New</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a8f288bb97cb6bed499b3202344fcc4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetGlobalWarningDisplay</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a219903344667e12131eb1e57c3b0a542</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a75cdea5044e69a3b0c08706383ccefff</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintSelf</name>
      <anchorfile>classigtl_1_1Object.html</anchorfile>
      <anchor>a74132b70541e818ea9dfaa3799e193d4</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintTrailer</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a8febb3a3970b01f84e39e41021b7ffca</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codecSpeed</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a12ef10929fcbea81ce6a637be25fb26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>configFile</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a184f04a12c55c16b9e1c87c09475d0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReadConfigFile</type>
      <name>cRdCfg</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a91bfe8794607708b2cabf2397628d582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>encodedFrameType</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a6db666c31e29284f9649a599afc0ec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>initializationDone</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a861dc3c6546c78ce628c08163fec3424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isLossLessLink</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a14757b9da47b57ba6c02bccbc76deb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile int</type>
      <name>m_ReferenceCount</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>a38f9fb70f9b56c75138a8ac13ca5cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleFastMutexLock</type>
      <name>m_ReferenceCountLock</name>
      <anchorfile>classigtl_1_1LightObject.html</anchorfile>
      <anchor>aacc5872341d1743826701db1b7767e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>picHeight</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a021c10e506464282da7aa9622e4ec145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>picWidth</name>
      <anchorfile>classigtl_1_1GenericEncoder.html</anchorfile>
      <anchor>a1999241652600dc3b15e3400d18806b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl::VpxInterfaceDecoder</name>
    <filename>structigtl_1_1VpxInterfaceDecoder.html</filename>
    <member kind="variable">
      <type>vpx_codec_iface_t *(*const</type>
      <name>codec_interface</name>
      <anchorfile>structigtl_1_1VpxInterfaceDecoder.html</anchorfile>
      <anchor>af918369d06e7302ce73093042699e57a</anchor>
      <arglist>)()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl::VpxInterfaceEncoder</name>
    <filename>structigtl_1_1VpxInterfaceEncoder.html</filename>
    <member kind="variable">
      <type>vpx_codec_iface_t *(*const</type>
      <name>codec_interface</name>
      <anchorfile>structigtl_1_1VpxInterfaceEncoder.html</anchorfile>
      <anchor>a5f0103f5ec57f080fd8ec5086dcb4f45</anchor>
      <arglist>)()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>webSocketClient</name>
    <filename>classwebSocketClient.html</filename>
    <member kind="typedef">
      <type>websocketpp::client&lt; websocketpp::config::asio_client &gt;</type>
      <name>client</name>
      <anchorfile>classwebSocketClient.html</anchorfile>
      <anchor>a26c76c718430ae2452dec54959e04a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>websocketpp::lib::lock_guard&lt; websocketpp::lib::mutex &gt;</type>
      <name>scoped_lock</name>
      <anchorfile>classwebSocketClient.html</anchorfile>
      <anchor>ae9637ce91e192195adec1b747bb0662d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ConnectToServer</name>
      <anchorfile>classwebSocketClient.html</anchorfile>
      <anchor>ab119813df776a7bff041c60b867c07f1</anchor>
      <arglist>(const char *hostName, int port)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_close</name>
      <anchorfile>classwebSocketClient.html</anchorfile>
      <anchor>a550921b71fbf6b5e65c78d307f87db74</anchor>
      <arglist>(websocketpp::connection_hdl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_fail</name>
      <anchorfile>classwebSocketClient.html</anchorfile>
      <anchor>a1829683b603cf87e82f3c72d1e38c132</anchor>
      <arglist>(websocketpp::connection_hdl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_message</name>
      <anchorfile>classwebSocketClient.html</anchorfile>
      <anchor>a3706cfb7fa36772bb8244232059cddea</anchor>
      <arglist>(websocketpp::connection_hdl hdl, message_ptr msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_open</name>
      <anchorfile>classwebSocketClient.html</anchorfile>
      <anchor>a7dc1baaefd3aba94e2925e5c7bae2567</anchor>
      <arglist>(websocketpp::connection_hdl)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Receive</name>
      <anchorfile>classwebSocketClient.html</anchorfile>
      <anchor>a5e9ed8d1de6dd4276b64263e995232c5</anchor>
      <arglist>(void *data, int &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Send</name>
      <anchorfile>classwebSocketClient.html</anchorfile>
      <anchor>a7fb1eabe02620ecab5c24344615313ad</anchor>
      <arglist>(const void *data, int length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>webSocketClient</name>
      <anchorfile>classwebSocketClient.html</anchorfile>
      <anchor>a6d10e86b7af98588fb3fec43754d22ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>webSocketServer</name>
    <filename>classwebSocketServer.html</filename>
    <member kind="typedef">
      <type>websocketpp::connection_hdl</type>
      <name>connection_hdl</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>a5998f4b91e84cc8e839f926505c2ec98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>websocketpp::server&lt; websocketpp::config::asio &gt;</type>
      <name>server</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>aea9c51fe4efde9d780bb054849381b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateHTTPServer</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>a2a648281c2c5b3309260755affd60c8c</anchor>
      <arglist>(std::string docroot, uint16_t port)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateServer</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>ab512b9690e48e49999212bfc6674918a</anchor>
      <arglist>(uint16_t port)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_close</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>a446acfca744b58dea6be5dbffd0437ff</anchor>
      <arglist>(connection_hdl hdl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_http</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>ad9f8ca08e37f3b6c6ebb2a37fe5c0e3d</anchor>
      <arglist>(connection_hdl hdl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_open</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>a5260b971d9e5f4acf09ac08731ce7ea2</anchor>
      <arglist>(connection_hdl hdl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_timer</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>a65a392df1a1b1e9afaed4dd1e792f7d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Send</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>aa16838de01374d0a452980e5f5cd9c35</anchor>
      <arglist>(void *inputMessage, vcl_size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_timer</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>addafe2a881100291076d2c8b596f3d2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeInterval</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>a11180eacf0041df6140e4220a9a854bc</anchor>
      <arglist>(unsigned int time)</arglist>
    </member>
    <member kind="function">
      <type>webSocketServer *</type>
      <name>WaitForConnection</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>adb93821360ed45040499659e3ac199fe</anchor>
      <arglist>(unsigned long msec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>webSocketServer</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>a0c9c67166b81437cb297c8f72857b511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_docroot</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>afd0016e24686ec69e49b2739f21846c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>server</type>
      <name>m_endpoint</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>a42b8541a6014eee05a04641be21a82dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>port</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>aaaa93095e9018724852274a42004b858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>serverCreated</name>
      <anchorfile>classwebSocketServer.html</anchorfile>
      <anchor>a0742398375a18a7bc49ce0b54a32ccaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>igtl::Wrapper</name>
    <filename>structigtl_1_1Wrapper.html</filename>
    <member kind="variable">
      <type>VideoStreamIGTLinkReceiver *</type>
      <name>receiver</name>
      <anchorfile>structigtl_1_1Wrapper.html</anchorfile>
      <anchor>a49594d69999c7612f6cd6b4a2912bce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl::MessageRTPWrapper::Pointer</type>
      <name>wrapper</name>
      <anchorfile>structigtl_1_1Wrapper.html</anchorfile>
      <anchor>a162190244e7886fd41beaa1d0787b233</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>igtl</name>
    <filename>namespaceigtl.html</filename>
    <class kind="struct">igtl::AomInterfaceDecoder</class>
    <class kind="struct">igtl::AomInterfaceEncoder</class>
    <class kind="class">igtl::Array</class>
    <class kind="class">igtl::ArrayBase</class>
    <class kind="class">igtl::BindMessage</class>
    <class kind="class">igtl::BindMessageBase</class>
    <class kind="class">igtl::CapabilityMessage</class>
    <class kind="class">igtl::ClientDest</class>
    <class kind="class">igtl::ClientSocket</class>
    <class kind="class">igtl::ColorTableMessage</class>
    <class kind="class">igtl::CommandMessage</class>
    <class kind="class">igtl::ConditionVariable</class>
    <class kind="class">igtl::CreateObjectFunction</class>
    <class kind="class">igtl::CreateObjectFunctionBase</class>
    <class kind="class">igtl::FastMutexLock</class>
    <class kind="class">igtl::GeneralSocket</class>
    <class kind="class">igtl::GenericDecoder</class>
    <class kind="class">igtl::GenericEncoder</class>
    <class kind="class">igtl::GetBindMessage</class>
    <class kind="class">igtl::GetColorTableMessage</class>
    <class kind="class">igtl::GetImageMessage</class>
    <class kind="class">igtl::GetImageMessage2</class>
    <class kind="class">igtl::GetImageMetaMessage</class>
    <class kind="class">igtl::GetLabelMetaMessage</class>
    <class kind="class">igtl::GetPointMessage</class>
    <class kind="class">igtl::GetPolyDataMessage</class>
    <class kind="class">igtl::GetStatusMessage</class>
    <class kind="class">igtl::GetTrajectoryMessage</class>
    <class kind="class">igtl::GetTransformMessage</class>
    <class kind="class">igtl::GetVideoMetaMessage</class>
    <class kind="class">igtl::GroupDest</class>
    <class kind="class">igtl::H264Decoder</class>
    <class kind="class">igtl::H264Encoder</class>
    <class kind="class">igtl::H265Decoder</class>
    <class kind="class">igtl::H265Encoder</class>
    <class kind="class">igtl::HeaderOnlyMessageBase</class>
    <class kind="class">igtl::I420Decoder</class>
    <class kind="class">igtl::I420Encoder</class>
    <class kind="class">igtl::igtlAV1Decoder</class>
    <class kind="class">igtl::igtlAV1Encoder</class>
    <class kind="class">igtl::ImageMessage</class>
    <class kind="class">igtl::ImageMessage2</class>
    <class kind="class">igtl::ImageMetaElement</class>
    <class kind="class">igtl::ImageMetaMessage</class>
    <class kind="class">igtl::LabelMetaElement</class>
    <class kind="class">igtl::LabelMetaMessage</class>
    <class kind="struct">igtl::LayerpEncCtx_s</class>
    <class kind="class">igtl::LightObject</class>
    <class kind="class">igtl::MessageBase</class>
    <class kind="class">igtl::MessageFactory</class>
    <class kind="class">igtl::MessageHandler</class>
    <class kind="class">igtl::MessageRTPWrapper</class>
    <class kind="class">igtl::MultiThreader</class>
    <class kind="class">igtl::MutexLock</class>
    <class kind="class">igtl::NDArrayMessage</class>
    <class kind="class">igtl::Object</class>
    <class kind="class">igtl::ObjectFactory</class>
    <class kind="class">igtl::ObjectFactoryBase</class>
    <class kind="class">igtl::OStringStream</class>
    <class kind="class">igtl::OverRideMap</class>
    <class kind="class">igtl::PacketBuffer</class>
    <class kind="class">igtl::PointElement</class>
    <class kind="class">igtl::PointMessage</class>
    <class kind="class">igtl::PolyDataAttribute</class>
    <class kind="class">igtl::PolyDataCellArray</class>
    <class kind="class">igtl::PolyDataMessage</class>
    <class kind="class">igtl::PolyDataPointArray</class>
    <class kind="class">igtl::PositionMessage</class>
    <class kind="class">igtl::QuaternionTrackingDataElement</class>
    <class kind="class">igtl::QuaternionTrackingDataMessage</class>
    <class kind="class">igtl::QueryMessage</class>
    <class kind="class">igtl::ReadConfigFile</class>
    <class kind="struct">igtl::ReadSocketAndPush</class>
    <class kind="class">igtl::ReorderBuffer</class>
    <class kind="class">igtl::RTSBindMessage</class>
    <class kind="class">igtl::RTSCommandMessage</class>
    <class kind="class">igtl::RTSPolyDataMessage</class>
    <class kind="class">igtl::RTSQuaternionTrackingDataMessage</class>
    <class kind="class">igtl::RTSTrackingDataMessage</class>
    <class kind="class">igtl::SensorMessage</class>
    <class kind="struct">igtl::serverPointer</class>
    <class kind="class">igtl::ServerSocket</class>
    <class kind="class">igtl::SessionManager</class>
    <class kind="class">igtl::SimpleFastMutexLock</class>
    <class kind="class">igtl::SimpleMutexLock</class>
    <class kind="class">igtl::SmartPointer</class>
    <class kind="class">igtl::Socket</class>
    <class kind="struct">igtl::SourcePicture</class>
    <class kind="class">igtl::StartBindMessage</class>
    <class kind="class">igtl::StartPolyDataMessage</class>
    <class kind="class">igtl::StartQuaternionTrackingDataMessage</class>
    <class kind="class">igtl::StartTrackingDataMessage</class>
    <class kind="class">igtl::StartVideoMessage</class>
    <class kind="class">igtl::StatusMessage</class>
    <class kind="class">igtl::StopBindMessage</class>
    <class kind="class">igtl::StopImageMessage</class>
    <class kind="class">igtl::StopPolyDataMessage</class>
    <class kind="class">igtl::StopQuaternionTrackingDataMessage</class>
    <class kind="class">igtl::StopTrackingDataMessage</class>
    <class kind="class">igtl::StopVideoMessage</class>
    <class kind="class">igtl::StringMessage</class>
    <class kind="class">igtl::TimeStamp</class>
    <class kind="class">igtl::TrackingDataElement</class>
    <class kind="class">igtl::TrackingDataMessage</class>
    <class kind="class">igtl::TrajectoryElement</class>
    <class kind="class">igtl::TrajectoryMessage</class>
    <class kind="class">igtl::TransformMessage</class>
    <class kind="class">igtl::UDPClientSocket</class>
    <class kind="class">igtl::UDPServerSocket</class>
    <class kind="class">igtl::Unit</class>
    <class kind="class">igtl::UnWrappedMessage</class>
    <class kind="class">igtl::VideoMessage</class>
    <class kind="class">igtl::VideoMessageHeader</class>
    <class kind="class">igtl::VideoMetaElement</class>
    <class kind="class">igtl::VideoMetaMessage</class>
    <class kind="class">igtl::VideoStreamIGTLinkReceiver</class>
    <class kind="class">igtl::VideoStreamIGTLinkServer</class>
    <class kind="class">igtl::VP9Decoder</class>
    <class kind="class">igtl::VP9Encoder</class>
    <class kind="struct">igtl::VpxInterfaceDecoder</class>
    <class kind="struct">igtl::VpxInterfaceEncoder</class>
    <class kind="struct">igtl::Wrapper</class>
    <member kind="typedef">
      <type>struct igtl::AomInterfaceDecoder</type>
      <name>AomInterfaceDecoder</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a5b1e9e43d263e1c14d9fb99ff9568e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct igtl::AomInterfaceEncoder</type>
      <name>AomInterfaceEncoder</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a455f485d59b16e51b06dc244a31d1bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>FastMutexType</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ab7bccc6c712367b1ba549d3a003997c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ObjectFactoryBase *(*</type>
      <name>IGTL_LOAD_FUNCTION</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a7b9a5f78b2101e209e7a0b60976c9035</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>igtlUint64</type>
      <name>igtlUnit</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ae5647b73a770edfa2ec87847881fd7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Matrix4x4</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a9508b98fbfead85361fd2ddfdbad0482</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="typedef">
      <type>class MessageBase</type>
      <name>MessageHeader</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a2cc17042015722b55b110484caab1466</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>MultiThreaderIDType</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a2703744a979bb306c2050ef9aaae7bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>MutexType</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a70c528aeadc928896e736deb7c53d6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct igtl::LayerpEncCtx_s</type>
      <name>SLayerPEncCtx</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a5adeb69aca237aafc61c263143c7ad59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; std::string, ObjectFactoryBase::OverrideInformation &gt;</type>
      <name>StringOverMapType</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a08dc869f5a6ae4303f107d6e157ff889</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>ThreadFunctionType</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>abd6423e2302203ab62aad4aa770ba64c</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>ThreadProcessIDType</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a73b54702ee858da97a3f8b2363e63c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct igtl::VpxInterfaceDecoder</type>
      <name>VpxInterfaceDecoder</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a5cfbfac5a6ca8c65af09af0f9ae1074a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct igtl::VpxInterfaceEncoder</type>
      <name>VpxInterfaceEncoder</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ac9ea4d5604ff98bb5621b32a753a81ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>cmRETURN</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ad2016f464ae3cf75bf59cb96002b7026</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ResultSuccess</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ad2016f464ae3cf75bf59cb96002b7026a90443f561a2356766f3d2b98eef90ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InitParaError</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ad2016f464ae3cf75bf59cb96002b7026a19753897a5521af284fb2c8ceed2bf57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnknownReason</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ad2016f464ae3cf75bf59cb96002b7026a2c9fed6b62eff85b88515550c7ce99f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MallocMemeError</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ad2016f464ae3cf75bf59cb96002b7026a590ead72293cd66e0d188b8cbf4a4476</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InitExpected</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ad2016f464ae3cf75bf59cb96002b7026ac79b117e8957275ca57a8955e6c8793b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnsupportedData</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ad2016f464ae3cf75bf59cb96002b7026a33943b38a6cceee2b84ade68745d86a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>H264VideoFrameType</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ae4acbd106ddf9d6473c4a2598c54a74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H264FrameTypeInvalid</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ae4acbd106ddf9d6473c4a2598c54a74baa219e569c8da68d4236355a366723642</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H264FrameTypeIDR</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ae4acbd106ddf9d6473c4a2598c54a74ba8de05f35b0dfaa5b7234405348949323</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H264FrameTypeI</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ae4acbd106ddf9d6473c4a2598c54a74baa010e487ec7447f36fcc32672c493f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H264FrameTypeP</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ae4acbd106ddf9d6473c4a2598c54a74bafaec24b0d1759d51beb118ed6d522d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H264FrameTypeSkip</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ae4acbd106ddf9d6473c4a2598c54a74baba5647074fd6fc93f42d694974a3de5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H264FrameTypeIPMixed</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ae4acbd106ddf9d6473c4a2598c54a74ba48b56307fe5207cf0cd985263219430e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>H265VideoFrameType</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>aa83a0aaf8932a65627c6c22ccb6a665c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H265FrameTypeInvalid</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>aa83a0aaf8932a65627c6c22ccb6a665ca5ae26b1258f03513c0f9cf0f4fe778c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H265FrameTypeIDR</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>aa83a0aaf8932a65627c6c22ccb6a665caa82b77e210764210fc3f3686411a4ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H265FrameTypeI</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>aa83a0aaf8932a65627c6c22ccb6a665ca75ae12dd0adb36c401f3059522a02218</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H265FrameTypeP</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>aa83a0aaf8932a65627c6c22ccb6a665ca2956e8d45eea1217b15d69a3fd4ec61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H265FrameTypeSkip</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>aa83a0aaf8932a65627c6c22ccb6a665caa22415055cc71778b1bbdd0be02e0cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H265FrameTypeIPMixed</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>aa83a0aaf8932a65627c6c22ccb6a665cac273862fc084b0b5365c1050526094ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VideoFormatType</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a8d4ea63ca85f93769d6ff930e6e72916</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FormatI420</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a8d4ea63ca85f93769d6ff930e6e72916aa4f19bc8234769837b64202c75824b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FormatI444</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a8d4ea63ca85f93769d6ff930e6e72916a037e2b5dfec83bf7f715e52af17725a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VideoFrameType</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ada95dbb15ecf6facb15c6e23371b500a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FrameTypeInvalid</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ada95dbb15ecf6facb15c6e23371b500aae39c446a02d3de2eb11e9cb07767aaa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FrameTypeKey</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ada95dbb15ecf6facb15c6e23371b500aa66523fb570bfa354cd1cb25c3caa2b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FrameTypeIntraPrediction</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ada95dbb15ecf6facb15c6e23371b500aa4c7c2adb69b1d0578b1062b25c33e478</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FrameTypeInterPrediction</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ada95dbb15ecf6facb15c6e23371b500aa7d999306e92e23ac56038f825300bd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FrameTypeSkip</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ada95dbb15ecf6facb15c6e23371b500aafb49ced9b912b859c1c85274bef16f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FrameTypeUnKnown</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ada95dbb15ecf6facb15c6e23371b500aa9e3370d5fad173d06b671ff2318a469e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a4f62b2054d06422bf86cc6c398f3eb13</anchor>
      <arglist>(const PolyDataAttribute &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a26d87c25473e1b279e1f2621c14c20ec</anchor>
      <arglist>(PolyDataAttribute &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void IGTLCommon_EXPORT</type>
      <name>Cross</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>aea7d53016b5654a1b0f70e424f17f0f1</anchor>
      <arglist>(float *a, float *b, float *c)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>abdb943f4dcdcb87a4778e34c2ac7844f</anchor>
      <arglist>(const PolyDataAttribute &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::iterator</type>
      <name>end</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a6b1aa3e1069016fb493661feb03b9b0b</anchor>
      <arglist>(PolyDataAttribute &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void IGTLCommon_EXPORT</type>
      <name>IdentityMatrix</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a80d239422d66438b53401c48616c4efa</anchor>
      <arglist>(igtl::Matrix4x4 &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>IGTLProtocolToHeaderLookup</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>af378dbf7f5e6fb82d5bc245ffd5f5447</anchor>
      <arglist>(int igtlProtocolVersion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlRangeBasedForBodyMacro</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a3b201ba7a5aa7944d6c76df9407ce6dd</anchor>
      <arglist>(PolyDataCellArray, std::vector&lt; PolyDataCellArray::Cell &gt;, m_Data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlRangeBasedForBodyMacro</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a48a30536366c6cf1c634eef1a0208a04</anchor>
      <arglist>(PolyDataPointArray, std::vector&lt; PolyDataPointArray::Point &gt;, m_Data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlRangeBasedForHeaderExternalMacro</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>abe91488a54d92b3a41808dcb08832598</anchor>
      <arglist>(PolyDataCellArray, std::vector&lt; PolyDataCellArray::Cell &gt;, IGTLCommon_EXPORT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>igtlRangeBasedForHeaderExternalMacro</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a1e3b4806fce011471db790d9e24505d2</anchor>
      <arglist>(PolyDataPointArray, std::vector&lt; PolyDataPointArray::Point &gt;, IGTLCommon_EXPORT)</arglist>
    </member>
    <member kind="function">
      <type>void IGTLCommon_EXPORT</type>
      <name>MatrixToQuaternion</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a3899bac66e65ab87e72869b245073a8e</anchor>
      <arglist>(Matrix4x4 &amp;m, float *q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a84f7d9bbf5ac2964981f79ca32a8e377</anchor>
      <arglist>(const ObjectFactoryBase::OverrideInformation &amp;rhs, const ObjectFactoryBase::OverrideInformation &amp;lhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a4b50c9f5aa8287865bc40589406167d9</anchor>
      <arglist>(std::ostream &amp;os, const LightObject &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a159e99ca866ac301028ec330f9a9abba</anchor>
      <arglist>(std::ostream &amp;os, SmartPointer&lt; T &gt; p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a8918dbe82df5aa8dd0cf3defb5bc57ce</anchor>
      <arglist>(const ObjectFactoryBase::OverrideInformation &amp;rhs, const ObjectFactoryBase::OverrideInformation &amp;lhs)</arglist>
    </member>
    <member kind="function">
      <type>void IGTLCommon_EXPORT</type>
      <name>PrintMatrix</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a723aa599944f3d298334ffe0eebe14cf</anchor>
      <arglist>(igtl::Matrix4x4 &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void IGTLCommon_EXPORT</type>
      <name>PrintVector3</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a8a86d3faf209383f97c4e87e62195140</anchor>
      <arglist>(float v[3])</arglist>
    </member>
    <member kind="function">
      <type>void IGTLCommon_EXPORT</type>
      <name>PrintVector3</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ab7495a13c471b966b5a4deba397657a8</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void IGTLCommon_EXPORT</type>
      <name>PrintVector4</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a445c80592353089dbc2358b43d2b433c</anchor>
      <arglist>(float v[4])</arglist>
    </member>
    <member kind="function">
      <type>void IGTLCommon_EXPORT</type>
      <name>PrintVector4</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a4c7208c5ac8bf6dbdd0ffd578a1a409c</anchor>
      <arglist>(float x, float y, float z, float w)</arglist>
    </member>
    <member kind="function">
      <type>void IGTLCommon_EXPORT</type>
      <name>QuaternionToMatrix</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a53e1adc6f3447d1e1ae77e8da60e20d6</anchor>
      <arglist>(float *q, Matrix4x4 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ade822a6af5cb1f081762795f32aa44da</anchor>
      <arglist>(const PolyDataAttribute &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a1a5c23d3b25fc2e3d230baf071f1f5f9</anchor>
      <arglist>(PolyDataAttribute &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a7fc1868bc6c208ecb5e02a6624edf949</anchor>
      <arglist>(const PolyDataAttribute &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; igtlFloat32 &gt;::reverse_iterator</type>
      <name>rend</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ac4b36a4c1c881715c6762094b0e102a5</anchor>
      <arglist>(PolyDataAttribute &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void IGTLCommon_EXPORT</type>
      <name>SetPolyDataInfo</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a9ff1d65d86381b2fe86e9ad7e8887e21</anchor>
      <arglist>(igtl_polydata_info *info, PolyDataMessage *pdm)</arglist>
    </member>
    <member kind="function">
      <type>void IGTLCommon_EXPORT</type>
      <name>SetPolyDataInfoAttribute</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a58013c89f3c81ce9a406e2d11446d0f4</anchor>
      <arglist>(igtl_polydata_info *info, PolyDataMessage *pdm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SigIntHandler</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>aed9a325785196c4e17417288cb291afa</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sleep</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a54d5ab2a52cac5ced818727393ffab87</anchor>
      <arglist>(int milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>vcl_size_t</type>
      <name>Strnlen</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>aa72fb78e29257661c487f188bdf138c4</anchor>
      <arglist>(const char *s, vcl_size_t maxlen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>ThreadFunctionReadFrameFromFile</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a243ce712f3b0e48afb1266e3164277d2</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>ThreadFunctionReadSocket</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a91575417c7c595b5898260d09b8c9200</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>ThreadFunctionSendPacket</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a6af8f02db7eb8975f63ac3b023630812</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>ThreadFunctionServer</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a1f964eb50bc9930b57ed339c6565888f</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>ThreadFunctionUnWrap</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ac8ecd0f7ae38f1f35bf70f7a6342f972</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ToString</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>ac9b16dbba05a86b87f37d27fb9349db0</anchor>
      <arglist>(T variable)</arglist>
    </member>
    <member kind="function">
      <type>void IGTLCommon_EXPORT</type>
      <name>UnSetPolyDataInfoAttribute</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a0e92033e0c4ce2fb3db8618102c75ffa</anchor>
      <arglist>(igtl_polydata_info *info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteTimeInfo</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a312f2dd7beeacdda5669363750ca7c4c</anchor>
      <arglist>(unsigned char *UDPPacket, int totMsgLen, VideoStreamIGTLinkReceiver *receiver)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const AomInterfaceDecoder</type>
      <name>AV1StaticDecoder</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a2c266a863861ff00ba5f7fdda1a3070c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const AomInterfaceEncoder</type>
      <name>AV1StaticEncoder</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a15864db79fe12fe1f673022c60f8e365</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>g_iCtrlC</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a4d9e4809c9e116ea627642264ebda140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>igtl_int32</type>
      <name>iFrameCountTotal</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a5e3f9fcc5f2e4cd4ea169b5dbf31ddd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>MultiThreaderGlobalDefaultNumberOfThreads</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a110463d5168b77ec48e5653c845f1426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>MultiThreaderGlobalMaximumNumberOfThreads</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a604d54535d3fa9bcc16688ecb1887956</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VpxInterfaceDecoder</type>
      <name>vp9StaticDecoder</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>a6e14f6aee29f52e8f334602d20453a30</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const VpxInterfaceEncoder</type>
      <name>vp9StaticEncoder</name>
      <anchorfile>namespaceigtl.html</anchorfile>
      <anchor>acbffbd9846f824d4a3616395d84f4374</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>The OpenIGTLink Library</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Introduction">intro</docanchor>
    <docanchor file="index.html" title="More Information">homepage</docanchor>
  </compound>
</tagfile>
